<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>apcj@f5 on apcj@f5 blog</title>
    <link>/</link>
    <description>Recent content in apcj@f5 on apcj@f5 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Authors</title>
      <link>/about/</link>
      <pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>Lin Jing site: https://linjing.io
github: https://github.com/myf5
Scott Van Kalken site: https://codecowboy.io
github: https://github.com/codecowboydotio
Leon Seng site: https://leonseng.com
github: https://github.com/leonseng
Shain Singh site: https://shain.io
github: https://github.com/shsingh</description>
      <content>&lt;h2 id=&#34;lin-jing&#34;&gt;Lin Jing&lt;/h2&gt;
&lt;p&gt;site: &lt;a href=&#34;https://linjing.io&#34;&gt;https://linjing.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&#34;https://github.com/myf5&#34;&gt;https://github.com/myf5&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;scott-van-kalken&#34;&gt;Scott Van Kalken&lt;/h2&gt;
&lt;p&gt;site: &lt;a href=&#34;https://codecowboy.io&#34;&gt;https://codecowboy.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&#34;https://github.com/codecowboydotio&#34;&gt;https://github.com/codecowboydotio&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;leon-seng&#34;&gt;Leon Seng&lt;/h2&gt;
&lt;p&gt;site: &lt;a href=&#34;https://leonseng.com&#34;&gt;https://leonseng.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&#34;https://github.com/leonseng&#34;&gt;https://github.com/leonseng&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;shain-singh&#34;&gt;Shain Singh&lt;/h2&gt;
&lt;p&gt;site: &lt;a href=&#34;https://shain.io&#34;&gt;https://shain.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&#34;https://github.com/shsingh&#34;&gt;https://github.com/shsingh&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Kubernetes | Ephemeral Kubernetes Lab with IaC and GitOps</title>
      <link>/posts/ephemeral-kubernetes-lab-with-iac-and-gitops/</link>
      <pubDate>Wed, 08 Dec 2021 09:05:42 +1100</pubDate>
      
      <guid>/posts/ephemeral-kubernetes-lab-with-iac-and-gitops/</guid>
      <description>I&amp;rsquo;ve been thinking of moving my Kubernetes lab into the cloud, but with cloud resource usage being scrutinized by the IT department, running them 24x7 the way I&amp;rsquo;m used to is a no-go. I need a setup that meets the following requirements:
 Simple to create and tear down Applications must be pre-deployed when the cluster is up, as close to &amp;ldquo;just the way I left it there last night&amp;rdquo; as possible cost $0 when the setup has been switched off  I eventually settled on the idea of an ephemeral Kubernetes lab environment using Infrastructure as Code (IaC) and GitOps practices, which I will cover in this post.</description>
      <content>&lt;p&gt;I&amp;rsquo;ve been thinking of moving my Kubernetes lab into the cloud, but with cloud resource usage being scrutinized by the IT department, running them 24x7 the way I&amp;rsquo;m used to is a no-go. I need a setup that meets the following requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple to create and tear down&lt;/li&gt;
&lt;li&gt;Applications must be pre-deployed when the cluster is up, as close to &amp;ldquo;just the way I left it there last night&amp;rdquo; as possible&lt;/li&gt;
&lt;li&gt;cost $0 when the setup has been switched off&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I eventually settled on the idea of an ephemeral Kubernetes lab environment using &lt;a href=&#34;#infrastructure-as-code-using-terraform&#34;&gt;Infrastructure as Code (IaC)&lt;/a&gt; and &lt;a href=&#34;#k8s-resource-management-via-gitops-using-argo-cd&#34;&gt;GitOps&lt;/a&gt; practices, which I will cover in this post. You can follow along by cross referencing the code found here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/leonseng/terraform-everything/tree/master/eks-gitops&#34;&gt;https://github.com/leonseng/terraform-everything/tree/master/eks-gitops&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;infrastructure-as-code-using-terraform&#34;&gt;Infrastructure as Code using Terraform&lt;/h1&gt;
&lt;p&gt;Starting with the Kubernetes cluster, using a managed Kubernetes offering makes sense for me as my current focus is on Kubernetes applications.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If cluster customization is of importance, one can deploy Kubernetes on the cloud computes using tools like &lt;a href=&#34;https://github.com/kubernetes/kops&#34;&gt;kops&lt;/a&gt; or &lt;a href=&#34;https://github.com/kubernetes-sigs/kubespray&#34;&gt;kubespray&lt;/a&gt;, similarly adopting IaC practices detailed below.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I went with &lt;a href=&#34;https://aws.amazon.com/eks/&#34;&gt;EKS&lt;/a&gt; as I am more familiar with AWS. An EKS cluster (or any other managed Kubernetes offerings in the public cloud) has a lot of dependencies on other cloud resources, such as computes, gateways, security policies and more. Rather than figuring out &lt;em&gt;when&lt;/em&gt; to create &lt;em&gt;what&lt;/em&gt;, &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; can be used to define all the cloud resources needed for a functional EKS cluster in a declarative manner. In addition, Terraform modules such as &lt;a href=&#34;https://registry.terraform.io/modules/terraform-aws-modules/vpc/aws/latest&#34;&gt;vpc&lt;/a&gt; and &lt;a href=&#34;https://registry.terraform.io/modules/terraform-aws-modules/eks/aws/latest&#34;&gt;eks&lt;/a&gt; can be used to further abstract away the web of dependencies. All it takes is a couple of Terraform modules and some data sources to create the cluster, as seen here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/leonseng/terraform-everything/blob/master/eks-gitops/eks.tf&#34;&gt;https://github.com/leonseng/terraform-everything/blob/master/eks-gitops/eks.tf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the cluster sorted, I turn my attention to deploying Kubernetes resources/applications in the cluster.&lt;/p&gt;
&lt;h1 id=&#34;k8s-resource-management-via-gitops-using-argo-cd&#34;&gt;K8s resource management via GitOps using Argo CD&lt;/h1&gt;
&lt;p&gt;It&amp;rsquo;s instinctive to start running &lt;code&gt;kubectl&lt;/code&gt; commands to deploy Kubernetes resources that make up your application in the cluster, but keeping track of them gets harder overtime. If the cluster is to be rebuilt on a regular basis, we&amp;rsquo;d best hope we have a record of what&amp;rsquo;s deployed in it, and what better option than storing the Kubernetes manifests in a Git repository where the IaC definitions are also stored. With the desired state of applications in Git, the next step is ensuring the cluster state reflects the desired state. This is where GitOps comes in.&lt;/p&gt;
&lt;p&gt;GitOps can be briefly described as an automated workflow that ensures the state of the cluster and its applications matches the desired state from the source of truth, or Git repositories in the case. GitOps achieves this with one of the two patterns below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Changes are &lt;strong&gt;pushed&lt;/strong&gt; to the cluster&lt;/p&gt;
&lt;p&gt;Continuous deployment workflow applies the resource manifests on our cluster whenever there are changes in the Git repository. This can be done using simple Bash scripts, or orchestration tools like Ansible. A problem arises when there are multiple deployment workflows targeting the same cluster. As each workflow may not have a complete view of the cluster, it could lead to an inconsistent state in the cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Changes are &lt;strong&gt;pulled&lt;/strong&gt; into the cluster&lt;/p&gt;
&lt;p&gt;Officially the preferred pattern in &lt;a href=&#34;https://opengitops.dev/blog/1.0-announcement/&#34;&gt;OpenGitOps v1.0.0&lt;/a&gt; - an agent in the cluster continuously polls the desired state from a remote Git repository, and applies the changes in the cluster. &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/%5D&#34;&gt;Argo CD&lt;/a&gt; and &lt;a href=&#34;https://fluxcd.io/docs/&#34;&gt;Flux&lt;/a&gt; are two popular GitOps tools that employs this pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For this article, I will be using Argo CD, mainly for its explicit support for the &lt;a href=&#34;#the-one-app-to-rule-them-all&#34;&gt;App of Apps pattern&lt;/a&gt; which I will cover in a section further down.&lt;/p&gt;
&lt;h2 id=&#34;argo-cd-applications&#34;&gt;Argo CD Applications&lt;/h2&gt;
&lt;p&gt;In Argo CD, a Kubernetes application are defined via an &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#applications&#34;&gt;&lt;code&gt;Application&lt;/code&gt; custom resource (CR)&lt;/a&gt;. An &lt;code&gt;Application&lt;/code&gt; CR provides Argo CD with the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;source&lt;/strong&gt;: the Git repository, revision and path to where the collection of Kubernetes resource manifests are stored&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destination&lt;/strong&gt;: the target cluster (Argo CD supports multi-cluster GitOps) and namespace to apply/deploy Kubernetes resource manifests in&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An &lt;code&gt;Application&lt;/code&gt; CR can be as simple as this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: guestbook
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://github.com/argoproj/argocd-example-apps.git
    targetRevision: HEAD
    path: guestbook
  destination:
    server: https://kubernetes.default.svc
    namespace: guestbook
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The diagram below shows how an application is deployed with Argo CD:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/argocd-basic.png&#34; alt=&#34;Basic Argo CD workflow&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User creates/modifies and uploads Kubernetes resource manifests (e.g. Deployment, ConfigMap, Service etc) for an application into a Git repository.&lt;/li&gt;
&lt;li&gt;(&lt;strong&gt;manual step in cluster&lt;/strong&gt;) User deploys an &lt;code&gt;Application&lt;/code&gt; CR.&lt;/li&gt;
&lt;li&gt;Argo CD inspects &lt;code&gt;Application&lt;/code&gt; CR to discover the Git repository.&lt;/li&gt;
&lt;li&gt;Argo CD pulls the Kubernetes resource manifests from the Git repository.&lt;/li&gt;
&lt;li&gt;Argo CD applies/deploys the Kubernetes resource manifests into the target cluster and namespace per the &lt;code&gt;Application&lt;/code&gt; CR.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And just like that, our application deployment has been turned into code. Pretty cool! But we can do better&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;the-one-app-to-rule-them-all&#34;&gt;The One App To Rule Them All&lt;/h2&gt;
&lt;p&gt;The previous workflow still involves a manual step on the cluster - creating the &lt;code&gt;Application&lt;/code&gt; CR in the cluster. If the user forgets or makes a mistake, the state of the cluster will not reflect the desired state defined in the Git repository. In order to deal with such scenarios, let&amp;rsquo;s turn to the &lt;a href=&#34;https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/#app-of-apps-pattern&#34;&gt;App of Apps pattern&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remember that an &lt;code&gt;Application&lt;/code&gt; CR just points the agent to where the Kubernetes resource manifests are, there&amp;rsquo;s no limitation on what kind of resources it supports. Naturally, this can be extended to other &lt;code&gt;Application&lt;/code&gt; CRs! Here&amp;rsquo;s how it works:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/argocd-app-of-apps.png&#34; alt=&#34;Argo CD app of apps workflow&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with the &lt;!-- raw HTML omitted --&gt;&lt;strong&gt;red&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt; flow that shows the bootstrapping:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User creates a bootstrap Git repository to store &lt;code&gt;Application&lt;/code&gt; CRs for the actual applications we want to deploy.&lt;/li&gt;
&lt;li&gt;User deploys a bootstrap &lt;code&gt;Application&lt;/code&gt; CR on the cluster.&lt;/li&gt;
&lt;li&gt;Argo CD inspects the bootstrap &lt;code&gt;Application&lt;/code&gt; CR to discover the bootstrap Git repository.&lt;/li&gt;
&lt;li&gt;Argo CD agent starts monitoring the Git repository for new &lt;code&gt;Application&lt;/code&gt; CRs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the cluster has been bootstrapped (which only has to be done once when the cluster is being set up), let&amp;rsquo;s go through the &lt;!-- raw HTML omitted --&gt;&lt;strong&gt;green&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt; flow to see how applications are deployed/modified:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User creates/modifies and uploads Kubernetes resource manifests (e.g. Deployment, ConfigMap, Service etc) for an application into an application Git repository.&lt;/li&gt;
&lt;li&gt;User creates/modifies and uploads an &lt;code&gt;Application&lt;/code&gt; CR for the above application into the bootstrap Git repository.&lt;/li&gt;
&lt;li&gt;Argo CD discovers new &lt;code&gt;Application&lt;/code&gt; CR in the bootstrap Git repository.&lt;/li&gt;
&lt;li&gt;Argo CD deploys the &lt;code&gt;Application&lt;/code&gt; CR in the cluster, and from it, discover the application Git repository.&lt;/li&gt;
&lt;li&gt;Argo CD pulls the Kubernetes resource manifests from the application Git repository&lt;/li&gt;
&lt;li&gt;Argo CD applies the Kubernetes resource manifests into the target cluster and namespace per the &lt;code&gt;Application&lt;/code&gt; CR.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using the App of Apps pattern means we only have to maintain the desired state of our applications through Git, and Argo CD would automatically apply the desired state in the cluster.&lt;/p&gt;
&lt;p&gt;Phew&amp;hellip; that was a lot to take in 😅. Hopefully we are now in the right head space to move on to the next section where we automate the bootstrapping via Terraform.&lt;/p&gt;
&lt;h2 id=&#34;terraforming-gitops&#34;&gt;Terraforming GitOps&lt;/h2&gt;
&lt;p&gt;To integrate this GitOps workflow and the App of Apps pattern with the &lt;a href=&#34;#infrastructure-as-code-with-terraform&#34;&gt;IaC&lt;/a&gt; definitions, we use Terraform to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install Argo CD in the cluster&lt;/p&gt;
&lt;p&gt;I found two Terraform providers which can manage Kubernetes resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/kubernetes/latest&#34;&gt;kubernetes&lt;/a&gt; - officially supported by HashiCorp, but requires Kubernetes resources to be defined in the Terraform&amp;rsquo;s syntax HCL instead of YAML. It also does not support defining a CRD and any corresponding CRs within the same Terraform project, as the CRD won&amp;rsquo;t exist when Terraform is processing the CRs in the planning stage.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/gavinbunney/kubectl/latest&#34;&gt;kubectl&lt;/a&gt; - allows you to work in YAML and supports overwriting namespaces in the manifest. However, when performing &lt;code&gt;terraform destroy&lt;/code&gt;, it does not seem to wait for resources to be fully deleted before marking them as destroyed (see &lt;a href=&#34;https://github.com/gavinbunney/terraform-provider-kubectl/issues/109&#34;&gt;issue&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Neither of them are perfect, but I&amp;rsquo;m inclined to use the &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/kubernetes/latest&#34;&gt;kubernetes&lt;/a&gt; provider for the official support, and deviate when it doesn&amp;rsquo;t work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bootstrap the cluster with an &lt;code&gt;Application&lt;/code&gt; CR to utilize the App of Apps pattern.&lt;/p&gt;
&lt;p&gt;As explained earlier, this &lt;code&gt;Application&lt;/code&gt; CR (see &lt;a href=&#34;https://github.com/leonseng/terraform-everything/blob/master/eks-gitops/bootstrap-app.yaml.tpl&#34;&gt;manifest&lt;/a&gt;) is responsible for defining the deployment of all other applications that we actually want running in our cluster. It simply points to a repository that looks something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/leonseng/terraform-everything/tree/master/eks-gitops/demo/argocd-apps&#34;&gt;https://github.com/leonseng/terraform-everything/tree/master/eks-gitops/demo/argocd-apps&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;where there are two applications to be deployed - &lt;a href=&#34;https://github.com/leonseng/terraform-everything/tree/master/eks-gitops/demo/httpbin&#34;&gt;httpbin&lt;/a&gt; and &lt;a href=&#34;https://github.com/leonseng/terraform-everything/tree/master/eks-gitops/demo/nginx&#34;&gt;nginx&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The full Terraform file can be seen here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/leonseng/terraform-everything/blob/master/eks-gitops/argocd.tf&#34;&gt;https://github.com/leonseng/terraform-everything/blob/master/eks-gitops/argocd.tf&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;finale&#34;&gt;Finale&lt;/h1&gt;
&lt;p&gt;With the Terraform files and application manifests in their respective Git repositories, we can kick off the deployment with the Terraform commands&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;terraform init
terraform apply -auto-approve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And at the end of the day, shutting it down is as easy as running&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;terraform destroy -auto-approve
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Is it perfect? No. I need to be conscious of storing my application manifests in Git, which will slow me down. And occasionally, the destroy process fails due to some orphaned cloud resources (work in progress). But what I have now is an on/off button for my Kubernetes lab in the cloud, which should keep the IT department of my back 😁.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Kubernetes | SQL Server on Kubernetes - Part 2</title>
      <link>/posts/kubernetes/sql-server-kubernetes-2/</link>
      <pubDate>Wed, 01 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/kubernetes/sql-server-kubernetes-2/</guid>
      <description>Intro So in my last post I showed how you could create databases on Kubernetes. There are many reasons to do this. Equally, there are reasons not to do this, but for highly distributed deployments it does make sense.
This post is going to focus on the storage components of running a database on Kubernetes.
Why do I need persistent storage Persistent storage as the name implies allows you to store your data between container restarts.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;So in my last &lt;a href=&#34;https://codecowboy.io/kubernetes/sql-server-kubernetes/&#34;&gt;post&lt;/a&gt; I showed how you could create databases on Kubernetes. There are many reasons to do this. Equally, there are reasons not to do this, but for highly distributed deployments it does make sense.&lt;/p&gt;
&lt;p&gt;This post is going to focus on the storage components of running a database on Kubernetes.&lt;/p&gt;
&lt;h2 id=&#34;why-do-i-need-persistent-storage&#34;&gt;Why do I need persistent storage&lt;/h2&gt;
&lt;p&gt;Persistent storage as the name implies allows you to store your data between container restarts. This is important where data is stored in a database. You actually want your data to be persisted.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-do-this-in-kubernetes&#34;&gt;How do I do this in kubernetes?&lt;/h2&gt;
&lt;p&gt;Kubernetes has two concepts that allow you to persist data that we are going to use. The first is a persistent volume claim, the second is a persistent volume mount&lt;/p&gt;
&lt;h2 id=&#34;persistent-volume-claim&#34;&gt;Persistent Volume Claim&lt;/h2&gt;
&lt;p&gt;In Kubernetes a persistent volume claim is a way of &amp;ldquo;grabbing some storage&amp;rdquo; if you&amp;rsquo;re a user. The Kubernetes documentation describes this much more eloquently as &amp;ldquo;a request for storage from a user&amp;rdquo; and &amp;ldquo;the persistent volume API abstracts the details of storage from the user&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;This is documented &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In order to create a persistent volume claim, you can use a manifest like the one below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Yaml&#34; data-lang=&#34;Yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-data&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;accessModes&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;resources&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;requests&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;storage&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;100Mi&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;volumeMode&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Filesystem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will request 100M as a filesystem mount with a Read and Write access mode, within the namespace mssql.&lt;/p&gt;
&lt;p&gt;Once I have a claim, I can create a pod that utilises the claim, and mounts a filesystem.&lt;/p&gt;
&lt;h2 id=&#34;persistent-storage-volumes&#34;&gt;Persistent Storage Volumes&lt;/h2&gt;
&lt;p&gt;Pods can use a claim as a volume. In order to do this, the following is added to the Deployment definition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Yaml&#34; data-lang=&#34;Yaml&#34;&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssqldb&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/opt/mssql&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssqldb&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolumeClaim&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;claimName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This mounts the volume by mapping to a claim name.&lt;/p&gt;
&lt;p&gt;Note that the claim name is the same as our claim name in our PersistentVolumeClaim definition above. This essentially makes the &amp;ldquo;raw disk&amp;rdquo; available to the pod.&lt;/p&gt;
&lt;p&gt;The volume mount, mounts the volume as a filesystem within the container or pod. The reason that I can do this is that the volume mode in my PersistentVolumeClaim is set to Filesystem. This allows the volume to be mounted as a filesystem within the container / pod.&lt;/p&gt;
&lt;p&gt;The full definition is below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Yaml&#34; data-lang=&#34;Yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-a&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-a&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;strategy&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Recreate&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-a&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;terminationGracePeriodSeconds&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;securityContext&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;fsGroup&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mcr.microsoft.com/mssql/rhel/server:2019-latest&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1433&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-port&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MSSQL_PID&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Developer&amp;#34;&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ACCEPT_EULA&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MSSQL_SA_PASSWORD&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;SA_PASSWORD&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;volumeMounts&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssqldb&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;mountPath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/var/opt/mssql&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssqldb&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;persistentVolumeClaim&lt;/span&gt;:
          &lt;span style=&#34;color:#f92672&#34;&gt;claimName&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;inside-the-container&#34;&gt;Inside the container&lt;/h2&gt;
&lt;p&gt;Inside the container I see the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora mssql&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl exec -it mssql-a-59b4fbc56d-68rzj -n mssql /bin/bash&lt;/span&gt;

bash-4.4$
bash-4.4$ df -h
Filesystem      Size  Used Avail Use% Mounted on
overlay          80G  4.3G   76G   6% /
tmpfs            64M     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   64M   0% /dev
tmpfs           7.9G     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  7.9G   0% /sys/fs/cgroup
/dev/xvda1       80G  4.3G   76G   6% /etc/hosts
shm              64M     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;   64M   0% /dev/shm

/dev/xvdca      976M  112M  849M  12% /var/opt/mssql

tmpfs           7.9G   12K  7.9G   1% /run/secrets/kubernetes.io/serviceaccount
tmpfs           7.9G     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  7.9G   0% /proc/acpi
tmpfs           7.9G     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  7.9G   0% /proc/scsi
tmpfs           7.9G     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  7.9G   0% /sys/firmware

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see that the /var/opt/mssql filesystem is a filesystem that I can put data into.
In my case, this is the default data directory for my SQL Server database.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-check-this&#34;&gt;How do I check this?&lt;/h2&gt;
&lt;p&gt;If you want to check a persistent volume claim use the following commands.
&lt;em&gt;kubectl get pvc&lt;/em&gt; will show the current persistent volume claims and their status.&lt;/p&gt;
&lt;p&gt;For each persistent volume, you should be able to see the mode, capacity, storageclass and so on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora mssql&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl get pvc -n mssql&lt;/span&gt;
NAME         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
mssql-data   Bound    pvc-5cd23b78-9feb-4db0-b2b0-dca7f6b56371   1Gi        RWO            gp2            33h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Further information can be gained by using the describe key word.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora mssql&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl describe  pvc -n mssql&lt;/span&gt;
Name:          mssql-data
Namespace:     mssql
StorageClass:  gp2
Status:        Bound
Volume:        pvc-5cd23b78-9feb-4db0-b2b0-dca7f6b56371
Labels:        &amp;lt;none&amp;gt;
Annotations:   pv.kubernetes.io/bind-completed: yes
               pv.kubernetes.io/bound-by-controller: yes
               volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/aws-ebs
               volume.kubernetes.io/selected-node: ip-192-168-44-199.ap-southeast-2.compute.internal
Finalizers:    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kubernetes.io/pvc-protection&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Capacity:      1Gi
Access Modes:  RWO
VolumeMode:    Filesystem
Used By:       mssql-a-59b4fbc56d-68rzj
Events:        &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In order to see the actual volumes you can use the following commands.&lt;/p&gt;
&lt;p&gt;This shows the volume, it&amp;rsquo;s status and storage class, as well as the associated volume claim, including the namespace that the volume claim lives in.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora mssql&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl get pv&lt;/span&gt;
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM              STORAGECLASS   REASON   AGE
pvc-5cd23b78-9feb-4db0-b2b0-dca7f6b56371   1Gi        RWO            Delete           Bound    mssql/mssql-data   gp2                     33h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similarly, when I perform a describe against the volume, we can see that this is running in AWS, we can see the type of storage and so on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora mssql&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# kubectl describe pv&lt;/span&gt;
Name:              pvc-5cd23b78-9feb-4db0-b2b0-dca7f6b56371
Labels:            failure-domain.beta.kubernetes.io/region&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ap-southeast-2
                   failure-domain.beta.kubernetes.io/zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ap-southeast-2c
Annotations:       kubernetes.io/createdby: aws-ebs-dynamic-provisioner
                   pv.kubernetes.io/bound-by-controller: yes
                   pv.kubernetes.io/provisioned-by: kubernetes.io/aws-ebs
Finalizers:        &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;kubernetes.io/pv-protection&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
StorageClass:      gp2
Status:            Bound
Claim:             mssql/mssql-data
Reclaim Policy:    Delete
Access Modes:      RWO
VolumeMode:        Filesystem
Capacity:          1Gi
Node Affinity:
  Required Terms:
    Term 0:        failure-domain.beta.kubernetes.io/zone in &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ap-southeast-2c&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
                   failure-domain.beta.kubernetes.io/region in &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ap-southeast-2&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
Message:
Source:
    Type:       AWSElasticBlockStore &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;a Persistent Disk resource in AWS&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    VolumeID:   aws://ap-southeast-2c/vol-087cd704ef36ad587
    FSType:     ext4
    Partition:  &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    ReadOnly:   false
Events:         &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;what-if-the-pod-restarts&#34;&gt;What if the pod restarts?&lt;/h2&gt;
&lt;p&gt;If the pod restarts, the newly scheduled pod will use the existing PVC and your data will still be there!&lt;/p&gt;
&lt;p&gt;This may cause transaction problems in your database, but for the most part the data will still be there.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Persistent volumes are cool, and they make your life running databases, but really persisting any storage on Kubernetes easier.&lt;/p&gt;
&lt;p&gt;I hope you had fun reading, look out for more topics soon!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Learning Istio | JWT Auth</title>
      <link>/posts/learning-istio/jwt-auth/</link>
      <pubDate>Sat, 06 Nov 2021 21:32:16 +1100</pubDate>
      
      <guid>/posts/learning-istio/jwt-auth/</guid>
      <description>In this post, we will be looking at how Istio handles end user authentication/authorization based on JSON Web Tokens (JWT). JWT is commonly used in OAuth2.0 flows to specify the resources a client has access to, but there are a couple of things to verify before the client is given access:
 Is the JWT issued by the right party Is the client who they claim to be  The logic for the checks above are usually coded into the application.</description>
      <content>&lt;p&gt;In this post, we will be looking at how Istio handles end user authentication/authorization based on JSON Web Tokens (JWT). JWT is commonly used in OAuth2.0 flows to specify the resources a client has access to, but there are a couple of things to verify before the client is given access:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Is the JWT issued by the right party&lt;/li&gt;
&lt;li&gt;Is the client who they claim to be&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The logic for the checks above are usually coded into the application.&lt;/p&gt;
&lt;p&gt;Alternatively, as we will discover in this post, we can simplify the application by offloading this to Istio using the &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/request_authentication/&#34;&gt;RequestAuthentication&lt;/a&gt; and &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/&#34;&gt;AuthorizationPolicy&lt;/a&gt; resources.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;h2 id=&#34;test-application&#34;&gt;Test application&lt;/h2&gt;
&lt;p&gt;For the test application, I will be using the &lt;a href=&#34;https://hub.docker.com/r/kennethreitz/httpbin/&#34;&gt;httpbin&lt;/a&gt; image as it exposes a &lt;code&gt;/headers&lt;/code&gt; endpoint which prints out the headers as seen by the application, allowing us to see the changes done by the sidecar proxy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -f - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: apps/v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Deployment
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  replicas: 1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  template:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      containers:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - image: kennethreitz/httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        name: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;---
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Service
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  labels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  ports:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  - name: http  # this is important. See Additional Learnings below
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    port: 80
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    protocol: TCP
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    targetPort: 80
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;jwt-provider&#34;&gt;JWT provider&lt;/h2&gt;
&lt;p&gt;The JWT used in most of the examples in this post is obtained from Auth0 via the &lt;a href=&#34;https://auth0.com/docs/authorization/flows/call-your-api-using-the-client-credentials-flow&#34;&gt;client credentials flow&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Get access token&lt;/span&gt;
$ BASE_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://leonseng.au.auth0.com
$ APP_CLIENT_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;Auth0 app client ID&amp;gt;
$ APP_CLIENT_SECRET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;Auth0 app client secret&amp;gt;
$ API_IDENTIFIER&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;Auth0 API identifier&amp;gt;
$ ACCESS_TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s --request POST &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --url &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$BASE_URL&lt;span style=&#34;color:#e6db74&#34;&gt;/oauth/token&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content-type: application/x-www-form-urlencoded&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --data grant_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;client_credentials &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --data client_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$APP_CLIENT_ID &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --data client_secret&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$APP_CLIENT_SECRET &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --data audience&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$API_IDENTIFIER | jq -r .access_token&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Check content of JWT&lt;/span&gt;
$ jq -R &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;split(&amp;#34;.&amp;#34;) | .[0],.[1] | @base64d | fromjson&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $ACCESS_TOKEN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alg&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RS256&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;typ&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JWT&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qv9xb5h9OYy-uJgVyDEyx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://leonseng.au.auth0.com/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QWPjwvmVTLVJiQejcPJim0CKR3pxtgd3@clients&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-jwt-test&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;: 1636331240,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;: 1636331300,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QWPjwvmVTLVJiQejcPJim0CKR3pxtgd3&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read:database write:database&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gty&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client-credentials&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;requestauthentication&#34;&gt;RequestAuthentication&lt;/h1&gt;
&lt;p&gt;Istio&amp;rsquo;s &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/request_authentication/&#34;&gt;RequestAuthentication&lt;/a&gt; is responsible for validating the JWT in a request is signed by the expected issuer, and that the payload has not been tampered with.&lt;/p&gt;
&lt;p&gt;Below is an example where we specify the JWT issuer and the JSON Web Key Set (JWKS) for JWT validation. The decoded JWT payload can be passed onto the application in a HTTP header via the &lt;code&gt;outputPayloadToHeader&lt;/code&gt; field, allowing application to access the trusted claim without having to perform token validation itself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -f - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: RequestAuthentication
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: &amp;#34;httpbin-jwt-req-auth&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  jwtRules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  - issuer: &amp;#34;https://leonseng.au.auth0.com/&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    jwksUri: &amp;#34;https://leonseng.au.auth0.com/.well-known/jwks.json&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    outputPayloadToHeader: x-jwt-payload
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s a test to show that our request with the right JWT can go through&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ RESPONSE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;curl -s -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;$ACCESS_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; httpbin/headers&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
$ echo $RESPONSE | jq .
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accept&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*/*&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;httpbin&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User-Agent&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;curl/7.79.1-DEV&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Parentspanid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;40f941f2847fb38d&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Sampled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Spanid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7c93024a6eb09cf5&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Traceid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;38ab74cb85a129d240f941f2847fb38d&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Envoy-Attempt-Count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Forwarded-Client-Cert&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;By=spiffe://cluster.local/ns/default/sa/default;Hash=dc1fd96b48b91947ef1bfeeb6a9755164343eb982eeb2d29373e3521a90350dc;Subject=\&amp;#34;\&amp;#34;;URI=spiffe://cluster.local/ns/default/sa/default&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Jwt-Payload&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyJpc3MiOiJodHRwczovL2xlb25zZW5nLmF1LmF1dGgwLmNvbS8iLCJzdWIiOiJRV1Bqd3ZtVlRMVkppUWVqY1BKaW0wQ0tSM3B4dGdkM0BjbGllbnRzIiwiYXVkIjoiaXN0aW8tand0LXRlc3QiLCJpYXQiOjE2MzY0MjkwODUsImV4cCI6MTYzNjUxNTQ4NSwiYXpwIjoiUVdQand2bVZUTFZKaVFlamNQSmltMENLUjNweHRnZDMiLCJzY29wZSI6InJlYWQ6ZGF0YWJhc2Ugd3JpdGU6ZGF0YWJhc2UiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see that the decoded payload is accessible by the application in the &lt;code&gt;X-Jwt-Payload&lt;/code&gt; header after performing a base64 decode&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ FORWARDED_PAYLOAD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $RESPONSE | jq -r &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.headers.&amp;#34;X-Jwt-Payload&amp;#34;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
$ echo $FORWARDED_PAYLOAD | base64 -d | jq .
base64: invalid input
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://leonseng.au.auth0.com/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QWPjwvmVTLVJiQejcPJim0CKR3pxtgd3@clients&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-jwt-test&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;: 1636429085,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;: 1636515485,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;QWPjwvmVTLVJiQejcPJim0CKR3pxtgd3&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read:database write:database&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gty&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client-credentials&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Malformed, expired and JWT issued by other issuers will be rejected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Malformed token&lt;/span&gt;
$ curl -s -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer bad&amp;#34;&lt;/span&gt; httpbin/headers
Jwt is not in the form of Header.Payload.Signature with two dots and &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; sections

&lt;span style=&#34;color:#75715e&#34;&gt;# Expired token&lt;/span&gt;
$ curl -s -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;$ACCESS_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; httpbin/headers
Jwt is expired

&lt;span style=&#34;color:#75715e&#34;&gt;# Valid JWT from another issuer - jwt.io&lt;/span&gt;
INVALID_TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ
$ curl -s -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;$INVALID_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; httpbin/headers
Jwks doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t have key to match kid or alg from Jwt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Requests without JWT is expected to fail, but &lt;strong&gt;it didn&amp;rsquo;t&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ curl -s httpbin/headers
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accept&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*/*&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;httpbin&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User-Agent&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;curl/7.79.1-DEV&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Parentspanid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;de8e7a515c92e784&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Sampled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Spanid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a2994910ea2fd7f2&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Traceid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;11f49e2d3230c711de8e7a515c92e784&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Envoy-Attempt-Count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Forwarded-Client-Cert&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;By=spiffe://cluster.local/ns/default/sa/default;Hash=b01278f0dac370955d49f07b1484118c6581fea591a3843d5ccd341ef7b872e6;Subject=\&amp;#34;\&amp;#34;;URI=spiffe://cluster.local/ns/default/sa/default&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This was unexpected to me, but it is a &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/request_authentication/&#34;&gt;documented behaviour&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A request that does not contain any authentication credentials will be accepted but will not have any authenticated identity. To restrict access to authenticated requests only, this should be accompanied by an authorization rule.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&#34;authorizationpolicy&#34;&gt;AuthorizationPolicy&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/&#34;&gt;AuthorizationPolicy&lt;/a&gt; further extends RBAC through the configuration of more granular rules, covering:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#who-is-the-requester&#34;&gt;who is the requester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-is-the-requester-trying-to-do&#34;&gt;what the requester is trying to do&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#additional-conditions-in-the-jwt&#34;&gt;additional conditions in the JWT&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below is an example which we will be using&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl apply -f - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: security.istio.io/v1beta1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: AuthorizationPolicy
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: httpbin-authz-policy
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  selector:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    matchLabels:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      app: httpbin
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  - from:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    - source:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        requestPrincipals: [&amp;#34;https://leonseng.au.auth0.com//QWPjwvmVTLVJiQejcPJim0CKR3pxtgd3@clients&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    to:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    - operation:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        methods: [&amp;#34;GET&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        paths: [&amp;#34;/headers&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    when:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    - key: request.auth.claims[aud]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      values: [&amp;#34;httpbin&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    - key: request.auth.claims[scope]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      values: [&amp;#34;write:database, fetch:email&amp;#34;]
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A quick test to verify that it hasn&amp;rsquo;t broken our setup&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ curl -s -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;$ACCESS_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; httpbin/headers
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;headers&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Accept&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*/*&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Length&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;httpbin&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User-Agent&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;curl/7.79.1-DEV&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Parentspanid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;60c70087740ac4fa&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Sampled&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Spanid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a4f01ac9e90d5ac5&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-B3-Traceid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;afcacf8ed3355d7160c70087740ac4fa&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Envoy-Attempt-Count&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Forwarded-Client-Cert&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;By=spiffe://cluster.local/ns/default/sa/default;Hash=72d075873d9fb6b17553f5b428fac8ad0168162e917b74f44c42b7e145267507;Subject=\&amp;#34;\&amp;#34;;URI=spiffe://cluster.local/ns/default/sa/default&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Jwt-Payload&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;eyJpc3MiOiJodHRwczovL2xlb25zZW5nLmF1LmF1dGgwLmNvbS8iLCJzdWIiOiJRV1Bqd3ZtVlRMVkppUWVqY1BKaW0wQ0tSM3B4dGdkM0BjbGllbnRzIiwiYXVkIjoiaXN0aW8tand0LXRlc3QiLCJpYXQiOjE2MzYzNzUxNDMsImV4cCI6MTYzNjQ2MTU0MywiYXpwIjoiUVdQand2bVZUTFZKaVFlamNQSmltMENLUjNweHRnZDMiLCJzY29wZSI6InJlYWQ6ZGF0YWJhc2Ugd3JpdGU6ZGF0YWJhc2UiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;who-is-the-requester&#34;&gt;Who is the requester&lt;/h2&gt;
&lt;p&gt;The identity of the requester using JWT can be specified in the &lt;code&gt;requestPrincipals&lt;/code&gt; field as documented &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/#Source&#34;&gt;here&lt;/a&gt;. Istio constructs the identity from the JWT payload values in the format of &lt;code&gt;&amp;lt;iss&amp;gt;/&amp;lt;sub&amp;gt;&lt;/code&gt;. However, if you just want to enforce the presence of a valid JWT (regardless of the identity), &lt;code&gt;requestPrincipals&lt;/code&gt; can be set to &lt;code&gt;[*]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;from:
- source:
    requestPrincipals: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://leonseng.au.auth0.com//QWPjwvmVTLVJiQejcPJim0CKR3pxtgd3@clients&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# iss/sub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Requests without a JWT or with a different user/subject will be denied&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# No JWT provided&lt;/span&gt;
$ curl -s httpbin/headers
RBAC: access denied

&lt;span style=&#34;color:#75715e&#34;&gt;# JWT with different user/subject&lt;/span&gt;
$ jq -R &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;split(&amp;#34;.&amp;#34;) | .[0],.[1] | @base64d | fromjson&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $ACCESS_TOKEN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alg&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RS256&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;typ&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JWT&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qv9xb5h9OYy-uJgVyDEyx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://leonseng.au.auth0.com/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uoPlJVCJID9UxJS1jdOMPcr9Gmz2TGgP@clients&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-jwt-test&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;: 1636375387,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;: 1636461787,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uoPlJVCJID9UxJS1jdOMPcr9Gmz2TGgP&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read:database write:database&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gty&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client-credentials&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
$ curl -s -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;$ACCESS_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; httpbin/headers
RBAC: access denied
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;what-is-the-requester-trying-to-do&#34;&gt;What is the requester trying to do&lt;/h2&gt;
&lt;p&gt;Next, we can &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/#Operation&#34;&gt;restrict which HTTP verbs and path a requester has access to&lt;/a&gt;. In our example, we are only allowing &lt;code&gt;GET&lt;/code&gt; requests to &lt;code&gt;/headers&lt;/code&gt; path&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;to:
- operation:
    methods: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
    paths: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/headers&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Request using another HTTP verb and/or accessing another path will not be allowed&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# POST to /post&lt;/span&gt;
$ curl -s -X POST -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;$ACCESS_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; httpbin/post
RBAC: access denied
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;additional-conditions-in-the-jwt&#34;&gt;Additional conditions in the JWT&lt;/h2&gt;
&lt;p&gt;Lastly, Istio also enables the evaluation of additional &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/conditions/&#34;&gt;conditions against the JWT claims&lt;/a&gt;. The &lt;code&gt;AuthorizationPolicy&lt;/code&gt; applied is checking against the claims in the JWT payload&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;when:
- key: request.auth.claims&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;aud&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  values: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-jwt-test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
- key: request.auth.claims&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;scope&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  values: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;write:database&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, we send a request with the scope &lt;code&gt;read:database&lt;/code&gt;, which will be rejected as the &lt;code&gt;AuthorizationPolicy&lt;/code&gt; is expecting a &lt;code&gt;write:database&lt;/code&gt; scope&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ jq -R &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;split(&amp;#34;.&amp;#34;) | .[0],.[1] | @base64d | fromjson&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo $ACCESS_TOKEN&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;alg&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RS256&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;typ&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;JWT&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kid&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;qv9xb5h9OYy-uJgVyDEyx&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iss&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://leonseng.au.auth0.com/&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sub&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xYvKrg4QHLA5bsna0Hg1MYiD3itPY1gC@clients&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;aud&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;istio-jwt-test&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;iat&amp;#34;&lt;/span&gt;: 1636376574,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;exp&amp;#34;&lt;/span&gt;: 1636462974,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;azp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xYvKrg4QHLA5bsna0Hg1MYiD3itPY1gC&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;scope&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;read:database&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gty&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client-credentials&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
$ curl -s -X POST -H &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization: Bearer &lt;/span&gt;$ACCESS_TOKEN&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; httpbin/post
RBAC: access denied
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;additional-learnings&#34;&gt;Additional learnings&lt;/h1&gt;
&lt;p&gt;Here&amp;rsquo;s a list of things that were picked up during my tests that weren&amp;rsquo;t immediately intuitive:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Istio requires the port name in the &lt;code&gt;Service&lt;/code&gt; to be prefixed with the protocol as described &lt;a href=&#34;https://istio.io/latest/docs/ops/configuration/traffic-management/protocol-selection/&#34;&gt;here&lt;/a&gt;. Failing to adhere to the naming convention will break the authentication feature provided by the &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/request_authentication/&#34;&gt;RequestAuthentication&lt;/a&gt; resource. This can be caught by running &lt;code&gt;istioctl analyze&lt;/code&gt; in the application namespace, which reveals a &lt;a href=&#34;https://istio.io/latest/docs/reference/config/analysis/ist0118/&#34;&gt;PortNameIsNotUnderNamingConvention&lt;/a&gt; message:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ istioctl analyze
&amp;lt;snipped&amp;gt;
Info &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;IST0118&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Service httpbin.default&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; Port name &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;port: 80, targetPort: 80&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; doesn&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;t follow the naming convention of Istio port.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Defining a &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/request_authentication/&#34;&gt;RequestAuthentication&lt;/a&gt; alone does not stop requests without JWT, the requests just won&amp;rsquo;t have identities tied to them. Augment it with a &lt;a href=&#34;https://istio.io/latest/docs/reference/config/security/authorization-policy/&#34;&gt;AuthorizationPolicy&lt;/a&gt; to enforce the presence of JWT.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;scope&lt;/code&gt; field in a JWT can contain multiple scopes in a space delimited format,
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;scope: read:database write:database
&lt;/code&gt;&lt;/pre&gt;Fortunately, Istio recognizes that and separates the string into multiple scopes. This allows us to match individual scopes from the &lt;code&gt;scope&lt;/code&gt; field without having to do string manipulations.&lt;/li&gt;
&lt;li&gt;To assist with troubleshooting, set the log level for the &lt;code&gt;jwt&lt;/code&gt; and &lt;code&gt;rbac&lt;/code&gt; loggers to &lt;code&gt;debug&lt;/code&gt;, which will produce more logs on JWT validation and RBAC enforcement in the application sidecar proxy.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;istioctl proxy-config log &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;k get pods -l app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;httpbin -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{.items[*].metadata.name}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; --level jwt:debug rbac:debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>Kubernetes | SQL Server on Kubernetes - Part 1</title>
      <link>/posts/kubernetes/sql-server-kubernetes/</link>
      <pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/kubernetes/sql-server-kubernetes/</guid>
      <description>Intro Recently, I&amp;rsquo;ve been working with a customer who wants to provide databases on their Kubernetes cluster. Ever since Microsoft&amp;rsquo;s SQL Server was released on Linux some years ago, I&amp;rsquo;ve been fascinated with it. I decided to give it a go recently on Kubernetes, and get it all working.
This is part one, where I deploy SQL server without persistent storage. In part two, I will discuss using persistent storage.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;Recently, I&amp;rsquo;ve been working with a customer who wants to provide databases on their Kubernetes cluster.
Ever since Microsoft&amp;rsquo;s SQL Server was released on Linux some years ago, I&amp;rsquo;ve been fascinated with it.
I decided to give it a go recently on Kubernetes, and get it all working.&lt;/p&gt;
&lt;p&gt;This is part one, where I deploy SQL server without persistent storage.
In part two, I will discuss using persistent storage.&lt;/p&gt;
&lt;h2 id=&#34;why-databases&#34;&gt;Why databases?&lt;/h2&gt;
&lt;p&gt;There is a lot of debate about whether or not you &lt;em&gt;should&lt;/em&gt; run databases on kubernetes or not. If you&amp;rsquo;re operating in a public cloud environment, this is much more clear cut to my mind than if you&amp;rsquo;re not. If you are, then it may be better to use a service from a cloud provider where infrastructure is taken care of for you. It&amp;rsquo;s just easier.&lt;/p&gt;
&lt;p&gt;If you are not operating in a public cloud environment, then running on kubernetes gives you the resilience and abstraction from infrastructure that is as close as you can get to running in a public cloud. This is very useful in disconnected environments and environments where you cannot access public cloud (yes they do exist).&lt;/p&gt;
&lt;p&gt;Suffice to say, there are reasons that you may want to do this.&lt;/p&gt;
&lt;h2 id=&#34;why-sql-server&#34;&gt;Why SQL server?&lt;/h2&gt;
&lt;p&gt;SQL server is ubiquitous. It is the database that a lot of applications use. As applications get either refactored or shifted to kubernetes, it is reasonable to assume that there will be instances where running a SQL server database on kubernetes is needed.&lt;/p&gt;
&lt;h2 id=&#34;secret&#34;&gt;Secret&lt;/h2&gt;
&lt;p&gt;In order to get the database up and running, you will need to have a secret.
This is the initial SA password that is used for the database.
The easiest way to do this is to create an opaque secret.&lt;/p&gt;
&lt;p&gt;The command below creates an opaque secret with a password that is complex enough to start the database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;kubectl create secret generic mssql --from-literal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SA_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MyC0m9l&amp;amp;xP@ssw0rd&amp;#34;&lt;/span&gt; --namespace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mssql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;manifests&#34;&gt;Manifests&lt;/h2&gt;
&lt;p&gt;The manifests for deploying SQL server are relatively simple.
The pages &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-overview?view=sql-server-ver15&#34;&gt;here&lt;/a&gt; give a really good overview of the general installation and command line options available for SQL Server on linux. These can be converted to manifest files.&lt;/p&gt;
&lt;h3 id=&#34;namespace&#34;&gt;Namespace&lt;/h3&gt;
&lt;p&gt;First we create a namespace. Technically, you don&amp;rsquo;t need to do this and can run everything in the default namespace, but for neatness sake, I always think it&amp;rsquo;s worth creating a separate namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Yaml&#34; data-lang=&#34;Yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Namespace&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;pods&#34;&gt;Pods&lt;/h3&gt;
&lt;p&gt;Create a deployment for SQL server. I am creating a deployment rather than a statefulset for demonstration purposes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Yaml&#34; data-lang=&#34;Yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;apps/v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deployment&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-a&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;replicas&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;matchLabels&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-a&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;strategy&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;type&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Recreate&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;template&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-a&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;terminationGracePeriodSeconds&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;securityContext&lt;/span&gt;:
        &lt;span style=&#34;color:#f92672&#34;&gt;fsGroup&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;containers&lt;/span&gt;:
      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mcr.microsoft.com/mssql/rhel/server:2019-latest&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;containerPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1433&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-port&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MSSQL_PID&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Developer&amp;#34;&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ACCEPT_EULA&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;value&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Y&amp;#34;&lt;/span&gt;
        - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;MSSQL_SA_PASSWORD&lt;/span&gt;
          &lt;span style=&#34;color:#f92672&#34;&gt;valueFrom&lt;/span&gt;:
            &lt;span style=&#34;color:#f92672&#34;&gt;secretKeyRef&lt;/span&gt;:
              &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
              &lt;span style=&#34;color:#f92672&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;SA_PASSWORD&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;environment-variables&#34;&gt;Environment variables&lt;/h4&gt;
&lt;p&gt;The environment variables that can be used to configure MSSQL server are listed &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-configure-environment-variables?view=sql-server-ver15&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the manifest above, I am using three variables.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSSQL_PID: The SQL Server edition or product key. In my case, &amp;ldquo;developer edition&amp;rdquo;&lt;/li&gt;
&lt;li&gt;ACCEPT_EULA: Accept the End User License Agreement&lt;/li&gt;
&lt;li&gt;MSSQL_SA_PASSWORD: The SA password for the database. In my case, this refers to the secret that I created earlier&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;service&#34;&gt;Service&lt;/h3&gt;
&lt;p&gt;Create a service that can be used to expose the pods that we created above. The service is named &lt;strong&gt;mssql-a&lt;/strong&gt; purely because I may have more than one database that i want to expose.&lt;/p&gt;
&lt;p&gt;This service exposes the database pods on port 1433, the default SQL server port.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Yaml&#34; data-lang=&#34;Yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;v1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Service&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;metadata&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-a&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;namespace&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;selector&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;app&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mssql-a&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
    - &lt;span style=&#34;color:#f92672&#34;&gt;protocol&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;TCP&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1433&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;targetPort&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1433&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;persistent-storage&#34;&gt;Persistent Storage&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;ll cover this piece in a second blog post, because it deserves its own topic entirely.&lt;/p&gt;
&lt;p&gt;The database manifest works but will store data locally only. This means that it is only useful for development purposes. If the pod is restarted for any reason, data will be lost.&lt;/p&gt;
&lt;h2 id=&#34;client-side-tools&#34;&gt;Client side tools&lt;/h2&gt;
&lt;p&gt;Install client side tools to connect to the database.&lt;/p&gt;
&lt;p&gt;There is a really good document &lt;a href=&#34;https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-red-hat?view=sql-server-ver15&#34;&gt;here&lt;/a&gt; that describes how to install the client side utilities in order to connect to your database.&lt;/p&gt;
&lt;p&gt;I use fedora, so am using the instructions for RHEL8 (close enough)&lt;/p&gt;
&lt;p&gt;Use curl to install the microsoft repository on your system.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;sudo curl -o /etc/yum.repos.d/msprod.repo https://packages.microsoft.com/config/rhel/8/prod.repo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the client side tooling and the unix ODBC client&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;sudo yum install -y mssql-tools unixODBC-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add the SQL tools to your default path and load the path into the current environment.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;export PATH=&amp;#34;$PATH:/opt/mssql-tools/bin&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bash_profile
echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;export PATH=&amp;#34;$PATH:/opt/mssql-tools/bin&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Test your database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;sqlcmd -S localhost -U SA -P &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;YourPassword&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;port-forward-from-local-machine-to-database&#34;&gt;Port forward from local machine to database&lt;/h2&gt;
&lt;p&gt;As I have not created any ingress for my database, the easiest way for me to get connectivity is to port forward directly to it.
I can use the command below to port forward from my local workstation to my database.&lt;/p&gt;
&lt;p&gt;First I need to get the pod name of my database in order to port forward to it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;kubectl get pods -n mssql

NAME                       READY   STATUS    RESTARTS   AGE
mssql-a-8469f884f7-rrbx9   1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          18m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can then use the port-forward command to forward a local port to the pod port so that I can perform some testing and check that my database actually works.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;kubectl port-forward mssql-a-&amp;lt;pod&amp;gt; 1433:1433 -n mssql --address 0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;database-connect-and-test&#34;&gt;Database connect and test&lt;/h2&gt;
&lt;p&gt;Once everything has been created on the kubernetes side of the house, we can connect to the database and see that it is available.&lt;/p&gt;
&lt;p&gt;I can connect to my database using the password I set originally. As I have port forwarded to my cluster, no ingress is needed. This is useful for testing.&lt;/p&gt;
&lt;p&gt;I create a database named &lt;strong&gt;foo&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# sqlcmd -S localhost -U SA -P &amp;#39;MyC0m9l&amp;amp;xP@ssw0rd&amp;#39;&lt;/span&gt;
1&amp;gt; create database foo
2&amp;gt; go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I select the names of all databases from the sys.Database table, I can see that the last entry is my database &lt;strong&gt;foo&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; name &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; sys.Databases
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;
name
&lt;span style=&#34;color:#75715e&#34;&gt;--------------------------------------------------------------------------------------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;master
tempdb
model
msdb
foo

(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rows&lt;/span&gt; affected)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I can switch to the &lt;strong&gt;foo&lt;/strong&gt; database and being to use it.
I create a table and insert a single line of data into my newly created database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; use foo
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;
Changed &lt;span style=&#34;color:#66d9ef&#34;&gt;database&lt;/span&gt; context &lt;span style=&#34;color:#66d9ef&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;.

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;table&lt;/span&gt; bar (id INT, name VARCHAR(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;))
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;

&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;insert&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;into&lt;/span&gt; bar &lt;span style=&#34;color:#66d9ef&#34;&gt;values&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;

(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;rows&lt;/span&gt; affected)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I select all of the data from my table &lt;strong&gt;bar&lt;/strong&gt; I can see the single line of data that I inserted above.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; bar
&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt;
id          name
&lt;span style=&#34;color:#75715e&#34;&gt;----------- --------------------------------------------------
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have a functional database that is running on kubernetes!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Running databases on kubernetes isn&amp;rsquo;t that difficult. There are reasons that you want to do this.
The difficult part about this is the ephemeral nature of pods on kubernetes and how to handle persistent storage with databases.
This is the topic of my next post, where I will show how to use persistent storage to make your databases on kubernetes more robust.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Learning Istio | Securing Egress Traffic With mTLS</title>
      <link>/posts/learning-istio/securing-egress-traffic-with-mtls/</link>
      <pubDate>Tue, 12 Oct 2021 15:59:45 +1100</pubDate>
      
      <guid>/posts/learning-istio/securing-egress-traffic-with-mtls/</guid>
      <description>There are times when applications deployed in Kubernetes need to communicate with external services that requires mTLS authentication, where the applications have to present client certificates signed by a common root/intermediate CA when accessing the service. This can lead to unpleasant scenarios where
 application owners have to keep track of certificates for each of their applications applications written in different language/libraries have different ways of implementing mTLS connections  As an application owner, I would prefer to just deal with plain ol&#39; HTTP on port 80, and not have to modify the application to handle HTTPS or mTLS.</description>
      <content>&lt;p&gt;There are times when applications deployed in Kubernetes need to communicate with external services that requires mTLS authentication, where the applications have to present client certificates signed by a common root/intermediate CA when accessing the service. This can lead to unpleasant scenarios where&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;application owners have to keep track of certificates for each of their applications&lt;/li&gt;
&lt;li&gt;applications written in different language/libraries have different ways of implementing mTLS connections&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As an application owner, I would prefer to just deal with plain ol&#39; HTTP on port &lt;code&gt;80&lt;/code&gt;, and not have to modify the application to handle HTTPS or mTLS. Fortunately, Istio has some in-built capabilities to alleviate the pain points. In this post, I will be covering two scenarios:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#common-ca&#34;&gt;Istio cluster has the same root CA as the external service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#different-ca&#34;&gt;Istio cluster has a different root CA from the external service&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;common-ca&#34;&gt;Common CA&lt;/h1&gt;
&lt;p&gt;Many enterprises have root CAs they use to sign and verify all internal services. To ensure compliance, a good practice is to create an intermediate CA from the root CA, and plug that into the cluster when deploying Istio, as detailed &lt;a href=&#34;https://istio.io/latest/docs/tasks/security/cert-management/plugin-ca-cert/&#34;&gt;here&lt;/a&gt;. For such scenarios, Istio supports &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/egress/egress-tls-origination/#tls-origination-for-egress-traffic&#34;&gt;TLS origination for egress traffic&lt;/a&gt;, and we can enable mTLS by setting the TLS mode in the &lt;code&gt;DestinationRule&lt;/code&gt; to &lt;code&gt;ISTIO_MUTUAL&lt;/code&gt; as documented &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/destination-rule/#ClientTLSSettings&#34;&gt;here&lt;/a&gt;. This tells the sidecar proxy to use a client certificate generated automatically by Istio (signed using the intermediate CA, hence the enterprise root CA) when calling the external service for mTLS authentication.&lt;/p&gt;
&lt;p&gt;To demonstrate this, I have deployed an external service &lt;code&gt;nginx-mtls.common-ca.local:8443&lt;/code&gt; using an NGINX container running on a remote host &lt;code&gt;10.1.1.4&lt;/code&gt;. mTLS authentication is enabled by configuring it to perform client SSL verification. The root CA specified for client SSL verification is also used to generated the server certificate for the NGINX server.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;See &lt;a href=&#34;https://github.com/leonseng/nginx-mtls&#34;&gt;leonseng/nginx-mtls&lt;/a&gt; for more information on the external service&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I deployed a &lt;code&gt;curl&lt;/code&gt; pod to mimic an application performing a &lt;code&gt;GET&lt;/code&gt; request to the external service:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: curl
  name: curl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: curl
  template:
    metadata:
      labels:
        app: curl
    spec:
      containers:
      - command:
        - tail
        args:
        - -f
        - /dev/null
        image: curlimages/curl
        name: curl
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As Istio&amp;rsquo;s &lt;code&gt;outboundTrafficPolicy&lt;/code&gt; is set to &lt;code&gt;REGISTRY_ONLY&lt;/code&gt;, a &lt;code&gt;ServiceEntry&lt;/code&gt; is required to allow any applications in the cluster to reach the external service &lt;code&gt;nginx-mtls.common-ca.local&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: nginx-mtls-common-ca
spec:
  hosts:
  - nginx-mtls.common-ca.local
  location: MESH_EXTERNAL
  ports:
  - number: 8443
    name: https
    protocol: HTTPS
  resolution: STATIC
  endpoints:
  - address: 10.1.1.4
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As it is, the application is expected to supply the client certificate for the mTLS connection. Attempting to call the external service without the client certificate would result in a failed request:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl exec curl-5fd94f6d69-526vq -c curl -- \
  curl -s --resolve nginx-mtls.common-ca.local:8443:10.1.1.4 \
  https://nginx-mtls.common-ca.local:8443
command terminated with exit code 35
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To enable mTLS, we need the following resources:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;DestinationRule&lt;/code&gt; to initiate the mTLS connection on port &lt;code&gt;80&lt;/code&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: nginx-mtls-common-ca
spec:
  host: nginx-mtls.common-ca.local
  trafficPolicy:
    portLevelSettings:
    - port:
        number: 80
      tls:
        mode: ISTIO_MUTUAL
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;ServiceEntry&lt;/code&gt; with a new port entry for the HTTP port &lt;code&gt;80&lt;/code&gt;, and a &lt;code&gt;targetPort&lt;/code&gt; attribute set to the HTTPS port &lt;code&gt;8443&lt;/code&gt;:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: nginx-mtls-common-ca
spec:
  hosts:
  - nginx-mtls.common-ca.local
  location: MESH_EXTERNAL
  ports:
  - number: 80
    name: http-port
    protocol: HTTP
    targetPort: 8443
  - number: 8443
    name: https
    protocol: TLS
  resolution: STATIC
  endpoints:
  - address: 10.1.1.4
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The application will now be able to target the HTTP endpoint, leaving it to Istio to set up the mTLS connection on its behalf towards the external service:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl exec curl-5fd94f6d69-526vq -c curl -- \
  curl -s --resolve nginx-mtls.common-ca.local:80:10.1.1.4 \
  http://nginx-mtls.common-ca.local \
  | grep title
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;different-ca&#34;&gt;Different CA&lt;/h1&gt;
&lt;p&gt;There are cases where Istio is deployed with a CA certificate issued by a root CA different from the one used by the external service for client verification, or if Istio generated its own self-signed certificate. For mTLS to work in such scenarios, we would have to obtain client certificates signed by the enterprise&amp;rsquo;s root CA, and configure Istio to use these client certificates when setting up the mTLS the connections.&lt;/p&gt;
&lt;p&gt;Istio provides at least two ways of handling the client certificates:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#common-client-certificate-for-all-applications&#34;&gt;Common client certificate for all applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unique-client-certificate-for-each-application&#34;&gt;Unique client certificate for each application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;common-client-certificate-for-all-applications&#34;&gt;Common client certificate for all applications&lt;/h2&gt;
&lt;p&gt;If the external service provider trusts the cluster, and thereby all applications hosted within the cluster, we would only need one client certificate and key pair for an egress gateway perform the mTLS connection on behalf of all applications within the cluster. This does require the deployment of an egress gateway (which is outside the scope of this post), and have all traffic to the external service routed via the egress gateway. Istio has a handy page on &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/egress/egress-gateway-tls-origination/#perform-mutual-tls-origination-with-an-egress-gateway&#34;&gt;Perform mutual TLS origination with an egress gateway&lt;/a&gt;, but there&amp;rsquo;s quite a bit to unpack there.&lt;/p&gt;
&lt;p&gt;For this example use case, I have deployed another external service &lt;code&gt;nginx-mtls.diff-ca.local:9443&lt;/code&gt; running on an NGINX container on the remote host &lt;code&gt;10.1.1.4&lt;/code&gt;. The certificates for the server and for client verification are signed with a root CA different from the one used to create the intermediate CA for Istio.&lt;/p&gt;
&lt;p&gt;We first need to handle the connection between the application and the egress gateway, by directing traffic to the external server &lt;code&gt;nginx-mtls.diff-ca.local&lt;/code&gt; via the egress gateway with:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;Gateway&lt;/code&gt; on the egress gateway to listen for traffic to the external service (on port 443 because of the mTLS connection between the application and the egress gateway)
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: istio-egressgateway
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - nginx-mtls.diff-ca.local
    tls:
        mode: ISTIO_MUTUAL
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;VirtualService&lt;/code&gt; to direct traffic to the external service via the egress gateway
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-nginx-mtls-through-egress-gateway
spec:
  hosts:
  - nginx-mtls.diff-ca.local
  gateways:
  - mesh
  http:
  - match:
    - gateways:
      - mesh
      port: 80
    route:
    - destination:
        host: istio-egressgateway.istio-system.svc.cluster.local
        subset: nginx-mtls
        port:
          number: 443
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;DestinationRule&lt;/code&gt; to perform mTLS origination from application to the egress gateway, whilst preserving the SNI string towards the external service &lt;code&gt;nginx-mtls.diff-ca.local&lt;/code&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: egressgateway-for-nginx-mtls
spec:
  host: istio-egressgateway.istio-system.svc.cluster.local
  subsets:
  - name: nginx-mtls
    trafficPolicy:
      portLevelSettings:
      - port:
          number: 443
        tls:
          mode: ISTIO_MUTUAL
          sni: nginx-mtls.diff-ca.local
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the second half of the connection, we need the egress gateway to route the traffic to the external service over an mTLS connection. First, we create a generic &lt;code&gt;Secret&lt;/code&gt; to store the enterprise root CA, client certificate and key:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that I&amp;rsquo;ve created the &lt;code&gt;Secret&lt;/code&gt; in the &lt;code&gt;istio-system&lt;/code&gt; because that&amp;rsquo;s where my egress gateway is deployed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl -n istio-system create secret generic nginx-mtls-external \
  --from-file=tls.key=client.key \
  --from-file=tls.crt=client.crt \
  --from-file=ca.crt=enterpriseRootCA.pem
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next, we define the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;ServiceEntry&lt;/code&gt; for the external service to allow traffic to leave the cluster
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: nginx-mtls-diff-ca
spec:
  hosts:
  - nginx-mtls.diff-ca.local
  location: MESH_EXTERNAL
  ports:
  - number: 9443
    name: https
    protocol: TLS
  resolution: STATIC
  endpoints:
  - address: 10.1.1.4
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;VirtualService&lt;/code&gt; defined earlier to redirect traffic hitting the egress gateway to now leave the cluster towards the external service (note the new &lt;code&gt;HTTPMatchRequest&lt;/code&gt;)
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: direct-nginx-mtls-through-egress-gateway
spec:
  hosts:
  - nginx-mtls.diff-ca.local
  gateways:
  - istio-egressgateway
  - mesh
  http:
  - match:
    - gateways:
      - mesh
      port: 80
    route:
    - destination:
        host: istio-egressgateway.istio-system.svc.cluster.local
        subset: nginx-mtls
        port:
          number: 443
  - match:
    - gateways:
      - istio-egressgateway
      port: 443
    route:
    - destination:
        host: nginx-mtls.diff-ca.local
        port:
          number: 9443
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;DestinationRule&lt;/code&gt; for the external service, with the client TLS mode set to &lt;code&gt;MUTUAL&lt;/code&gt; for mTLS. The &lt;code&gt;Secret&lt;/code&gt; containing the certificates and key is also referenced here to provide Istio sidecars with right files for setting up the mTLS connection.
&lt;blockquote&gt;
&lt;p&gt;Note that I&amp;rsquo;ve defined the &lt;code&gt;DestinationRule&lt;/code&gt; in the same namespace as where the &lt;code&gt;Secret&lt;/code&gt; is defined in this example&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl -n istio-system apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: originate-tls-for-nginx-mtls
spec:
  host: nginx-mtls.diff-ca.local
  trafficPolicy:
    loadBalancer:
      simple: ROUND_ROBIN
    portLevelSettings:
    - port:
        number: 9443
      tls:
        mode: MUTUAL
        credentialName: nginx-mtls-external
        sni: nginx-mtls.diff-ca.local
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With all that in place, the application should now be able to access the external service that is expecting a client certificate signed with a different root CA from the cluster&amp;rsquo;s CA&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl exec curl-5fd94f6d69-526vq -c curl -- \
  curl -s --resolve nginx-mtls.diff-ca.local:80:10.1.1.4 \
  http://nginx-mtls.diff-ca.local \
  | grep title
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;unique-client-certificate-for-each-application&#34;&gt;Unique client certificate for each application&lt;/h2&gt;
&lt;p&gt;If there is a requirement for each application to have unique client certificates, or managing an egress gateway sounds like a chore, one can leave the task of managing client certificates to the application owners.&lt;/p&gt;
&lt;p&gt;First, the cluster admin has to define the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;ServiceEntry&lt;/code&gt; for the external service to allow traffic to leave the cluster
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: nginx-mtls-diff-ca
spec:
  hosts:
  - nginx-mtls.diff-ca.local
  location: MESH_EXTERNAL
  ports:
  - number: 9443
    name: https
    protocol: HTTPS
  resolution: STATIC
  endpoints:
  - address: 10.1.1.4
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;VirtualService&lt;/code&gt; to route traffic destined for the external service, and converting the HTTP port (&lt;code&gt;80&lt;/code&gt;) to the HTTPS port (&lt;code&gt;9443&lt;/code&gt;). Note that this is just a port number change, the protocol is still HTTP at this point.
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: nginx-mtls-diff-ca
spec:
  hosts:
  - nginx-mtls.diff-ca.local
  http:
  - match:
    - port: 80
    route:
    - destination:
        host: nginx-mtls.diff-ca.local
        port:
          number: 9443
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;DestinationRule&lt;/code&gt; to perform mTLS connection, referencing the CA certificate, client certificate and key files in particular locations in the sidecar proxy. These files will be loaded into the sidecar proxy by the application owners in the following section.
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: nginx-mtls-diff-ca
spec:
  host: nginx-mtls.diff-ca.local
  trafficPolicy:
    portLevelSettings:
    - port:
        number: 9443
      tls:
        mode: MUTUAL
        clientCertificate: /etc/certs/tls.crt
        privateKey: /etc/certs/tls.key
        caCertificates: /etc/certs/ca.crt
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With the above set up, the application owners then have to provide the CA certificate, client certificate and key files for their applications:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a generic &lt;code&gt;Secret&lt;/code&gt; to store the enterprise root CA, client certificate and key for the mTLS connection towards&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl create secret generic nginx-mtls-external \
  --from-file=tls.key=app-client.key \
  --from-file=tls.crt=app-client.crt \
  --from-file=ca.crt=enterpriseCA.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following annotations to the &lt;code&gt;Pod&lt;/code&gt; template in the &lt;code&gt;Deployment&lt;/code&gt; to load the certs and key from the &lt;code&gt;Secret&lt;/code&gt; into the pod&amp;rsquo;s sidecar proxy in the directory specified by the &lt;code&gt;DestinationRule&lt;/code&gt; from before (&lt;code&gt;/etc/certs/&lt;/code&gt; in this case)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sidecar.istio.io/userVolume: &#39;[{&amp;quot;name&amp;quot;:&amp;quot;client-certs&amp;quot;, &amp;quot;secret&amp;quot;:{&amp;quot;secretName&amp;quot;:&amp;quot;nginx-mtls-external&amp;quot;}}]&#39;
sidecar.istio.io/userVolumeMount: &#39;[{&amp;quot;name&amp;quot;:&amp;quot;client-certs&amp;quot;, &amp;quot;mountPath&amp;quot;:&amp;quot;/etc/certs&amp;quot;, &amp;quot;readonly&amp;quot;:true}]&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;Deployment&lt;/code&gt; manifest will look something like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: curl
  name: curl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: curl
  template:
    metadata:
      annotations:
        sidecar.istio.io/userVolume: &#39;[{&amp;quot;name&amp;quot;:&amp;quot;client-certs&amp;quot;, &amp;quot;secret&amp;quot;:{&amp;quot;secretName&amp;quot;:&amp;quot;nginx-mtls-external&amp;quot;}}]&#39;
        sidecar.istio.io/userVolumeMount: &#39;[{&amp;quot;name&amp;quot;:&amp;quot;client-certs&amp;quot;, &amp;quot;mountPath&amp;quot;:&amp;quot;/etc/certs&amp;quot;, &amp;quot;readonly&amp;quot;:true}]&#39;
      labels:
        app: curl
    spec:
      containers:
      - command:
        - tail
        args:
        - -f
        - /dev/null
        image: curlimages/curl
        name: curl
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can verify that the certificates and key are mounted correctly using &lt;code&gt;istioctl pc secrets&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ istioctl pc secrets curl-55b48d797c-6f5h6 | grep /etc/certs
file-cert:/etc/certs/tls.crt~/etc/certs/tls.key     Cert Chain     ACTIVE     true           344012585647005735528648296646953979292086906406     2022-09-27T11:16:30Z     2021-09-27T11:16:30Z
file-root:/etc/certs/ca.crt                         CA             ACTIVE     true           720903288241772125710852709688782830101643184205     2026-09-26T11:03:03Z     2021-09-27T11:03:03Z
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, the application should be able to access the external service via HTTP on port &lt;code&gt;80&lt;/code&gt;, and the sidecar proxy should initiate the mTLS connection on its behalf on the HTTPS port &lt;code&gt;9443&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl exec curl-55b48d797c-6f5h6 -c curl -- \
  curl -s --resolve nginx-mtls.diff-ca.local:80:10.1.1.4 \
  http://nginx-mtls.diff-ca.local \
  | grep title
&amp;lt;title&amp;gt;Welcome to nginx!&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Automation | Terraform Maps</title>
      <link>/posts/automation/terraform-maps/</link>
      <pubDate>Sun, 26 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/automation/terraform-maps/</guid>
      <description>Intro I&amp;rsquo;ve been doing a lot with terraform lately, and I&amp;rsquo;ve been looking for ways to make my terraform configurations a lot simpler and have less repetition. Like a lot of people, I&amp;rsquo;ve found myself repeating the same code over and over. An example is where I repeat the same resource over and over but with different configuration parameters. It&amp;rsquo;s essentially the same resource. Why should I do this? There has to be a better way.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve been doing a lot with terraform lately, and I&amp;rsquo;ve been looking for ways to make my terraform configurations a lot simpler and have less repetition. Like a lot of people, I&amp;rsquo;ve found myself repeating the same code over and over. An example is where I repeat the same resource over and over but with different configuration parameters. It&amp;rsquo;s essentially the same resource. Why should I do this? &lt;strong&gt;There has to be a better way.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-map&#34;&gt;What is a map?&lt;/h2&gt;
&lt;p&gt;In looking for a way to make my codebase cleaner and simpler, I started looking at using maps. I&amp;rsquo;ve not delved into them in depth before, so it was a fun thing to do on a rainy afternoon.&lt;/p&gt;
&lt;p&gt;The terraform docs do a better job than I can of telling you what a map is - see &lt;a href=&#34;https://www.terraform.io/docs/language/expressions/types.html#maps-objects&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;why-are-maps-cool&#34;&gt;Why are maps cool?&lt;/h2&gt;
&lt;p&gt;Maps are cool because they allow you to have groups of key value pairs that can be accessed in a neat way.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h2&gt;
&lt;p&gt;A very simple example of a map is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;variable &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp_lb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map
  default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    unit-config-origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8888&amp;#34;&lt;/span&gt;
    unit-git-origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8080&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will notice that the map above is actually a variable. That&amp;rsquo;s right &lt;strong&gt;you can use a map as a variable&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this case, I am using a map to assign different ports to origin servers within a &lt;a href=&#34;http://volterra.io&#34;&gt;volterra&lt;/a&gt; resource.
In this way, I don&amp;rsquo;t need to declare the same resource over and over, I can use a loop within my resource to access all of the items within my map.&lt;/p&gt;
&lt;h2 id=&#34;the-resource&#34;&gt;The resource&lt;/h2&gt;
&lt;p&gt;The resource that uses the map above looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;resource &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;volterra_tcp_loadbalancer&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unit-config&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  for_each  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var.tcp_lb
  name      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;each.key&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  namespace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var.ns

  listen_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;each.value&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  dns_volterra_managed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true
  domains &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;var.domain_host&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;var.domain&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  advertise_on_public_default_vip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true

  retract_cluster &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true

  origin_pools_weights &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    pool &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;each.key&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
      namespace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var.ns
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

  hash_policy_choice_round_robin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two pieces to this resource that I need to point out.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The for_each loop&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessing map keys and values&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-for_each-loop&#34;&gt;The for_each loop&lt;/h3&gt;
&lt;p&gt;The for_each loop is used to loop through the map within the context of the resource.
The for_each loop in terraofrm is documented &lt;a href=&#34;https://www.terraform.io/docs/language/meta-arguments/for_each.html#basic-syntax&#34;&gt;here&lt;/a&gt;. The interesting thing is that a for_each loop can &lt;strong&gt;accept a map&lt;/strong&gt; as an input!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;  for_each  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; var.tcp_lb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the for_each loop references the variable that I defined above. The variable is actually a map, which the for_each loop can accept as an input.
The for_each loop will loop through each key within the variable tcp_lb. In my case, the variable has two values.
The for_each loop will run twice as it iterates over my map variable.&lt;/p&gt;
&lt;h3 id=&#34;accessing-map-keys-and-values&#34;&gt;Accessing map keys and values&lt;/h3&gt;
&lt;p&gt;The map that I have defined has two keys and two values.
Each key and each value can be acess separately within the context of the &lt;strong&gt;for_each&lt;/strong&gt; loop.&lt;/p&gt;
&lt;p&gt;In order to access each of the map values or names, I can use the following syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;  name      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;each.key&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;  listen_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;each.value&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;each.key&lt;/strong&gt; and &lt;strong&gt;each.value&lt;/strong&gt; keywords are used to access either the key or the value within the map.&lt;/p&gt;
&lt;p&gt;In my case, on each iteration, the following will be true:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;variable &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp_lb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
  type &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map
  default &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    unit-config-origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8888&amp;#34;&lt;/span&gt;
    unit-git-origin &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;8080&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One first iteration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;each.key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unit-config-origin
each.value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8888&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On the second iteration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;each.key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unit-git-origin
each.value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using terraform maps simplifies your code by reducing the number of resources that you need to duplicate. It also makes your code a lot more readable.&lt;/p&gt;
&lt;p&gt;There are traps and pitfalls using this method if you have dependant resources, but I&amp;rsquo;ll cover this in another post. :)&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Learning Istio | Why Isn&#39;t Service Entry Namespaced!?</title>
      <link>/posts/learning-istio/why-isnt-service-entry-namespaced/</link>
      <pubDate>Sat, 04 Sep 2021 23:36:07 +1000</pubDate>
      
      <guid>/posts/learning-istio/why-isnt-service-entry-namespaced/</guid>
      <description>I got a question on how we can restrict access to certain external endpoints on a per namespace basis. There was an idea to use Istio&amp;rsquo;s egress gateway to control access to external endpoints, though I&amp;rsquo;m not convinced that&amp;rsquo;s a valid use case for an egress gateway today. So I went off to do some investigation, and found some options:
 Specifying which namespaces can access certain hosts defined in the ServiceEntry Specifying which endpoints can be accessed from a namespace  But before that, a bit of back story of how we got here&amp;hellip;</description>
      <content>&lt;p&gt;I got a question on how we can restrict access to certain external endpoints on a per namespace basis. There was an idea to use Istio&amp;rsquo;s &lt;code&gt;egress gateway&lt;/code&gt; to control access to external endpoints, though I&amp;rsquo;m not convinced that&amp;rsquo;s a valid &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/egress/egress-gateway/#use-case&#34;&gt;use case for an &lt;code&gt;egress gateway&lt;/code&gt;&lt;/a&gt; today. So I went off to do some investigation, and found some options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#exportto&#34;&gt;Specifying which namespaces can access certain hosts defined in the &lt;code&gt;ServiceEntry&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sidecar-resource&#34;&gt;Specifying which endpoints can be accessed from a namespace&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But before that, a bit of back story of how we got here&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;a-naive-beginning&#34;&gt;A naive beginning&lt;/h2&gt;
&lt;p&gt;First, I updated Istio &lt;code&gt;outboundTrafficPolicy&lt;/code&gt; to &lt;code&gt;REGISTRY_ONLY&lt;/code&gt; so that we need to EXPLICITLY allow connectivity to external endpoints&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;istioctl install --set profile=demo --set meshConfig.outboundTrafficPolicy.mode=REGISTRY_ONLY -y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To test the access restriction, I deployed a &lt;code&gt;debian&lt;/code&gt; pod in the &lt;code&gt;default&lt;/code&gt; namespace&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl create deployment debian --image debian --replicas=1 -- tail -f /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and tried running &lt;code&gt;apt update&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl exec -it debian-8484c5df49-9x7lt -- bash
Defaulting container name to debian.
Use &#39;kubectl describe pod/debian-8484c5df49-9x7lt -n default&#39; to see all of the containers in this pod.
root@debian-8484c5df49-9x7lt:/#
root@debian-8484c5df49-9x7lt:/# apt-get update
Err:1 http://security.debian.org/debian-security bullseye-security InRelease
  502  Bad Gateway [IP: 151.101.130.132 80]
Err:2 http://deb.debian.org/debian bullseye InRelease
  502  Bad Gateway [IP: 151.101.30.132 80]
Err:3 http://deb.debian.org/debian bullseye-updates InRelease
  502  Bad Gateway [IP: 151.101.30.132 80]
Reading package lists... Done
N: See apt-secure(8) manpage for repository creation and user configuration details.
N: Updating from such a repository can&#39;t be done securely, and is therefore disabled by default.
E: The repository &#39;http://security.debian.org/debian-security bullseye-security InRelease&#39; is not signed.
E: Failed to fetch http://security.debian.org/debian-security/dists/bullseye-security/InRelease  502  Bad Gateway [IP: 151.101.130.132 80]
E: Failed to fetch http://deb.debian.org/debian/dists/bullseye/InRelease  502  Bad Gateway [IP: 151.101.30.132 80]
E: The repository &#39;http://deb.debian.org/debian bullseye InRelease&#39; is not signed.
N: Updating from such a repository can&#39;t be done securely, and is therefore disabled by default.
N: See apt-secure(8) manpage for repository creation and user configuration details.
E: Failed to fetch http://deb.debian.org/debian/dists/bullseye-updates/InRelease  502  Bad Gateway [IP: 151.101.30.132 80]
E: The repository &#39;http://deb.debian.org/debian bullseye-updates InRelease&#39; is not signed.
N: Updating from such a repository can&#39;t be done securely, and is therefore disabled by default.
N: See apt-secure(8) manpage for repository creation and user configuration details.
root@debian-8484c5df49-9x7lt:/#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As expected the command fails when &lt;code&gt;apt update&lt;/code&gt; tries to reach external endpoints &lt;code&gt;security.debian.org&lt;/code&gt; and &lt;code&gt;deb.debian.org&lt;/code&gt;, due to the endpoints not being defined in the registry.&lt;/p&gt;
&lt;p&gt;I then created a &lt;code&gt;ServiceEntry&lt;/code&gt; matching the two hostnames&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl create -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: debian-org
spec:
  hosts:
  - security.debian.org
  - deb.debian.org
  location: MESH_EXTERNAL
  ports:
  - number: 80
    name: http
    protocol: HTTP
  resolution: DNS
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and re-ran &lt;code&gt;apt update&lt;/code&gt;. This time it ran successfully as expected.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl exec -it debian-8484c5df49-9x7lt -- bash
Defaulting container name to debian.
Use &#39;kubectl describe pod/debian-8484c5df49-9x7lt -n default&#39; to see all of the containers in this pod.
root@debian-8484c5df49-9x7lt:/# apt update
Hit:1 http://security.debian.org/debian-security bullseye-security InRelease
Get:2 http://deb.debian.org/debian bullseye InRelease [113 kB]
Get:3 http://deb.debian.org/debian bullseye-updates InRelease [36.8 kB]
Get:4 http://deb.debian.org/debian bullseye/main amd64 Packages [8178 kB]
Fetched 8327 kB in 3s (2812 kB/s)
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
All packages are up to date.
root@debian-8484c5df49-9x7lt:/#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, I thought this would be the end of the story. All I have to do is to only allow cluster admins the permissions for creating &lt;code&gt;ServiceEntry&lt;/code&gt; resources, and developers would have to engage cluster admins to get access to external resources!&lt;/p&gt;
&lt;h2 id=&#34;plot-twist&#34;&gt;Plot twist&lt;/h2&gt;
&lt;p&gt;But I figured this came to me too easily&amp;hellip; they should have figured it out without asking for help. So, I tried repeating the test from another namespace &lt;code&gt;newguy&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl create ns newguy
kubectl label namespace newguy istio-injection=enabled
kubectl -n newguy create deployment debian --image debian --replicas=1 -- tail -f /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lo and behold, when I run &lt;code&gt;apt update&lt;/code&gt; in this container, it worked&amp;hellip; when I thought it shouldn&amp;rsquo;t&amp;hellip;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl -n newguy exec -it debian-8484c5df49-dpf2h -- bash
Defaulting container name to debian.
Use &#39;kubectl describe pod/debian-8484c5df49-dpf2h -n newguy&#39; to see all of the containers in this pod.
root@debian-8484c5df49-dpf2h:/# apt update
Get:1 http://deb.debian.org/debian bullseye InRelease [113 kB]
Get:2 http://deb.debian.org/debian bullseye-updates InRelease [36.8 kB]
Get:3 http://deb.debian.org/debian bullseye/main amd64 Packages [8178 kB]
Get:4 http://security.debian.org/debian-security bullseye-security InRelease [44.1 kB]
Get:5 http://security.debian.org/debian-security bullseye-security/main amd64 Packages [29.4 kB]
Fetched 8401 kB in 3s (3267 kB/s)
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
All packages are up to date.
root@debian-8484c5df49-dpf2h:/#
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Turns out that by default, many of Istio&amp;rsquo;s resources are translated to configurations which are applied to the sidecar proxies in all namespaces. Here&amp;rsquo;s one from Istio&amp;rsquo;s &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/service-entry/&#34;&gt;ServiceEntry&lt;/a&gt; documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &amp;lsquo;exportTo&amp;rsquo; field allows for control over the visibility of a service declaration to other namespaces in the mesh. By default, a service is exported to all namespaces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, that means by default, my &lt;code&gt;newguy:debian&lt;/code&gt; pod contains configuration to get to the &lt;code&gt;*.debian.org&lt;/code&gt; hosts from the &lt;code&gt;ServiceEntry&lt;/code&gt; definition in the default namespace. I want the opposite of that - I don&amp;rsquo;t want the &lt;code&gt;istio-proxy&lt;/code&gt; in the &lt;code&gt;newguy&lt;/code&gt; namespace to pick up configuration defined in other namespaces.&lt;/p&gt;
&lt;p&gt;Now that we&amp;rsquo;ve established our problem, let&amp;rsquo;s set out to explore the options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#exportto&#34;&gt;Specifying which namespaces can access certain hosts defined in the &lt;code&gt;ServiceEntry&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sidecar-resource&#34;&gt;Specifying which endpoints can be accessed from a namespace&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;exportto&#34;&gt;exportTo&lt;/h2&gt;
&lt;p&gt;The most direct way is to use the &lt;code&gt;exportTo&lt;/code&gt; attribute in &lt;code&gt;ServiceEntry&lt;/code&gt; to specify the namespaces in which pods are allowed to access the external endpoints. To achieve that, I updated the &lt;code&gt;ServiceEntry&lt;/code&gt; to only export to the namespace in which it&amp;rsquo;s defined, or just &lt;code&gt;&amp;quot;.&amp;quot;&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: debian-org
spec:
  exportTo:
  - &amp;quot;.&amp;quot;
  hosts:
  - security.debian.org
  - deb.debian.org
  location: MESH_EXTERNAL
  ports:
  - number: 80
    name: http
    protocol: HTTP
  resolution: DNS
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The container in the &lt;code&gt;newguy&lt;/code&gt; namespace is no longer able to access the endpoints:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl -n newguy exec debian-8484c5df49-dpf2h -- apt update
Defaulted container &amp;quot;debian&amp;quot; out of: debian, istio-proxy, istio-init (init)

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Err:1 http://deb.debian.org/debian bullseye InRelease
  502  Bad Gateway [IP: 151.101.30.132 80]
Err:2 http://deb.debian.org/debian bullseye-updates InRelease
  502  Bad Gateway [IP: 151.101.30.132 80]
Err:3 http://security.debian.org/debian-security bullseye-security InRelease
  502  Bad Gateway [IP: 151.101.2.132 80]
Reading package lists...
E: The repository &#39;http://deb.debian.org/debian bullseye InRelease&#39; is no longer signed.
E: Failed to fetch http://deb.debian.org/debian/dists/bullseye/InRelease  502  Bad Gateway [IP: 151.101.30.132 80]
E: Failed to fetch http://deb.debian.org/debian/dists/bullseye-updates/InRelease  502  Bad Gateway [IP: 151.101.30.132 80]
E: The repository &#39;http://deb.debian.org/debian bullseye-updates InRelease&#39; is no longer signed.
E: Failed to fetch http://security.debian.org/debian-security/dists/bullseye-security/InRelease  502  Bad Gateway [IP: 151.101.2.132 80]
E: The repository &#39;http://security.debian.org/debian-security bullseye-security InRelease&#39; is no longer signed.
command terminated with exit code 100
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;sidecar-resource&#34;&gt;Sidecar resource&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;exportTo&lt;/code&gt; attribute presents a per &lt;code&gt;ServiceEntry&lt;/code&gt; way of controlling access. To achieve a per namespace way of access control, we can turn to the &lt;code&gt;Sidecar&lt;/code&gt;. No, not the &lt;code&gt;istio-proxy&lt;/code&gt; sidecars that come with pods. I&amp;rsquo;m talking about the &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/sidecar/&#34;&gt;Sidecar&lt;/a&gt; custom resource.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, Istio will program all sidecar proxies in the mesh with the necessary configuration required to reach every workload instance in the mesh, as well as accept traffic on all the ports associated with the workload. The Sidecar configuration provides a way to fine tune the set of ports, protocols that the proxy will accept when forwarding traffic to and from the workload. In addition, it is possible to restrict the set of services that the proxy can reach when forwarding outbound traffic from workload instances.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To demonstrate, I created the following &lt;code&gt;Sidecar&lt;/code&gt; definition in the &lt;code&gt;newguy&lt;/code&gt; namespace which only allows egress traffic only to other workloads in the same namespace as well as to services in the &lt;code&gt;istio-system&lt;/code&gt; namespace.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl -n newguy create -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: default
spec:
  egress:
  - hosts:
    - &amp;quot;./*&amp;quot;
    - &amp;quot;istio-system/*&amp;quot;
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When I try running &lt;code&gt;apt update&lt;/code&gt; in the &lt;code&gt;newguy&lt;/code&gt; namespace again:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl -n newguy exec debian-8484c5df49-dpf2h -- apt update
Defaulting container name to debian.
Use &#39;kubectl describe pod/debian-8484c5df49-dpf2h -n newguy&#39; to see all of the containers in this pod.

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Err:1 http://security.debian.org/debian-security bullseye-security InRelease
  502  Bad Gateway [IP: 151.101.66.132 80]
Err:2 http://deb.debian.org/debian bullseye InRelease
  502  Bad Gateway [IP: 151.101.30.132 80]
Err:3 http://deb.debian.org/debian bullseye-updates InRelease
  502  Bad Gateway [IP: 151.101.30.132 80]
Reading package lists...
E: The repository &#39;http://security.debian.org/debian-security bullseye-security InRelease&#39; is no longer signed.
E: Failed to fetch http://security.debian.org/debian-security/dists/bullseye-security/InRelease  502  Bad Gateway [IP: 151.101.66.132 80]
E: Failed to fetch http://deb.debian.org/debian/dists/bullseye/InRelease  502  Bad Gateway [IP: 151.101.30.132 80]
E: The repository &#39;http://deb.debian.org/debian bullseye InRelease&#39; is no longer signed.
E: Failed to fetch http://deb.debian.org/debian/dists/bullseye-updates/InRelease  502  Bad Gateway [IP: 151.101.30.132 80]
E: The repository &#39;http://deb.debian.org/debian bullseye-updates InRelease&#39; is no longer signed.
command terminated with exit code 100
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It fails as expected! And when I add the two hostnames in the egress hosts list of the &lt;code&gt;Sidecar&lt;/code&gt; resource:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl -n newguy apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: default
spec:
  egress:
  - hosts:
    - &amp;quot;./*&amp;quot;
    - &amp;quot;istio-system/*&amp;quot;
    - &amp;quot;default/security.debian.org&amp;quot;
    - &amp;quot;default/deb.debian.org&amp;quot;
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;apt update&lt;/code&gt; now runs successfully!&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl -n newguy exec debian-8484c5df49-dpf2h -- apt update
Defaulting container name to debian.
Use &#39;kubectl describe pod/debian-8484c5df49-dpf2h -n newguy&#39; to see all of the containers in this pod.

WARNING: apt does not have a stable CLI interface. Use with caution in scripts.

Hit:1 http://security.debian.org/debian-security bullseye-security InRelease
Hit:2 http://deb.debian.org/debian bullseye InRelease
Hit:3 http://deb.debian.org/debian bullseye-updates InRelease
Reading package lists...
Building dependency tree...
Reading state information...
All packages are up to date.
$
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Learning Istio | Accessing external TCP services using ServiceEntry</title>
      <link>/posts/learning-istio/accessing-external-tcp-services-using-serviceentry/</link>
      <pubDate>Mon, 16 Aug 2021 11:31:40 +1000</pubDate>
      
      <guid>/posts/learning-istio/accessing-external-tcp-services-using-serviceentry/</guid>
      <description>In this post, we will be testing Istio&amp;rsquo;s ServiceEntry by accessing a PostgreDB database hosted externally from the Kubernetes cluster.
Setup &amp;ldquo;External&amp;rdquo; PostgresDB service Since we are running the Kubernetes cluster locally in Docker containers using k3d, we can create an &amp;ldquo;external&amp;rdquo; service by running a PostgresDB Docker container on the same host and expose its ports to localhost.
Create a local PostgresDB container database using Docker
docker run --name postgres --restart always -e POSTGRES_PASSWORD=password -d -p 5432:5432 postgres Create a test database app_db</description>
      <content>&lt;p&gt;In this post, we will be testing Istio&amp;rsquo;s &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/service-entry/&#34;&gt;ServiceEntry&lt;/a&gt; by accessing a PostgreDB database hosted externally from the Kubernetes cluster.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;h2 id=&#34;external-postgresdb-service&#34;&gt;&amp;ldquo;External&amp;rdquo; PostgresDB service&lt;/h2&gt;
&lt;p&gt;Since we are running the Kubernetes cluster locally in Docker containers using &lt;code&gt;k3d&lt;/code&gt;, we can create an &amp;ldquo;external&amp;rdquo; service by running a &lt;code&gt;PostgresDB&lt;/code&gt; Docker container on the same host and expose its ports to localhost.&lt;/p&gt;
&lt;p&gt;Create a local PostgresDB container database using Docker&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run --name postgres --restart always -e POSTGRES_PASSWORD=password -d -p 5432:5432 postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Create a test database &lt;code&gt;app_db&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker exec -u postgres -it postgres createdb app_db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This service should be accessible within the cluster at &lt;code&gt;host.k3d.internal:5432&lt;/code&gt; (See &lt;a href=&#34;https://k3d.io/faq/faq/#how-to-access-services-like-a-database-running-on-my-docker-host-machine&#34;&gt;k3d FAQ&lt;/a&gt; for more information on &lt;code&gt;host.k3d.internal&lt;/code&gt;)&lt;/p&gt;
&lt;h2 id=&#34;postgres-client&#34;&gt;Postgres client&lt;/h2&gt;
&lt;p&gt;To test the externally hosted service, we will use &lt;a href=&#34;https://www.pgcli.com/&#34;&gt;pgcli&lt;/a&gt; to open a connection towards the database. I have published an image &lt;a href=&#34;https://hub.docker.com/r/leonseng/pgcli-docker&#34;&gt;leonseng/pgcli-docker&lt;/a&gt; on &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Dockerhub&lt;/a&gt;, which contains the &lt;code&gt;pgcli&lt;/code&gt; binary for the purpose of this test.&lt;/p&gt;
&lt;p&gt;Create a deployment with the image&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl create deployment pgcli --image leonseng/pgcli-docker:3.1.0 -- sleep 36000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assuming the namespace has been labelled with &lt;code&gt;istio-injection=enabled&lt;/code&gt;, the pod should come up with 2 containers - one for &lt;code&gt;pgcli-docker&lt;/code&gt;, another for &lt;code&gt;istio-proxy&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl get pods pgcli-6d678b54fb-v8fpp
NAME                     READY   STATUS    RESTARTS   AGE
pgcli-6d678b54fb-v8fpp   2/2     Running   0          30m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try initial connection to the PostgresDB external to the Kubernetes cluster&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl exec &amp;lt;pgcli_pod&amp;gt; -it -- pgcli postgres://postgres:password@host.k3d.internal:5432/app_db
server closed the connection unexpectedly
        This probably means the server terminated abnormally
        before or while processing the request.

command terminated with exit code 1
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Connection fails as expected due to missing entry in the registry for the external service. Looking at logs of &lt;code&gt;istio-proxy&lt;/code&gt; confirms that traffic is being sent to the &lt;code&gt;BlackHoleCluster&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl logs &amp;lt;pgcli_pod&amp;gt; -c istio-proxy --tail 50 -f
[2021-08-16T00:47:49.898Z] &amp;quot;- - -&amp;quot; 0 UH - - &amp;quot;-&amp;quot; 0 0 0 - &amp;quot;-&amp;quot; &amp;quot;-&amp;quot; &amp;quot;-&amp;quot; &amp;quot;-&amp;quot; &amp;quot;-&amp;quot; BlackHoleCluster - 172.17.0.1:5432 10.42.0.10:35742 - -
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;service-entry&#34;&gt;Service Entry&lt;/h1&gt;
&lt;p&gt;Create a &lt;code&gt;ServiceEntry&lt;/code&gt; which registers the PostgresDB service at &lt;code&gt;host.k3d.internal:5432&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl create -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: postgresdb
spec:
  hosts:
  - host.k3d.internal
  location: MESH_EXTERNAL
  ports:
  - number: 5432
    name: postgres
    protocol: TCP
  resolution: DNS
EOF

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the &lt;code&gt;ServiceEntry&lt;/code&gt; has been created, the &lt;code&gt;pgcli&lt;/code&gt; client is now able to connect to the PostgresDB&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl exec &amp;lt;pgcli_pod&amp;gt; -it -- pgcli postgres://postgres:password@host.k3d.internal:5432/app_db
Server: PostgreSQL 13.3 (Debian 13.3-1.pgdg100+1)
Version: 3.1.0
Chat: https://gitter.im/dbcli/pgcli
Home: http://pgcli.com
postgres@host:app_db&amp;gt; quit
Goodbye!
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This successful connection is also logged on the &lt;code&gt;istio-proxy&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[2021-08-16T00:57:32.037Z] &amp;quot;- - -&amp;quot; 0 - - - &amp;quot;-&amp;quot; 452 880 30823 - &amp;quot;-&amp;quot; &amp;quot;-&amp;quot; &amp;quot;-&amp;quot; &amp;quot;-&amp;quot; &amp;quot;172.17.0.1:5432&amp;quot; outbound|5432||host.k3d.internal 10.42.0.10:40108 172.17.0.1:5432 10.42.0.10:40106 - -
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Digging deeper into the &lt;code&gt;istio-proxy&lt;/code&gt; configuration will show the relevant &lt;code&gt;Envoy&lt;/code&gt; objects created by this &lt;code&gt;ServiceEntry&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ istioctl proxy-config listeners pgcli-6d678b54fb-v8fpp | grep host.k3d.internal
0.0.0.0       5432  ALL                                                                      Cluster: outbound|5432||host.k3d.internal

$ istioctl proxy-config clusters pgcli-6d678b54fb-v8fpp | grep host.k3d.internal
host.k3d.internal                                       5432      -          outbound      STRICT_DNS

$ istioctl proxy-config endpoints pgcli-6d678b54fb-v8fpp | grep host.k3d.internal
172.17.0.1:5432                  HEALTHY     OK                outbound|5432||host.k3d.internal
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Development | NGINX Unit</title>
      <link>/posts/development/nginx-unit/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/development/nginx-unit/</guid>
      <description>Intro I recently discovered NGINX Unit - now there&amp;rsquo;s a disclaimer here as well - I work for the company that produces this software. I do think that it&amp;rsquo;s a very very cool piece of open source software, so it generally suits my ethos:
 Open Source Super cool software Extensible Makes my life as a developer easier  It pretty much ticks all the boxes.
What is it? This one is a little harder to answer.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;I recently discovered NGINX Unit - now there&amp;rsquo;s a disclaimer here as well - I work for the company that produces this software.
I do think that it&amp;rsquo;s a very very cool piece of open source software, so it generally suits my ethos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open Source&lt;/li&gt;
&lt;li&gt;Super cool software&lt;/li&gt;
&lt;li&gt;Extensible&lt;/li&gt;
&lt;li&gt;Makes my life as a developer easier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It pretty much ticks all the boxes.&lt;/p&gt;
&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;
&lt;p&gt;This one is a little harder to answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s a lot of things&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll let the &lt;a href=&#34;https://unit.nginx.org&#34;&gt;unit webpage&lt;/a&gt; do the talking here:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NGINX Unit is a polyglot app server, a reverse proxy, and a static file server, available for Unix-like systems.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dare I say it&amp;rsquo;s a lot more than that though.&lt;/p&gt;
&lt;h2 id=&#34;in-a-nutshell&#34;&gt;In a nutshell&lt;/h2&gt;
&lt;p&gt;In a nutshell, if I had to describe it I would say it&amp;rsquo;s a multi language application server that has a declarative configuration and description interface.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s wordy but that&amp;rsquo;s what it is to me.&lt;/p&gt;
&lt;h2 id=&#34;why-is-this-important&#34;&gt;Why is this important?&lt;/h2&gt;
&lt;p&gt;In a modern application ecosystem I have many services written in multiple languages.
Some of these will be written in spring, some will be written in golang and some will be written in nodejs as examples.&lt;/p&gt;
&lt;p&gt;This is great because every team writes services the way that best fits them and makes sense for the delivery of that particular service. It lets teams operate at the speed they&amp;rsquo;re comfortable with and means that services get delivered in the best way.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What if I want services in different languages to coexist together?&lt;/li&gt;
&lt;li&gt;What if I want to describe my services in a common way?&lt;/li&gt;
&lt;li&gt;What I don&amp;rsquo;t want my pipelines to be brittle and I want them to be templated?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is why I think Unit is important.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/unit.JPG&#34; alt=&#34;unit.JPG&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;multiple-languages&#34;&gt;Multiple languages&lt;/h2&gt;
&lt;p&gt;NGINX Unit allows you to use multiple langugaes. In a modern application architecture, this is a very common thing to want to do.
Multiple services, written by different teams in different languages - this is a completely common scenario.&lt;/p&gt;
&lt;p&gt;NGINX Unit allows you to deploy services written in multiple different languages on the same application server.
This makes deployment easier and makes the whole dev experience a lot easier also.&lt;/p&gt;
&lt;h2 id=&#34;declarative-configuration&#34;&gt;Declarative configuration&lt;/h2&gt;
&lt;p&gt;NGINX Unit has a REST based declarative configuration.
This is one of the other very nice things about Unit -  everything in the configuration is declarative. With a declarative configuration, everything is real time, and I don&amp;rsquo;t need to worry about restarting applications.&lt;/p&gt;
&lt;p&gt;A simple configuration looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;{
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;listeners&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;*:8080&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;applications/python&amp;#34;&lt;/span&gt;
                },

                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;*:80&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;
                }
        },

        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;: [
                {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;share&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/www/pacman-unit/&amp;#34;&lt;/span&gt;
                        }
                }
        ],

        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;applications&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/www/git-pull-api/&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wsgi&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;callable&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;
                }
        }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;components&#34;&gt;Components&lt;/h2&gt;
&lt;p&gt;Each component of the configuration above allows you to step through connecting to, and serving my application.
A picutre is worth a thousand words here, so here is one that I like as it explains the concepts of unit nicely.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/unit-config.JPG&#34; alt=&#34;unit-config.JPG&#34;&gt;&lt;/p&gt;
&lt;p&gt;Listeners expose the application publicly, and can have characteristics like ports, certificates, names and so on.
Listeners can pass to either routes or directly to applications. In the case above, my first listener passes directly to my application named &amp;ldquo;python&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;My second listener passes to a route. While I only have one route, it is possible to have multiple routes. Each route can have multiple conditions or matches and actions. In the case above, the route simply passes to a directory that serves out a static website (and yes it&amp;rsquo;s pacman).&lt;/p&gt;
&lt;p&gt;Routes in unit are handled by a separate router process. This software based router handles request routing for unit.&lt;/p&gt;
&lt;p&gt;A more complex route block looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;routes&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; [
                {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: {
                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;static.svkcode.org&amp;#34;&lt;/span&gt;
                        },

                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;share&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/www/pacman-canvas&amp;#34;&lt;/span&gt;
                        }
                },
                {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: {
                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;api.svkcode.org&amp;#34;&lt;/span&gt;
                        },

                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;upstreams/rr-lb&amp;#34;&lt;/span&gt;
                        }
                },
                {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;match&amp;#34;&lt;/span&gt;: {
                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;host&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jsp.svkcode.org&amp;#34;&lt;/span&gt;
                        },

                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
                                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;applications/java&amp;#34;&lt;/span&gt;
                        }
                }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each route in this case passes to a different application based on the incoming host header. In this way, the unit router can be used to handle incoming request routing at a very granular level.&lt;/p&gt;
&lt;p&gt;My application block is the last piece of the puzzle here.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-JSON&#34; data-lang=&#34;JSON&#34;&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;applications&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;: {
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;python&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;path&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/www/git-pull-api/&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;module&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wsgi&amp;#34;&lt;/span&gt;,
                        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;callable&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;
                }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;My application block tells unit to run my application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;That&amp;rsquo;s right unit is an application server.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The example above is a python application, but unit can also run nodejs, java, golang, perl (yes really - though I haven&amp;rsquo;t tried it), php, ruby, python and so on.&lt;/p&gt;
&lt;p&gt;The intention here is that unit handles instantiating the application and everything is configured via the declarative configuration language of unit in real time.&lt;/p&gt;
&lt;h2 id=&#34;low-barrier-to-adoption&#34;&gt;Low barrier to adoption&lt;/h2&gt;
&lt;p&gt;Unit offers a very low barrier to entry.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The concepts are simple and sensible.&lt;/li&gt;
&lt;li&gt;The declarative configuration is JSON based with a &amp;ldquo;get it, put it&amp;rdquo; mentality.&lt;/li&gt;
&lt;li&gt;Everything is real time - make a change, it&amp;rsquo;s reflected immediately.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;NGINX Unit is a good application server, and has a lot of uses.
Look out for additional posts on how to use it, how to configure it, and where it fits in a knative world.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Learning Istio | Ingress</title>
      <link>/posts/learning-istio/ingress/</link>
      <pubDate>Mon, 02 Aug 2021 16:25:55 +1000</pubDate>
      
      <guid>/posts/learning-istio/ingress/</guid>
      <description>In the previous post, we deployed the Bookinfo application on a k3s cluster with Istio enabled. In this post, we will explore the features on Istio Ingress.
Kubernetes Ingress Istio should handle Kubernetes Ingress resource just fine as documented here.
Here we create a Kubernetes Ingress to access the Bookinfo application. Note the additional annotation kubernetes.io/ingress.class: istio:
kubectl -n bookinfo apply -f - &amp;lt;&amp;lt;EOF apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.</description>
      <content>&lt;p&gt;In the previous &lt;a href=&#34;/posts/learning-istio/01-setup/&#34;&gt;post&lt;/a&gt;, we deployed the &lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/#deploying-the-application&#34;&gt;Bookinfo&lt;/a&gt; application on a k3s cluster with Istio enabled. In this post, we will explore the features on Istio Ingress.&lt;/p&gt;
&lt;h1 id=&#34;kubernetes-ingress&#34;&gt;Kubernetes Ingress&lt;/h1&gt;
&lt;p&gt;Istio should handle &lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;Kubernetes Ingress&lt;/a&gt; resource just fine as documented &lt;a href=&#34;https://istio.io/latest/docs/tasks/traffic-management/ingress/kubernetes-ingress/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here we create a Kubernetes Ingress to access the Bookinfo application. Note the additional annotation &lt;code&gt;kubernetes.io/ingress.class: istio&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl -n bookinfo apply -f - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;apiVersion: networking.k8s.io/v1
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kind: Ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;metadata:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  annotations:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    kubernetes.io/ingress.class: istio
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  name: productpage-k8s-ingress
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;spec:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  rules:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  - http:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      paths:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - path: /productpage
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        pathType: Exact
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        backend:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          service:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            name: productpage
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            port:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;              number: 9080
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - path: /static
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        pathType: Prefix
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        backend:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          service:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            name: productpage
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            port:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;              number: 9080
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - path: /login
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        pathType: Exact
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        backend:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          service:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            name: productpage
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            port:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;              number: 9080
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - path: /logout
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        pathType: Exact
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        backend:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          service:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            name: productpage
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            port:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;              number: 9080
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      - path: /api/v1/products
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        pathType: Prefix
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        backend:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          service:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            name: productpage
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            port:
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;              number: 9080
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The application is now exposed through the Istio ingress gateway on port 80, which in turn is exposed on port 8080 via the k3d configuration. Verify that it is working by browsing to &lt;a href=&#34;http://localhost:8080/productpage&#34;&gt;http://localhost:8080/productpage&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To verify that the route has been configured on the Istio ingress gateway, first get the name of the &lt;code&gt;route&lt;/code&gt; created by the Ingress:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ ISTIO_INGRESS_GW_POD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;kubectl -n istio-system get pods -l app&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;istio-ingressgateway -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{.items[*].metadata.name}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
$ istioctl proxy-config routes -n istio-system $ISTIO_INGRESS_GW_POD
NAME        DOMAINS     MATCH                  VIRTUAL SERVICE
http.80     *           /productpage           -productpage-k8s-ingress-istio-autogenerated-k8s-ingress.bookinfo
            *           /healthz/ready*
            *           /stats/prometheus*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, we see &lt;code&gt;http.80&lt;/code&gt; is the route created for our ingress matching &lt;code&gt;/productpage&lt;/code&gt;. We can then print out the details of the route by name&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ istioctl proxy-config routes -n istio-system $ISTIO_INGRESS_GW_POD --name http.80 -o yaml
- name: http.80
  validateClusters: false
  virtualHosts:
  - domains:
    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
    includeRequestAttemptCount: true
    name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*:80&amp;#39;&lt;/span&gt;
    routes:
    - decorator:
        operation: productpage.bookinfo.svc.cluster.local:9080/productpage
      match:
        caseSensitive: true
        path: /productpage
      metadata:
        filterMetadata:
          istio:
            config: /apis/networking.istio.io/v1alpha3/namespaces/bookinfo/virtual-service/-productpage-k8s-ingress-istio-autogenerated-k8s-ingress
      route:
        cluster: outbound|9080&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;productpage.bookinfo.svc.cluster.local
        maxGrpcTimeout: 0s
        retryPolicy:
          hostSelectionRetryMaxAttempts: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt;
          numRetries: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
          retriableStatusCodes:
          - &lt;span style=&#34;color:#ae81ff&#34;&gt;503&lt;/span&gt;
          retryHostPredicate:
          - name: envoy.retry_host_predicates.previous_hosts
          retryOn: connect-failure,refused-stream,unavailable,cancelled,retriable-status-codes
        timeout: 0s
&amp;lt;output truncated&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, you can go all out and get a config dump from the ingress gateway (which is basically Envoy) by exposing the Envoy admin port &lt;code&gt;15000&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;k -n istio-system port-forward $ISTIO_INGRESS_GW_POD 15000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and calling the &lt;code&gt;config_dump&lt;/code&gt; API in a separate terminal&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl localhost:15000/config_dump
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;istio-gateway-and-virtual-service&#34;&gt;Istio Gateway and Virtual Service&lt;/h1&gt;
&lt;p&gt;Istio offers the &lt;code&gt;Gateway&lt;/code&gt; and &lt;code&gt;VirtualService&lt;/code&gt; CRDs for better control of ingress traffic.&lt;/p&gt;
&lt;p&gt;We start by deploying the &lt;code&gt;Gateway&lt;/code&gt; and &lt;code&gt;VirtualService&lt;/code&gt; resources&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl -n bookinfo apply -f - &amp;lt;&amp;lt;EOF
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: bookinfo-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - &amp;quot;*&amp;quot;
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: bookinfo
spec:
  hosts:
  - &amp;quot;*&amp;quot;
  gateways:
  - bookinfo-gateway
  http:
  - match:
    - uri:
        exact: /productpage
    - uri:
        prefix: /static
    - uri:
        exact: /login
    - uri:
        exact: /logout
    - uri:
        prefix: /api/v1/products
    route:
    - destination:
        host: productpage
        port:
          number: 9080
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Verify that the appropriate routes are created:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ istioctl proxy-config routes -n istio-system $ISTIO_INGRESS_GW_POD
NAME        DOMAINS     MATCH                  VIRTUAL SERVICE
http.80     *           /productpage           -productpage-k8s-ingress-istio-autogenerated-k8s-ingress.bookinfo
http.80     *           /static/*              -productpage-k8s-ingress-istio-autogenerated-k8s-ingress.bookinfo
http.80     *           /login                 -productpage-k8s-ingress-istio-autogenerated-k8s-ingress.bookinfo
http.80     *           /logout                -productpage-k8s-ingress-istio-autogenerated-k8s-ingress.bookinfo
http.80     *           /api/v1/products/*     -productpage-k8s-ingress-istio-autogenerated-k8s-ingress.bookinfo
http.80     *           /productpage           bookinfo.bookinfo
http.80     *           /static*               bookinfo.bookinfo
http.80     *           /login                 bookinfo.bookinfo
http.80     *           /logout                bookinfo.bookinfo
http.80     *           /api/v1/products*      bookinfo.bookinfo
            *           /healthz/ready*
            *           /stats/prometheus*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notice that we now have 2 sets of routes, 1 from Kubernetes Ingress and another from the Istio VirtualService. According to Envoy&amp;rsquo;s &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/route_matching&#34;&gt;route matching&lt;/a&gt; rules, they are evaluated in order, so the routes introduced by the Ingress resource still has priority.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s verify this by changing the target port for /productpage in the &lt;code&gt;productpage-k8s-ingress&lt;/code&gt; Ingress to something else&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl -n bookinfo patch ingress productpage-k8s-ingress -p &#39;{
  &amp;quot;spec&amp;quot;: {
    &amp;quot;rules&amp;quot;: [
      {
        &amp;quot;http&amp;quot;: {
          &amp;quot;paths&amp;quot;: [
            {
              &amp;quot;path&amp;quot;: &amp;quot;/productpage&amp;quot;,
              &amp;quot;pathType&amp;quot;: &amp;quot;Exact&amp;quot;,
              &amp;quot;backend&amp;quot;: {
                &amp;quot;service&amp;quot;: {
                  &amp;quot;name&amp;quot;: &amp;quot;productpage&amp;quot;,
                  &amp;quot;port&amp;quot;: {
                    &amp;quot;number&amp;quot;: 10080
                  }
                }
              }
            }
          ]
        }
      }
    ]
  }
}&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Attempting to browse to &lt;a href=&#34;http://localhost:8080/productpage&#34;&gt;http://localhost:8080/productpage&lt;/a&gt; will now fail as expected since the &lt;code&gt;productpage-k8s-ingress&lt;/code&gt; Ingress configuration is wrong.&lt;/p&gt;
&lt;p&gt;Now that we have observed this behaviour of Envoy route matching, we can remove the &lt;code&gt;productpage-k8s-ingress&lt;/code&gt; Ingress, and have Istio&amp;rsquo;s Gateway and VirtualService to take effect&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl -n bookinfo delete ingress productpage-k8s-ingress
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;a href=&#34;http://localhost:8080/productpage&#34;&gt;productpage&lt;/a&gt; should now work again.&lt;/p&gt;
&lt;h1 id=&#34;learnings&#34;&gt;Learnings&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Istio can handle Kubernetes Ingress once the &lt;code&gt;kubernetes.io/ingress.class: istio&lt;/code&gt; annotation has been added&lt;/li&gt;
&lt;li&gt;Viewing the Ingress gateway routes&lt;/li&gt;
&lt;li&gt;Ingress gateway route matching behaviour&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Learning Istio | Setup</title>
      <link>/posts/learning-istio/setup/</link>
      <pubDate>Mon, 02 Aug 2021 14:20:35 +1000</pubDate>
      
      <guid>/posts/learning-istio/setup/</guid>
      <description>In this series, we will be testing out several features in Istio with a local Kubernetes (k3s) cluster.
Deploy k3s cluster First step is to deploy the k8s cluster with k3d - a wrapper to run k3s in docker. Start by creating a k3d config file:
# k3d-istio.yaml apiVersion: k3d.io/v1alpha2 kind: Simple name: istio servers: 1 agents: 2 ports: # for exposing Istio ingress on localhost - port: 8080:80 nodeFilters: - loadbalancer - port: 8443:443 nodeFilters: - loadbalancer options: k3s: extraServerArgs: - --no-deploy=traefik  # we will be using Istio ingress instead Deploy the cluster with k3d</description>
      <content>&lt;p&gt;In this series, we will be testing out several features in Istio with a local Kubernetes (k3s) cluster.&lt;/p&gt;
&lt;h1 id=&#34;deploy-k3s-cluster&#34;&gt;Deploy k3s cluster&lt;/h1&gt;
&lt;p&gt;First step is to deploy the k8s cluster with &lt;a href=&#34;https://k3d.io/&#34;&gt;k3d&lt;/a&gt; - a wrapper to run k3s in docker. Start by creating a k3d config file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# k3d-istio.yaml&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;k3d.io/v1alpha2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Simple&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;istio&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;servers&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;agents&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;# for exposing Istio ingress on localhost&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;nodeFilters&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;loadbalancer&lt;/span&gt;
  - &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;8443&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;443&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;nodeFilters&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;loadbalancer&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;options&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;k3s&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;extraServerArgs&lt;/span&gt;:
      - --&lt;span style=&#34;color:#66d9ef&#34;&gt;no&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;deploy=traefik &lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# we will be using Istio ingress instead&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deploy the cluster with k3d&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;k3d cluster create --config k3d-istio.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the cluster has been deployed, configure &lt;code&gt;kubectl&lt;/code&gt; to use the newly created context &lt;code&gt;k3d-istio&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl config use-context k3d-istio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Verify cluster creation by running&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;deploy-sample-application&#34;&gt;Deploy sample application&lt;/h1&gt;
&lt;p&gt;Deploy the sample &lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/#deploying-the-application&#34;&gt;Bookinfo&lt;/a&gt; application so that we can observe the difference Istio brings&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl create ns bookinfo
kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.10/samples/bookinfo/platform/kube/bookinfo.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should see some pods created in the namespace&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get pods
NAME                              READY   STATUS    RESTARTS   AGE
details-v1-79f774bdb9-swd8j       1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          42m
ratings-v1-b6994bb9-vgx86         1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          42m
productpage-v1-6b746f74dc-wkd2r   1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          42m
reviews-v1-545db77b95-vcps9       1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          42m
reviews-v2-7bf8c9648f-4tscf       1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          42m
reviews-v3-84779c7bbc-tgxx7       1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          42m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To access the Bookinfo application, port forward the &lt;code&gt;productpage&lt;/code&gt; service to localhost:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl port-forward svc/productpage &lt;span style=&#34;color:#ae81ff&#34;&gt;9080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You should now be able to see the product page by browsing to &lt;a href=&#34;http://localhost:9080/productpage&#34;&gt;http://localhost:9080/productpage&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;install-istio&#34;&gt;Install Istio&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;This section is largely based on Istio&amp;rsquo;s &lt;a href=&#34;https://istio.io/latest/docs/setup/getting-started/&#34;&gt;quick start guide&lt;/a&gt; with some minor differences to how the application is accessed (due to k3s networking)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will be using &lt;code&gt;istioctl&lt;/code&gt; to install Istio in the cluster. See &lt;a href=&#34;https://istio.io/latest/docs/setup/install/&#34;&gt;Istio Installation Guides&lt;/a&gt; for alternative installation methods.&lt;/p&gt;
&lt;p&gt;Follow the instructions &lt;a href=&#34;https://istio.io/latest/docs/setup/getting-started/#download&#34;&gt;here&lt;/a&gt; to install the &lt;code&gt;istioctl&lt;/code&gt; binary. Verify that &lt;code&gt;istioctl&lt;/code&gt; has been installed by running &lt;code&gt;istioctl version&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;istioctl version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, install Istio with the &lt;code&gt;demo&lt;/code&gt; profile in the cluster&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;istioctl install --set profile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;demo -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;demo&lt;/code&gt; profile comes with all the Istio core components, and enables high levels of tracing and access logging. See &lt;a href=&#34;https://istio.io/latest/docs/setup/additional-setup/config-profiles/&#34;&gt;Istio Installation Configuration Profiles&lt;/a&gt; for more information on all supported configuration profiles.&lt;/p&gt;
&lt;p&gt;After a while, you should be able to see all Istio core components deployed in the &lt;code&gt;istio-system&lt;/code&gt; namespace&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl -n istio-system get all
NAME                                       READY   STATUS    RESTARTS   AGE
pod/istiod-568d797f55-j2z9p                1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          15m
pod/svclb-istio-ingressgateway-nvbs8       5/5     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          14m
pod/svclb-istio-ingressgateway-2r9xx       5/5     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          14m
pod/svclb-istio-ingressgateway-c62h4       5/5     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          14m
pod/istio-egressgateway-5547fcc8fc-cqnzs   1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          14m
pod/istio-ingressgateway-8f568d595-q4g96   1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          14m

NAME                           TYPE           CLUSTER-IP      EXTERNAL-IP                        PORT&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;S&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                                                      AGE
service/istiod                 ClusterIP      10.43.189.242   &amp;lt;none&amp;gt;                             15010/TCP,15012/TCP,443/TCP,15014/TCP                                        15m
service/istio-egressgateway    ClusterIP      10.43.162.21    &amp;lt;none&amp;gt;                             80/TCP,443/TCP
                                                      14m
service/istio-ingressgateway   LoadBalancer   10.43.59.75     172.22.0.2,172.22.0.3,172.22.0.4   15021:31379/TCP,80:30381/TCP,443:32247/TCP,31400:31774/TCP,15443:32131/TCP   14m

NAME                                        DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
daemonset.apps/svclb-istio-ingressgateway   &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;       &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;           &amp;lt;none&amp;gt;          14m

NAME                                   READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/istiod                 1/1     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           15m
deployment.apps/istio-egressgateway    1/1     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           14m
deployment.apps/istio-ingressgateway   1/1     &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;           14m

NAME                                             DESIRED   CURRENT   READY   AGE
replicaset.apps/istiod-568d797f55                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;       15m
replicaset.apps/istio-egressgateway-5547fcc8fc   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;       14m
replicaset.apps/istio-ingressgateway-8f568d595   &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;       14m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;enabling-istio-sidecar-injection&#34;&gt;Enabling Istio sidecar injection&lt;/h1&gt;
&lt;p&gt;Now that we have everything set up, let&amp;rsquo;s begin by enabling Istio in our application namespace &lt;code&gt;default&lt;/code&gt; by adding the label &lt;code&gt;istio-injection=enabled&lt;/code&gt; to the namespace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl label namespace default istio-injection&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;enabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point, there should be no changes to the bookinfo application (note the container count is still &lt;code&gt;1/1&lt;/code&gt; for all pods):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get pods
NAME                              READY   STATUS    RESTARTS   AGE
details-v1-79f774bdb9-swd8j       1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          56m
ratings-v1-b6994bb9-vgx86         1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          56m
productpage-v1-6b746f74dc-wkd2r   1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          56m
reviews-v1-545db77b95-vcps9       1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          56m
reviews-v2-7bf8c9648f-4tscf       1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          56m
reviews-v3-84779c7bbc-tgxx7       1/1     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          56m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To get the sidecar injected, we need to get the pods redeployed by deleting the existing ones with the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;kubectl get pods --no-headers | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; | xargs kubectl delete pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The pods should be redeployed with 2 containers in each of them&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get pods
NAME                              READY   STATUS    RESTARTS   AGE
reviews-v1-545db77b95-5c5z4       2/2     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          91s
ratings-v1-b6994bb9-v2mc4         2/2     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          91s
productpage-v1-6b746f74dc-wjkr5   2/2     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          91s
details-v1-79f774bdb9-fm7jd       2/2     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          91s
reviews-v2-7bf8c9648f-b9mrh       2/2     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          91s
reviews-v3-84779c7bbc-lvrwv       2/2     Running   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;          91s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;with the new container being the Istio sidecar proxy, as demonstrated in the following command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ kubectl get pods productpage-v1-6b746f74dc-wjkr5 -o jsonpath&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{range .spec.containers[*]}{.image}{&amp;#34;\n&amp;#34;}{end}&amp;#39;&lt;/span&gt;
docker.io/istio/examples-bookinfo-productpage-v1:1.16.2
docker.io/istio/proxyv2:1.10.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;security-hardening&#34;&gt;Security Hardening&lt;/h1&gt;
&lt;h2 id=&#34;mutual-tls&#34;&gt;Mutual TLS&lt;/h2&gt;
&lt;p&gt;By default, Istio configures the destination workloads using &lt;code&gt;PERMISSIVE&lt;/code&gt; mode, where a service can accept both plain text and mutual TLS traffic. To ensure all our cluster traffic is encrypted, we will change this to &lt;code&gt;STRICT&lt;/code&gt; mode.&lt;/p&gt;
&lt;p&gt;There are two spots to enforce this&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;By namespace&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl apply -n &amp;lt;namespace&amp;gt; -f - &amp;lt;&amp;lt;EOF
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: &amp;quot;default&amp;quot;
spec:
  mtls:
    mode: STRICT
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Globally - note the resource is applied in the &lt;code&gt;istio-system&lt;/code&gt; namespace.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl apply -n istio-system -f - &amp;lt;&amp;lt;EOF
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: &amp;quot;default&amp;quot;
spec:
  mtls:
    mode: STRICT
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;outbound-traffic-policy&#34;&gt;Outbound Traffic Policy&lt;/h2&gt;
&lt;p&gt;To ensure we have better control of traffic exiting the cluster to reach external services, we will be configuring the Istio &lt;code&gt;meshConfig.outboundTrafficPolicy.mode&lt;/code&gt; option to &lt;code&gt;REGISTRY_ONLY&lt;/code&gt;. This means that pods/sidecars in the cluster are only able to reach external services if they are first defined in Istio&amp;rsquo;s internal service registry (via &lt;a href=&#34;https://istio.io/latest/docs/reference/config/networking/service-entry/&#34;&gt;ServiceEntry&lt;/a&gt; definitions).&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;istioctl&lt;/code&gt; to enforce the policy&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;istioctl install --set profile=demo -y --set meshConfig.outboundTrafficPolicy.mode=REGISTRY_ONLY
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Verify the configuration is applied correctly&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ kubectl get istiooperator installed-state -n istio-system -o jsonpath=&#39;{.spec.meshConfig.outboundTrafficPolicy.mode}&#39;
REGISTRY_ONLY
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h1 id=&#34;next-steps&#34;&gt;Next steps&lt;/h1&gt;
&lt;p&gt;Now that we have a Kubernetes cluster with Istio installed, and a sample application with Istio sidecar injected, we should be ready to test out some Istio features in future articles.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Infrastructure | From load balancing to cloud native application services</title>
      <link>/posts/from-lb-to-cloud-native-application-services/</link>
      <pubDate>Tue, 20 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/from-lb-to-cloud-native-application-services/</guid>
      <description>The history of ADC, the future of Service Proxy, how do you understand the importance of ADC/Service Proxy in your infrastructure.</description>
      <content>&lt;h3 id=&#34;born-to-be-simpleload-balancing&#34;&gt;Born to be simple(Load Balancing)&lt;/h3&gt;
&lt;p&gt;In the 1990s, the rapid development of the Internet gave birth to a large number of online websites, and the number of Web visits increased rapidly. At that time, a simple appeal was how to improve the access speed and ability of Web sites.&lt;/p&gt;
&lt;p&gt;At that time, in the Six Arms bar on the slopes of downtown Seattle, several young people were here every night to enthusiastically discuss their entrepreneurial dreams. They were obsessed with human-computer interfaces and studied how to break through the limits of immersive virtual reality. . Michael Almquist was one of them. He found that the servers at the time could not meet their needs, so they studied the use of load balancing to help solve the problems they encountered.&lt;/p&gt;
&lt;p&gt;In 1996, F5 Labs was established in a dilapidated office on the fifth floor of the Seattle Tower. Michael Almquist was the founder. Such a technology was discovered by investors, bringing F5 Labs from the field of virtual reality technology to a world that helps to achieve trouble-free and efficient Internet communication.&lt;/p&gt;
&lt;p&gt;Alteon and Radware were also established in the same year as F5, but these two companies had stories with each other more than ten years later. Juniper was also established this year, and has had a consistent market with F5 in the following years.&lt;/p&gt;
&lt;p&gt;Before the Internet bubble burst, this field basically revolved around how to load balance and optimize Web sites. Therefore, in the early days, there will be the term &amp;ldquo;Web switch&amp;rdquo;. The basic idea is to achieve greater access capabilities by distributing connections to more different servers. When one server goes down, users can still access other available servers. The core technology is Load Balancing, and some Web optimization capabilities are added. The basic technical deployment patterns are as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;1.png&#34; alt=&#34;Load balancing&#34;&gt;&lt;/p&gt;
&lt;p&gt;In 1997, F5 released the BIG-IP product. The earliest name of BIG-IP is actually called BIG/IP, which is derived from the name TCP/IP. BIG expresses the meaning of a super IP representing many backing service IPs. In the same year that BIG-IP was released, a company called ArrowPoint was established, mainly for web optimization.&lt;/p&gt;
&lt;p&gt;In 1998, F5 released the 3DNS product. On Load Balancing, DNS has always been an original technology. 3DNS products expand the concept of space (source, target) and time (availability) on top of the basic technology of DNS polling and resolution, forming three dimensions (3D), which is also 3DNS The origin of the naming was later changed to Global Traffic Management (GTM). In recent years, it was also named DNS to express a complete and comprehensive enterprise DNS architecture. We can actually see the focus of the market direction at different stages from the name change. The use of smart DNS technology has helped to further enhance the Web access experience, allowing users to access the nearest available site in time. The technical concepts used in 3DNS are still widely used today, whether it is global traffic management or enterprise basic DNS. In the same year, the industry also established two companies, uRoam and Netscaler. One was later acquired by F5, and the other was a company in the same field of F5.&lt;/p&gt;
&lt;h3 id=&#34;success-in-adc&#34;&gt;Success in ADC&lt;/h3&gt;
&lt;p&gt;The Internet bubble reached its peak in 2000, and this year was also the year when the most relevant manufacturers in this field were established. Fineground, a web optimization, application acceleration and security vendor; application front-end optimization vendor Redline; WAN optimization vendor Peribit. Application security vendor Magnifire. At the same time Array was also established this year. If we look through the information, we will find that at this stage the market will have a lot of terms about products. In addition to the &amp;ldquo;Web switches&amp;rdquo; mentioned above, there are also &amp;ldquo;content switches&amp;rdquo;, four-layer switches, and seven-layer switches. Manufacturers of different technical backgrounds are engaged in a secret struggle.&lt;/p&gt;
&lt;p&gt;In 2001, the U.S. stock market plummeted and the Internet company bubble burst. The business model of simply relying on simple Load Balancing for Internet Web sites is no longer sustainable. Combing the acquisitions in this field from 2000 to 2005, we can see that the market has become complicated, with a large number of manufacturers established and a large number of manufacturers acquiring:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In 2000, Cisco acquired ArrowPoint, and Fineground, which was created in the same year, was also acquired by Cisco in 2005. Through this acquisition, Cisco finally completed the construction of its application content network (AON) technology products.&lt;/li&gt;
&lt;li&gt;In 2003, F5 acquired uRoam and built an APM module for SSL VPN and access identity and policy management.&lt;/li&gt;
&lt;li&gt;In 2004, F5 acquired Magnifire to build WAF product capabilities. That is, the current Advance WAF module.&lt;/li&gt;
&lt;li&gt;In 2005, F5 acquired Swan Labs to enrich the capabilities of WAN acceleration, the later WOM module.&lt;/li&gt;
&lt;li&gt;In 2005, Citrix acquired Netscaler, which became its later application delivery product.&lt;/li&gt;
&lt;li&gt;In 2005, Juniper built its application-oriented product line through the acquisition of Peribit and Redline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And behind this frenzy, a standardized market area is being shaped. It can be seen from the acquisition technology direction of the above-mentioned vendors that the technology trend at the time was relatively clear, and the market was focusing on how to access applications faster and more securely, and to ensure that the applications were available for construction.&lt;/p&gt;
&lt;p&gt;In 2003, Gartner defined the Application Delivery Controller (ADC) concept for the first time. In the early days, the definition of ADC was still mainly a combination of load balancing technology and offloading technology, and it was Web-oriented. The latest definition is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Application Delivery Controller (ADC) is deployed in the data center and optimizes application performance, security, and resource efficiency by offloading servers, providing in-depth payload inspection, and making full use of complex protocols. They were originally deployed for external-facing Web applications and are now used to provide services for many types of business applications and protocols.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It can be seen that later ADC products are more oriented towards the processing of complex applications in enterprises. This is why there are arguments that ADC should become a platform, which has attributes similar to middleware to help companies better deliver applications.&lt;/p&gt;
&lt;p&gt;The stock market crash caused companies in this field to consider shifting technology application scenarios from Internet Web sites to enterprise applications. 2002 was the most critical year for F5. This year, F5 established TMOS (Traffic Management Operating System) as the foundation of BIG-IP. This real-time event-driven traffic operating system established F5&amp;rsquo;s leading position in the application delivery network (ADN) field. The three consecutive acquisitions in 2003, 2004, and 2005 helped quickly form a complete ADC product line.&lt;/p&gt;
&lt;p&gt;The TMOS V9 version was released in 2004, bringing the market into a new development track. In mid-2005, Gartner announced that F5 had achieved the highest ADC market share.&lt;/p&gt;
&lt;p&gt;2006 is a sign of the maturity of the ADC market. The ADC technology represented by F5 has formed a de facto standard in the field. The products have formed a wealth of connection management, protocol control, SSL offloading, Web compression and optimization, traffic shaping, DoS protection, Web security, IPv6, link load, GSLB, etc. Application delivery capabilities. The technical architecture deployment is basically similar to the following figure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Consolidating a mature market is not an easy task. It requires continuous investment in technology research and development to ensure competitiveness in the industry. The period from 2006 to 2008 was a period of very high growth in F5 R&amp;amp;D investment in history. Although it was during the global economic crisis, the quarter-on-year growth of R&amp;amp;D investment remained between 30%-40%.&lt;/p&gt;
&lt;p&gt;At this time, several large companies in the same field are disproportionate in their R&amp;amp;D investment and market revenue. Whether it is due to lack of investment or technical route issues, they eventually withdraw from the market due to lack of technical competitiveness.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Juniper abandoned its DX product line in 2008 and announced its withdrawal&lt;/li&gt;
&lt;li&gt;Nortel ended in 2009, Radware acquired Alteon assets&lt;/li&gt;
&lt;li&gt;In 2010, Cisco stopped selling AON and ACE XML gateway products&lt;/li&gt;
&lt;li&gt;In 2012, Cisco officially stopped ACE research and development&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The failure cases of Nortel, Cisco, and Juniper fully illustrate that the ADC field is a high-tech market. It requires continuous technological accumulation and continuous technological breakthroughs. For a long time, F5&amp;rsquo;s annual R&amp;amp;D investment accounts for approximately 17%-18% of its revenue, which is higher than the 15.7% average of the software and Internet industries. The annual R&amp;amp;D investment is close to 5 times the revenue of the F5 Chinese market in the same year. Continuous high R&amp;amp;D investment has ensured F5&amp;rsquo;s leading position in technology in the industry.&lt;/p&gt;
&lt;p&gt;It is precisely because of the maturity of ADC products that around 2009, the market once made the argument that Load Balancing was dead to emphasize that companies should attach importance to the capabilities of ADC products. F5 ADC products have rich application-oriented capabilities, such as rich and in-depth protocol control, event-based programmable architecture, connection-oriented refined management, high dynamic configuration without reload, comprehensive automation and API interfaces, and rich The observable ability. Enterprises can fully open up these capabilities and provide them to application teams and middleware teams.&lt;/p&gt;
&lt;p&gt;At this stage of the rapid development of ADC products, another field is also constantly developing, which is the soft load field represented by NGINX and HAproxy.&lt;/p&gt;
&lt;p&gt;NGINX began to develop in September 2004, and HAproxy began to develop in December 2005. The origins of these two products are similar to those of F5, and they are both developed for the actual needs of their own business. NGINX is to solve the high concurrency problem of the website, and HAproxy is to solve the problem of application session retention of the author&amp;rsquo;s own security company. Eventually evolved into today&amp;rsquo;s typical reverse proxy software.&lt;/p&gt;
&lt;p&gt;In terms of time, since ADC hardware products were established in 2003, soft load products have developed together with hardware ADC products. The use of soft load by cloud and top Internet companies has accelerated the application of soft load product scenarios, exposing it to the public and being understood by more people. Whether it is LVS, Tengine, Openresty, ELB, etc.&lt;/p&gt;
&lt;p&gt;2016 is the inflection point of the enterprise market&amp;rsquo;s perception of soft load. With the further development of enterprises&#39; digital transformation, DevOps, dual-mode IT, elastic architecture, and enterprise private cloud, soft loads have begun to be widely mentioned and applied.&lt;/p&gt;
&lt;p&gt;Based on the understanding of the soft load market, F5 has released the Virtual Edition (VE) of TMOS since 2009, actively building the cloud initialization capabilities of related products, strengthening the ecological construction of DevOps tools such as Ansible/Terraform modules, etc., open command and statement -Style interface to achieve more Gitops capabilities. These capabilities allow companies to deploy F5 VE soft ADC products faster and better to meet business needs. There is an interesting number. F5 has deployed 50,000 sets of hardware devices in China in 19 years, with an average of more than 2,600 units per year. During the 2020 Spring Festival epidemic alone, it quickly helped users deploy 3000 sets of software ADCs. The advantages of easy deployment of soft loads have been greatly brought into play.&lt;/p&gt;
&lt;p&gt;Subsequently, in 2019, F5 acquired NGINX to further strengthen the soft load market.&lt;/p&gt;
&lt;h3 id=&#34;back-to-simple--service-proxy&#34;&gt;Back to Simple- Service Proxy&lt;/h3&gt;
&lt;p&gt;With the development of application architecture, applications are transforming from traditional monolithic applications to distributed or microservices. Whether it is a distributed or microservice architecture, its core is to split multiple services of an application to form a relatively independent service unit. The direct result of the split is that an additional mechanism is needed to ensure that these independent work units can coordinate and unified work, which is inseparable from distributed computing, storage, messaging, and so on. When these independent service units need to communicate with each other, it is necessary to think about how to make these services that communicate through the network more reliable, safer, and more optimized. This is what the field of application delivery is concerned about, but it has changed from user-oriented and network-oriented to service-oriented. We call it Service Proxy.&lt;/p&gt;
&lt;p&gt;Access gateways in distributed systems or API gateways for microservices are typical ADC requirements, such as identity recognition, SSL offloading, content routing, application security, current and speed limiting, DDOS, etc. These scenarios have been driven by developers for a long time. Due to the characteristics of the software, it is easier for developers to access software products like NGINX. This is a typical change in user roles compared to traditional ADC products.&lt;/p&gt;
&lt;p&gt;In environments such as microservices and cloud natives, the communication interface between services is simpler and more unified, which makes the technical requirements for reverse proxy software simpler, and no longer need such a complex and rich special protocol support , No longer need complex network technical characteristics requirements. What is needed is for soft load products to have more dynamic configuration, which can be linked with the registration center and configuration center to realize the discovery of services and the introduction of strategies. The products need to be lightweight and easy to deploy and suitable for virtual machines, containers, etc. The use of these scenarios requires fast enough performance, sufficient observable data, and sufficient flexible deployment capabilities.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(Under cloud native, it is difficult to directly see a concrete load balancer)&lt;/p&gt;
&lt;p&gt;Around 2017, with the development of cloud native, Service Proxy began to appear in large numbers. There are endless products around Ingress Controller, Sidecar, API Gateway, such as Linkerd, Envoy, Gloo, Mosn and so on. From traditional ADC to today&amp;rsquo;s service-centric modern lightweight decoupled Service Proxy, the technology is returning to a simple Web-oriented load balancing era, client-side load balancing or server-side load balancing.&lt;/p&gt;
&lt;p&gt;At the end of 2017, F5 launched Aspen Mesh, a commercial service mesh solution product based on Istio. Help users use service grid technology more reliably.&lt;/p&gt;
&lt;p&gt;In 2019, F5 acquired NGINX. Based on NGINX to create modern application API gateway, K8S Ingress Controller, cloud native application protection, NGINX service grid and other product solutions.&lt;/p&gt;
&lt;p&gt;In 2021, F5 acquired the start-up Volterra. Help enterprises realize multi-cloud and edge application management based on K8S technology.&lt;/p&gt;
&lt;p&gt;The launch of these products allows F5 to quickly cover the three directions of cloud-native Service Proxy development.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(Three directions of Service Proxy development under cloud native)&lt;/p&gt;
&lt;h3 id=&#34;facing-the-current--enterprise-cloud-native-application-service&#34;&gt;Facing the current- Enterprise Cloud Native Application Service&lt;/h3&gt;
&lt;p&gt;When we return to the actual situation of the enterprise and use a picture to express the changes in this related field, we can see that the deployment position of products in the related field is constantly improving, from basic network hardware to a cloud environment. The service component has become a logical resource object in the cloud native environment. From visible and tangible to visible and intangible, from visible and intangible to invisible and intangible. Enterprises should pay full attention to the selection of soft load products that can cover all scenarios to ensure that they can evolve their enterprise application architecture under unified technology and professional services to avoid technical risks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(Load balancing, an ever-increasing position)&lt;/p&gt;
&lt;p&gt;Cloud native architecture is the future direction of enterprises, but the cloud native architecture of enterprises will not be achieved overnight. It must evolve slowly on top of the company&amp;rsquo;s existing IT infrastructure. In such an evolutionary process, the cloud native environment that the company is building needs to use the company&amp;rsquo;s existing infrastructure. The existing infrastructure of the enterprise must also be changed to the cloud-native environment, and the two need to be integrated with each other.&lt;/p&gt;
&lt;p&gt;This is true for infrastructure and so are people. With the improvement of enterprise platform-based capabilities, we can clearly see that I&amp;amp;O personnel are becoming the main force of future data center technology innovation. The leading role personnel in this field have changed from network personnel to developers, and ultimately to platform personnel.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It can be seen that from 1996 to 2006, and then to 2016. Every 10 years of changes in the application delivery field have echoed the changes in market demand and are in line with the changes in application architecture. From simple Web load balancing to complex enterprise application delivery, from monolithic applications to distributed, microservice architecture. The target audience also ranges from network personnel to application personnel to today&amp;rsquo;s platform and infrastructure personnel. Whether it is the complexity of ADC functions or the simplicity and efficiency of Service Proxy, products in the application delivery field have become the most important infrastructure components for enterprises.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Kubernetes | ELI5: Kubernetes Custom Resources</title>
      <link>/posts/eli5-kubernetes-custom-resources/</link>
      <pubDate>Sun, 18 Jul 2021 14:50:02 +1000</pubDate>
      
      <guid>/posts/eli5-kubernetes-custom-resources/</guid>
      <description>In this article, I will be using the process of building a house as an example to explain how Kubernetes Custom Resources work.
 Imagine building a custom home, which is a highly detailed and laborious work, that you decided to just hire a home builder. The builder gives you a form to fill out details such as:
 how many rooms do you need and what size should they be?</description>
      <content>&lt;p&gt;In this article, I will be using the process of building a house as an example to explain how Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34;&gt;Custom Resources&lt;/a&gt; work.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Imagine building a custom home, which is a highly detailed and laborious work, that you decided to just hire a home builder. The builder gives you a form to fill out details such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;how many rooms do you need and what size should they be?&lt;/li&gt;
&lt;li&gt;do you want a garage that fits 1, 2 or 3 cars?&lt;/li&gt;
&lt;li&gt;would you like a swimming pool?&lt;/li&gt;
&lt;li&gt;do you want the utilities connected when you move in?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You fill in the form, specifying the details of your dream home, and hand it over to the builder. Months go by, and voila, the house is completed, ready for you to move in. The builder even offers services to ensure any repairs are covered throughout the occupancy period, and the pool is cleaned regularly!&lt;/p&gt;
&lt;p&gt;3 months down, after settling in with all the furniture, you now want a beautiful backyard to go with it. Not a problem, send an updated copy of the form you submitted earlier to include landscaping, and the builder hires some landscapers to build you your garden.&lt;/p&gt;
&lt;p&gt;You like the house so much that, 6 years down the road, you fill in another form to get another house built, this time with more room for your growing family, and the builder&amp;rsquo;s done it again!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s now translate the example above into Kubernetes terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A house consists of many smaller, more fundamental components (walls, bricks, doors, swimming pool etc) which are analogous to the &lt;strong&gt;standard resources in Kubernetes - pods, services, persistent volumes etc&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Building a house is a complex process, and that&amp;rsquo;s when it is handy to get someone to do all the work for you, in this case the builder, which acts as a &lt;strong&gt;Custom Controller&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The form provided by the builder is the &lt;strong&gt;Custom Resource Definition (CRD)&lt;/strong&gt;, which defines a template or constraints the builder supports for the houses it builds. And submitting the forms back to the builder with your preferences on how the houses should look is like declaring instances of &lt;strong&gt;Custom Resources&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The builder/&lt;strong&gt;customer controller&lt;/strong&gt; then handles all the nitty gritty details of setting up the houses/&lt;strong&gt;custom resources&lt;/strong&gt;, as well as making sure any modifications are correctly applied to them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Often, applications are complex mix of resources, which makes it difficult for end users to manage them without deep understanding of how the resources work together. To lower the the barrier of entry, software vendors provide &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&#34;&gt;Operators&lt;/a&gt; which comprises of custom controllers and CRDs, allowing users to manage the applications in a declarative manner. The controllers, written by the vendors, then do the hard work of getting the application to a desired state.&lt;/p&gt;
&lt;p&gt;Hopefully the example above helps you visualize how custom resources are used. If you are interested to build your own CRDs and custom controllers, the following resources are good starting points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/&#34;&gt;CRD examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/sample-controller&#34;&gt;Sample controller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Kubernetes | Small Containers for fun </title>
      <link>/posts/kubernetes/smallest-container-ever/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/posts/kubernetes/smallest-container-ever/</guid>
      <description>Intro I have a side hobby where I try to create minimal container images. There are a number of reasons for this, but the primary one is because I&amp;rsquo;m a complete geek.
Other reasons include:
 It&amp;rsquo;s a neatness thing There&amp;rsquo;s an engineering imperative in me to be minimalist I don&amp;rsquo;t like waste The process of creation helps me understand the technology a little better Smaller images are great for testing at scale  Why The why I do this is mainly because it&amp;rsquo;s a hobby, but in this case, I started the ultra minimal container image build because someone I work with wanted to build a container for testing Istio latency at scale.</description>
      <content>&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;
&lt;p&gt;I have a side hobby where I try to create minimal container images.
There are a number of reasons for this, but the primary one is because I&amp;rsquo;m a complete geek.&lt;/p&gt;
&lt;p&gt;Other reasons include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s a neatness thing&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s an engineering imperative in me to be minimalist&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t like waste&lt;/li&gt;
&lt;li&gt;The process of creation helps me understand the technology a little better&lt;/li&gt;
&lt;li&gt;Smaller images are great for testing at scale&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why&#34;&gt;Why&lt;/h2&gt;
&lt;p&gt;The why I do this is mainly because it&amp;rsquo;s a hobby, but in this case, I started the ultra minimal container image build
because someone I work with wanted to build a container for testing Istio latency at scale. He needed a container image that was ultimately small, so that he could spin up in his words &amp;lsquo;about 10,000&amp;rsquo; at once. The other goal was to minimise any application response time so that he could test Istio rather than the application behind Istio.&lt;/p&gt;
&lt;h2 id=&#34;building-a-minimal-image&#34;&gt;Building a minimal image&lt;/h2&gt;
&lt;p&gt;Building a minimal image is easy, and I&amp;rsquo;ve spoken about it before at Container Camp, and you can see the &lt;a href=&#34;https://www.youtube.com/watch?v=SWwd4uTVeF0&#34;&gt;video&lt;/a&gt; if you like.&lt;/p&gt;
&lt;p&gt;What I have realised is that there are two parts to building a minimal image:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using SCRATCH and only including your application in your image.&lt;/li&gt;
&lt;li&gt;Statically linking your binary - but doing so in a super strict and optimised way.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I spoke at Container Camp a few years ago, I only used default options during my compile. I have since realised that I can go even smaller by optimising my compiler options!&lt;/p&gt;
&lt;h2 id=&#34;the-code&#34;&gt;The Code&lt;/h2&gt;
&lt;p&gt;This is the easy part.&lt;/p&gt;
&lt;p&gt;I needed an &amp;ldquo;application&amp;rdquo; that didn&amp;rsquo;t introduce any latency at all so that my colleague could perform Istio testing. I decided to go as minimal as possible and create an &amp;ldquo;application&amp;rdquo; that actually doesn&amp;rsquo;t do anything.&lt;/p&gt;
&lt;p&gt;In order for the application to work within a containerised environment, it needs to continue to run, and never exit. If the application ever exits, the container will stop running.&lt;/p&gt;
&lt;p&gt;C is my chosen language of choice today, and I created the following application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;) { 
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; pause();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This tiny little code block does a single thing - it pauses the thread until a signal is received.&lt;/p&gt;
&lt;p&gt;In container terms, this means the container will run, and will wait for a valid signal, and then honour that signal. This is the perfect behaviour for container testing. The &amp;ldquo;application&amp;rdquo; in the container doesn&amp;rsquo;t do anything, so doesn&amp;rsquo;t add any latency to the transaction, and is perfect for testing.&lt;/p&gt;
&lt;h2 id=&#34;the-compilation&#34;&gt;The compilation&lt;/h2&gt;
&lt;p&gt;In order to meet my goal of making a really small container image, I need to compile the code. I need to compile the code in such a way that the code does not require external libraries. That is, the code is &lt;strong&gt;statically linked&lt;/strong&gt;. The second thing to make the application smaller is to compile the code using compiler options that strip out everything that is extraneous.&lt;/p&gt;
&lt;h3 id=&#34;linking&#34;&gt;Linking&lt;/h3&gt;
&lt;p&gt;There are generally two types on linking when compiling code, and it&amp;rsquo;s relevant for containers.&lt;/p&gt;
&lt;h4 id=&#34;dynamic-linking&#34;&gt;Dynamic Linking&lt;/h4&gt;
&lt;p&gt;When using dynamic linking, shared libraries within the operatig system are used. This has a good side benefit of making the executable smaller (typically). The rationale behind dynamic linking is that when you are running multiple applications on a single operating system, it is possible for multiple applications to use common shared libraries. This makes each individual application smaller.o&lt;/p&gt;
&lt;p&gt;The code snippet below creates a dynamically linked binary from my C code above. I&amp;rsquo;ve named the application &amp;ldquo;pausle&amp;rdquo; because all it does is &amp;ldquo;pause&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# gcc pausle.c -o pausle-dynamic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I use the &lt;strong&gt;ldd&lt;/strong&gt; command to see the dynamically linked libraries as part of my binary, you can see that there are three shared libraries used by the &lt;strong&gt;pausle-dynamic&lt;/strong&gt; application.:1&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ldd pausle-dynamic&lt;/span&gt;
        linux-vdso.so.1 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007ffc93da0000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; /lib64/libc.so.6 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f32a782c000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
        /lib64/ld-linux-x86-64.so.2 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;0x00007f32a7a06000&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we can see that the size of the dynamically linked binary is 25K.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ls -lh pausle-dynamic&lt;/span&gt;
-rwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root 25K Jul  &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; 21:48 pausle-dynamic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One would imagine that this is a very small application.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s dynamically linked - &lt;strong&gt;should&lt;/strong&gt; be smaller&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not doing anything, and is minimal anyway&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What if I were to tell you that we could reduce the size of this application by 60%?&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;compiler-options&#34;&gt;Compiler Options&lt;/h3&gt;
&lt;p&gt;What I realised is that if I &lt;strong&gt;aggressively&lt;/strong&gt; tune my compiler options, I can go even smaller again.
Using the compiler options below I can compile my code to the smallest possible statically linked binary that I can.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;gcc  -Os -fdata-sections -ffunction-sections -fipa-pta  -Wl,--gc-sections -Wl,-O1 -Wl,--as-needed -Wl,--strip-all paus
le.c -o pausle-dynamic-aggressive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ls -lh pausle-dynamic-aggressive&lt;/span&gt;
-rwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root 15K Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; 20:34 pausle-dynamic-aggressive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just by using agressive compiler options, the size of the code is smaller again.&lt;/p&gt;
&lt;h4 id=&#34;static-linking&#34;&gt;Static Linking&lt;/h4&gt;
&lt;p&gt;Static linking is where I include all of the libraries for the executable &amp;ldquo;inside&amp;rdquo; the binary itself. This is useful when operating inside a container as it removes the need to have shared libraries (and hence an entire operating system). This in theory should make the entire container image smaller, even if the size of the binary is slightly larger.&lt;/p&gt;
&lt;p&gt;To statically link the binary, I pass the -static option to the compiler.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;gcc -Os -s -static -ffunction-sections -fipa-pta  -Wl,--gc-sections pausle.c -o pausle-static
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This creates a slightly larger binary size&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ls -lh pausle-static&lt;/span&gt;
-rwxr-xr-x. &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; root root 708K Aug  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; 20:38 pausle-static
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;WOAH&lt;/strong&gt; 708K.&lt;/p&gt;
&lt;p&gt;If I look at the linking using ldd again, I get the following message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# ldd pausle-static&lt;/span&gt;
        not a dynamic executable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means that all of my libraries are included in the binary itself.&lt;/p&gt;
&lt;h2 id=&#34;building-containers&#34;&gt;Building containers&lt;/h2&gt;
&lt;p&gt;In order to build containers, I&amp;rsquo;m going to use the dockerfile format, it&amp;rsquo;s simple and is mostly uderstood.&lt;/p&gt;
&lt;p&gt;I use the following file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;FROM registry.fedoraproject.org/fedora-minimal

ADD pausle-dynamic /
CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/pausle-dynamic&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;m using a minimal fedora image here to build out my container image.
I add my dynamically linked binary into my image as a layer.&lt;/p&gt;
&lt;p&gt;I can build this using the following command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# podman build --tag=pausle-dynamic .&lt;/span&gt;
STEP 1: FROM registry.fedoraproject.org/fedora-minimal
Getting image source signatures
Copying blob 033c7516884e &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
Copying config 241281a93a &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
Writing manifest to image destination
Storing signatures
STEP 2: ADD pausle-dynamic /
--&amp;gt; 54ab00ee58c
STEP 3: CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/pausle-dynamic&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
STEP 4: COMMIT pausle-dynamic
--&amp;gt; 96800d278c6
96800d278c61d69101791d416fd139a3e70afff2033063354c08307fa2eb118c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This builds me a container that we can see below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# podman images&lt;/span&gt;
REPOSITORY                                   TAG           IMAGE ID      CREATED         SIZE
localhost/pausle-dynamic                     latest        96800d278c61  &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt; seconds ago  &lt;span style=&#34;color:#ae81ff&#34;&gt;119&lt;/span&gt; MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This comes out to 119MB - remember that the original binary was only 25K in size!&lt;/p&gt;
&lt;h3 id=&#34;using-scratch&#34;&gt;Using Scratch&lt;/h3&gt;
&lt;p&gt;Using the SCRATCH keyword, I can create a container that only has the required binary inside it.
It&amp;rsquo;s still a container, but doesn&amp;rsquo;t have any of the ancilliary &amp;ldquo;operating system&amp;rdquo; requirements.
It doesn&amp;rsquo;t have shared libraries, nor does it have any operating system tooling that you may expect to find.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;FROM scratch

ADD pausle-static /
CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/pausle-static&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I need to add my statically compiled binary here because there are no shared libraries available for a dynamically linked library to use.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s build this out.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# podman build --tag=pausle-static .&lt;/span&gt;
STEP 1: FROM scratch
STEP 2: ADD pausle-static /
--&amp;gt; 87ee8170167
STEP 3: CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/pausle-static&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
STEP 4: COMMIT pausle-static
--&amp;gt; d6e9daeb1ce
d6e9daeb1ce4211e3f04dd535494a3e78228c3642d22d350d6e9d4f2241e5861
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I check my container image sizes we see the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@fedora&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# podman images&lt;/span&gt;
REPOSITORY                                   TAG           IMAGE ID      CREATED        SIZE
localhost/pausle-static                      latest        d6e9daeb1ce4  &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; seconds ago  &lt;span style=&#34;color:#ae81ff&#34;&gt;727&lt;/span&gt; kB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will notice that this container is only 727KB in size.
It doesn&amp;rsquo;t have anything inside it EXCEPT the binary or the application that I&amp;rsquo;m going to run.&lt;/p&gt;
&lt;p&gt;In this way, I can build very small and minimal container images.
Even though my initial binary size is larger when I statically compile, it much reduces the overall size of my container image.&lt;/p&gt;
&lt;h3 id=&#34;other-benefits&#34;&gt;Other Benefits&lt;/h3&gt;
&lt;p&gt;Other benefits are that only having a single binary inside your container reduces the attack surface that&amp;rsquo;s available from a security perspective. There are no dependencies that need to be individually lifecycle managed, and no real provenance in terms of ancialliary tooling inside the container.&lt;/p&gt;
&lt;p&gt;The boot time of my container is much reduced because it&amp;rsquo;s smaller - this is a good thing.&lt;/p&gt;
&lt;p&gt;Next up I&amp;rsquo;ll talk a little about telemetry and how this can be included in your application stacks while keeping a minimal container footprint.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Automation | Learning Terraform S3 Backend</title>
      <link>/posts/learning-terraform-s3-backend/</link>
      <pubDate>Fri, 11 Jun 2021 14:52:29 +1000</pubDate>
      
      <guid>/posts/learning-terraform-s3-backend/</guid>
      <description>I have had basic experience playing with Terraform to instantiate resources in Kubernetes and AWS, but my previous attempts left me with a thought, how do I implement this at work and scale it up to the team?
Terraform creates a local state file which seems like a pain to share around a team. This is when I found out about remote backends. And this is my attempt to learn Terraform S3 backend.</description>
      <content>&lt;p&gt;I have had basic experience playing with Terraform to instantiate resources in Kubernetes and AWS, but my previous attempts left me with a thought, how do I implement this at work and scale it up to the team?&lt;/p&gt;
&lt;p&gt;Terraform creates a local state file which seems like a pain to share around a team. This is when I found out about remote backends. And this is my attempt to learn &lt;a href=&#34;https://www.terraform.io/docs/language/settings/backends/s3.html&#34;&gt;Terraform S3 backend&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;
&lt;p&gt;Terraform S3 backend stores the state file in an AWS S3 bucket, and if required, uses DynamoDB to manage state locking (highly recommended when working in a team).&lt;/p&gt;
&lt;p&gt;So&amp;hellip; to manage infrastructure using Terraform, I first need to deploy the supporting infrastructure 😅&lt;/p&gt;
&lt;p&gt;🐔 and 🥚 problem much?&lt;/p&gt;
&lt;p&gt;There are guides online to perform this setup using Terraform, but I&amp;rsquo;ll keep it simple for now and do it manually through AWS console.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create an S3 bucket&lt;/li&gt;
&lt;li&gt;Create DynamoDB table&lt;/li&gt;
&lt;li&gt;Create a role with policy to interact with S3 and DynamoDB (I called it &lt;code&gt;terraform-backend-role&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
    &amp;quot;Statement&amp;quot;: [
        {
            &amp;quot;Sid&amp;quot;: &amp;quot;VisualEditor0&amp;quot;,
            &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
            &amp;quot;Action&amp;quot;: [
                &amp;quot;s3:PutObject&amp;quot;,
                &amp;quot;s3:GetObject&amp;quot;,
                &amp;quot;dynamodb:PutItem&amp;quot;,
                &amp;quot;dynamodb:DeleteItem&amp;quot;,
                &amp;quot;dynamodb:GetItem&amp;quot;,
                &amp;quot;s3:ListBucket&amp;quot;
            ],
            &amp;quot;Resource&amp;quot;: [
                &amp;quot;arn:aws:dynamodb:ap-southeast-2:&amp;lt;account ID&amp;gt;:table/TerraformLocks&amp;quot;,
                &amp;quot;arn:aws:s3:::ls-terraform-bucket/terraform.tfstate&amp;quot;,
                &amp;quot;arn:aws:s3:::ls-terraform-bucket&amp;quot;
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Give the IAM user the appropriate policy to assume the role above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With all that done, we should be good to go.&lt;/p&gt;
&lt;h1 id=&#34;using-terraform&#34;&gt;Using Terraform&lt;/h1&gt;
&lt;p&gt;I will be using the &lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/aws/latest/docs&#34;&gt;AWS provider&lt;/a&gt; to create the EC2 instance.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# main.tf
terraform {
  backend &amp;quot;s3&amp;quot; {
    bucket = &amp;quot;ls-terraform-bucket&amp;quot;
    key = &amp;quot;terraform.tfstate&amp;quot;
    region = &amp;quot;ap-southeast-2&amp;quot;
    encrypt = true

    dynamodb_table = &amp;quot;TerraformLocks&amp;quot;

    role_arn = &amp;quot;arn:aws:iam::&amp;lt;account_id&amp;gt;:role/terraform-backend-role&amp;quot;
  }
}

provider &amp;quot;aws&amp;quot; {
  region = &amp;quot;ap-southeast-2&amp;quot;
}

resource &amp;quot;aws_instance&amp;quot; &amp;quot;terraform-test&amp;quot; {
  ami = &amp;quot;ami-0186908e2fdeea8f3&amp;quot;
  instance_type = &amp;quot;t3.micro&amp;quot;
  availability_zone = &amp;quot;ap-southeast-2a&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To run Terraform apply, I need to provide it with my AWS authentication details, which I do by exporting the &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; environment variables.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ export AWS_ACCESS_KEY_ID=&amp;quot;anaccesskey&amp;quot;
$ export AWS_SECRET_ACCESS_KEY=&amp;quot;asecretkey&amp;quot;
$ terraform plan
$ terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I quickly ran into permission errors, but the error message isn&amp;rsquo;t great.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;╷
│ Error: Error launching source instance: UnauthorizedOperation: You are not authorized to perform this operation. Encoded authorization failure message: &amp;lt;encoded error message&amp;gt;
│       status code: 403, request id: cc586b96-11b7-4a68-a54c-24bf4bce5419
│
│   with aws_instance.terraform-test,
│   on main.tf line 21, in resource &amp;quot;aws_instance&amp;quot; &amp;quot;terraform-test&amp;quot;:
│   21: resource &amp;quot;aws_instance&amp;quot; &amp;quot;terraform-test&amp;quot; {
│
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Enabling debug logs when running &lt;code&gt;terraform apply&lt;/code&gt; didn&amp;rsquo;t reveal anything useful for this particular error either&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ TF_LOG=DEBUG terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A quick Google shows that I can use AWS CLI to &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/sts/decode-authorization-message.html&#34;&gt;decode the error message&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ aws sts decode-authorization-message --encoded-message &amp;lt;encoded error message&amp;gt; --query DecodedMessage --output text | jq .
{
  &amp;quot;allowed&amp;quot;: false,
  ...
  &amp;quot;context&amp;quot;: {
    &amp;quot;action&amp;quot;: &amp;quot;ec2:RunInstances&amp;quot;,
    &amp;quot;resource&amp;quot;: &amp;quot;arn:aws:ec2:ap-southeast-2:&amp;lt;account ID&amp;gt;:instance/*&amp;quot;,
    ...
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;which tells me that I don&amp;rsquo;t have permission to create an EC2 instance. Of course! Permission to actually perform what I want to do on AWS! I created the necessary role and policy to interact with EC2 (I called it &lt;code&gt;test-project&lt;/code&gt;, and gave my IAM user permission to assume the role. Once that&amp;rsquo;s been done, I added the &lt;code&gt;assume_role&lt;/code&gt; attribute to the AWS provider&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# main.tf
terraform {
  backend &amp;quot;s3&amp;quot; {
    bucket = &amp;quot;ls-terraform-bucket&amp;quot;
    key = &amp;quot;terraform.tfstate&amp;quot;
    region = &amp;quot;ap-southeast-2&amp;quot;
    encrypt = true

    dynamodb_table = &amp;quot;TerraformLocks&amp;quot;

    role_arn = &amp;quot;arn:aws:iam::&amp;lt;account_id&amp;gt;:role/terraform-backend-role&amp;quot;
  }
}

provider &amp;quot;aws&amp;quot; {
  assume_role {
    role_arn = &amp;quot;arn:aws:iam::&amp;lt;account_id&amp;gt;:role/test-project&amp;quot;
  }
  region = &amp;quot;ap-southeast-2&amp;quot;
}

resource &amp;quot;aws_instance&amp;quot; &amp;quot;terraform-test&amp;quot; {
  ami = &amp;quot;ami-0186908e2fdeea8f3&amp;quot;
  instance_type = &amp;quot;t3.micro&amp;quot;
  availability_zone = &amp;quot;ap-southeast-2a&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With that, &lt;code&gt;terraform apply&lt;/code&gt; was able to run successfully and created the EC2 instance&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ terraform apply

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_instance.terraform-test will be created
  + resource &amp;quot;aws_instance&amp;quot; &amp;quot;terraform-test&amp;quot; {
      + ami                                  = &amp;quot;ami-0186908e2fdeea8f3&amp;quot;
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = &amp;quot;ap-southeast-2a&amp;quot;
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = &amp;quot;t3.micro&amp;quot;
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + &amp;quot;Name&amp;quot; = &amp;quot;Terraform EC2&amp;quot;
        }
      + tags_all                             = {
          + &amp;quot;Name&amp;quot; = &amp;quot;Terraform EC2&amp;quot;
        }
      + tenancy                              = (known after apply)
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

Plan: 1 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only &#39;yes&#39; will be accepted to approve.

  Enter a value: yes

aws_instance.terraform-test: Creating...
aws_instance.terraform-test: Still creating... [10s elapsed]
aws_instance.terraform-test: Creation complete after 13s [id=i-05e44bf5cfbb98977]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;With that, I am now able to use Terraform with the state tracked remotely. Along with state locking, multiple people in the team can access the same state file safely, as long as their IAM users have the correct permission to assume the role to read/write to S3 and DynamoDB.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Istio | The role of Istio Gateway port definition</title>
      <link>/posts/istio-ingressgateay-port-relationship/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/istio-ingressgateay-port-relationship/</guid>
      <description>Dont set wrong port in Gateway.</description>
      <content>&lt;p&gt;The port and protocol in the Gateway resource define the listener port and protocol in ingressgateway (envoy).&lt;/p&gt;
&lt;p&gt;However, the port in Gateway can be set to the port or targetPort of the ingressgateway svc, and finally the targetPort is used in envoy.&lt;/p&gt;
&lt;p&gt;For example below, the port is defined as 443 in Gateway:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  namespace: istio-bookinfo
  name: bookinfo-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 8080  
      name: http
      protocol: HTTP 
    hosts:
    - &amp;quot;*&amp;quot;
  - port:
      number: 443 #####use for assembling the route name that under the listener
      name: https #####use for assembling the route name that under the listener
      protocol: HTTPS #####use for assembling the route name that under the listener
    tls:
      mode: SIMPLE
      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
      privateKey: /etc/istio/ingressgateway-certs/tls.key
    hosts:
    - &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While, when you check the envoy configurations, the listener port actually is 8443&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@k8s-master-v1-16 networking]# istioctl proxy-config listener istio-ingressgateway-7b869dcfb5-lfqz9.istio-system --port 8443 -o json
[
    {
        &amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_8443&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 8443 《《《《《8443！！
            }
        },
        &amp;quot;filterChains&amp;quot;: [
            {
                &amp;quot;filters&amp;quot;: [
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;outbound_0.0.0.0_8443&amp;quot;,
                            &amp;quot;rds&amp;quot;: {
                                &amp;quot;configSource&amp;quot;: {
                                    &amp;quot;ads&amp;quot;: {}
                                },
                                ###The route name is assembled by protocol + port number + portname, Note here: use 443,not 8443
                                &amp;quot;routeConfigName&amp;quot;: &amp;quot;https.443.https.bookinfo-gateway.istio-bookinfo&amp;quot;
                            },
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is because the ingressgateway&amp;rsquo;s 443 svc port is corresponding to targetPort 8443:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; - name: https
    nodePort: 30975
    port: 443
    protocol: TCP
    targetPort: 8443
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If the port is defined as 8443 in the gateway, the result is same, will generate 8443 listener in envoy.&lt;/p&gt;
&lt;p&gt;When there is only one gateway definition, it is ok to use port or the corresponding targetport of the ingressgateway, both will get the same listener port in evnoy lastly. But please be noted, if there are multiple gateway definitions and set same protocol, then the port in the gateways must be same. Otherwise, the listener will only associate the routeConfigName generated by the gateway that created afterwards, and the associated route will not contain the virtualservice logic that related to the first created gateway.&lt;/p&gt;
&lt;p&gt;For example, configure HTTP:8080 in the gateway in the istio-bookinfo namespace (the svc 80 of ingressgateway corresponds to the 8080 of the pod):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: v1
items:
 
  spec:
    selector:
      istio: ingressgateway
    servers:
    - hosts:
      - &#39;*&#39;
      port:
        name: http
        number: 8080
        protocol: HTTP
    - hosts:
      - istiobookinfo.lab.f5se.io
      port:
        name: https
        number: 443
        protocol: HTTPS
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The gateway in the httpbin namespace configures HTTP：80，&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@k8s-master-v1-16 httpbin]# kubectl get gateways.networking.istio.io -n httpbin -o yaml
apiVersion: v1
items:
 
  spec:
    selector:
      istio: ingressgateway
    servers:
    - hosts:
      - httpbin.lab.f5se.io
      port:
        name: http-httpbin
        number: 80
        protocol: HTTP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This leads to the fact that the envoy listener is actually actually associated with the later created http.80 route:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@k8s-master-v1-16 ~]# istioctl proxy-config listener istio-ingressgateway-7b869dcfb5-gh2vr.istio-system --port 8080 -o json
[
    {
        &amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_8080&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 8080
            }
        },
        &amp;quot;filterChains&amp;quot;: [
            {
                &amp;quot;filters&amp;quot;: [
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;outbound_0.0.0.0_8080&amp;quot;,
                            &amp;quot;rds&amp;quot;: {
                                &amp;quot;configSource&amp;quot;: {
                                    &amp;quot;ads&amp;quot;: {}
                                },
                                &amp;quot;routeConfigName&amp;quot;: &amp;quot;http.80&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Therefore, in these multi gateways configuration, which ultimately shares the listener port, the port number and protocol name need to be the same (BEST practice is using the port number that envoy actually listens to), but the port must be named differently (if the port name is the same, envoy will show the conflicting configuration logs):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2020-07-10T09:56:26.192152Z	warning	envoy config	[external/envoy/source/common/config/grpc_subscription_impl.cc:101] gRPC config for type.googleapis.com/envoy.api.v2.Listener rejected: 
Error adding/updating listener(s) 0.0.0.0_8080: duplicate listener 0.0.0.0_8080 found
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Gateways with the same protocol and the same port, no matter whether they are in the same namespace, can only share one listener in envoy, so they will also share same route. If you accidentally configure the same virtualservice under different namespaces at this time, it will cause envoy to generate two identical match conditions in the same route (and the associated cluster is different namespace suffix, This resulting in abnormal access)&lt;/p&gt;
&lt;p&gt;Check more istio practice detail at my tech blog &lt;a href=&#34;https://imesh.club&#34;&gt;https://imesh.club&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Infrastructure | How an application delivery veteran sees Envoy in the era of cloud native</title>
      <link>/posts/f5-envoy-cloud-native/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/f5-envoy-cloud-native/</guid>
      <description>How to understand envoy, compare to F5/NGINX.</description>
      <content>&lt;h2 id=&#34;foreword&#34;&gt;Foreword&lt;/h2&gt;
&lt;p&gt;Envoy, messenger, envoy, representative! Just like the meaning of the word itself, with a sense of authority, a sense of sacred full agent. Combined with its own use and role, it is really &amp;ldquo;people as their name&amp;rdquo;, can&amp;rsquo;t help but like Lyft, I don&amp;rsquo;t know which master got the name to get this name. In the current era of fiery microservices, Envoy is an absolute star, and it is no exaggeration to describe it as everyone knows. Someone once asked me how to look at Envoy and whether Envoy will replace F5 instead of NGINX in the cloud-native era. As a veteran who has experienced two waves of change in the field of application delivery technology, in this article I will talk about Envoy in the future From a perspective to understand and answer this question. Why talk a little bit, this is really not modesty, but objectively, there is really no such in-depth large-scale long-term use and research of all technical details of Envoy, so I will combine my professional experience and experience to make an Envoy Talk.&lt;/p&gt;
&lt;h2 id=&#34;star-studded-envoy&#34;&gt;Star-studded Envoy&lt;/h2&gt;
&lt;p&gt;First, let&amp;rsquo;s take a look at how Envoy officially introduced Envoy:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ENVOY IS AN OPEN SOURCE EDGE AND SERVICE PROXY, DESIGNED FOR CLOUD-NATIVE APPLICATIONS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From this description on the homepage of the website, we can clearly see the official definition of Envoy, which is simply a proxy for east-west, north-south traffic in the cloud native era. Lfyt is the pioneer of the microservice application architecture. We can see Lfyt in a large number of microservice sermon articles. After a large-scale shift from monolithic applications to microservice architecture, a serious problem was placed in development. In front of the architects, on the one hand, Lyft&amp;rsquo;s services are developed in multiple languages, and the use of class libraries to solve various problems under the distributed architecture requires a lot of language adaptation and code intrusion. On the other hand, Lyft&amp;rsquo;s business Both are deployed on AWS, relying heavily on AWS&#39; ELB and EC2, but the traffic control, insight, and problem elimination between the services provided by ELB and AWS at that time could not meet Lyft&amp;rsquo;s needs. It is based on this background, Lfyt is Envoy development started in May 2015. It was first deployed as an edge agent and began to replace ELB, and then began to be deployed as a sidecar method for large-scale deployment. On September 14, 2016, Lyft officially announced this project on its blog: Envoy C++ L7 proxy and communication bus . For a while, Envoy received a lot of attention, and companies such as Google began to contribute to this project, and donated the project to CNCF one year later in September 2017. With a good mom like Lyft, and the succession to CNCF as a rich dad, plus the half-brother Istio star brother&amp;rsquo;s blessing, it can be said that Envoy has a good scene for a while, earning enough eyeball and developer support, I graduated from CNCF in just over a year.&lt;/p&gt;
&lt;p&gt;Container technology has helped enterprises practice Devops and microservice transformation. The k8s container orchestration platform allows enterprises to move more business from traditional architectures to modern container-based infrastructures with more confidence. k8s solves container orchestration and applications. Issues such as publishing, but when the communication between services has changed from the previous call between memory to TCP-based network communication, the impact of the network on application services has become more huge and uncertain, based on traditional application architecture operation and maintenance The means cannot adapt and solve the huge and complex communication insights and troubleshooting between services. In order to solve such problems, the service mesh application was born and quickly became a hot topic of concern. The Istio project is the most important player in this ecosystem. Istio&amp;rsquo;s architecture is a typical management plane and data separation architecture. The choice of data plane is open, but Istio chooses Envoy as the data plane by default. The two popular stars joined forces to make Linkerd eclipsed almost at the same time. At this point in time, NGINX also briefly carried out the Nginmesh project, trying to make NGINX as the data plane of Istio, but eventually gave up at the end of 2018, why did you give up, this article will be mentioned later.&lt;/p&gt;
&lt;p&gt;In addition to Istio&amp;rsquo;s selection of Envoy as the data plane, there are many projects based on Envoy, such as multiple Ingress Controller projects of k8s: Gloo, Contur, Ambassador. Istio&amp;rsquo;s own Ingress gateway and Egress gateway also choose Envoy. Take a look at the Envoy users listed on their official homepage and say that starlight is not too much. Note that F5 in the list is very interesting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-endusers.jpg&#34; alt=&#34;&#34;&gt;
(Envoy end user list)&lt;/p&gt;
&lt;h2 id=&#34;envoy-born-for-the-times&#34;&gt;Envoy: born for the times&lt;/h2&gt;
&lt;p&gt;Below I will look at the technical aspects of why Envoy is so valued by the community. It will be summarized from the following aspects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical characteristics&lt;/li&gt;
&lt;li&gt;Deployment architecture&lt;/li&gt;
&lt;li&gt;Software Architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;technical-characteristics&#34;&gt;Technical characteristics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interface and API&lt;/li&gt;
&lt;li&gt;Dynamic&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Observability&lt;/li&gt;
&lt;li&gt;Modernity&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;interface-and-api&#34;&gt;Interface and API&lt;/h4&gt;
&lt;p&gt;When I first opened the configuration of Envoy, my first feeling was, God, how should such a product user configure and use. Under the intuitive experience, in an uncomplicated experimental environment, the number of lines of an Envoy&amp;rsquo;s actual configuration file actually reached 20,000 lines.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#  kubectl exec -it productpage-v1-7f4cc988c6-qxqjs -n istio-bookinfo -c istio-proxy -- sh
$ curl http://127.0.0.1:15000/config_dump | wc -l
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  634k    0  634k    0     0  10.1M      0 --:--:-- --:--:-- --:--:-- 10.1M
20550
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Although this is a dynamic configuration in the Istio environment, although there are ways to optimize it to reduce the actual configuration amount, or that we will not do such a large amount of configuration when using the static configuration method for configuration, but when we see the following actual The configuration structure output will feel that for such a software, it is obviously impractical to configure and maintain in a normal way. Its configuration is completely json structured and has a large number of descriptive configurations. Compared to NGINX and other such reverse For agent software, its configuration structure is too complicated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-json.jpg&#34; alt=&#34;&#34;&gt;
(Complex configuration structure)&lt;/p&gt;
&lt;p&gt;Obviously, Envoy&amp;rsquo;s design is not designed for manual, so Envoy designed a large number of xDS protocol interfaces, users need to design an xDS server to implement all configuration processing, Envoy supports gRPC or REST to communicate with the server to update Own configuration. xDS is the general name of the Envoy DS (discover service) protocol, which can be divided into Listener DS (LDS), Route DS (RDS), Cluster DS (CDS), Endpoint DS (EDS), and Secret DS in order to ensure consistent configuration DS-ADS of polymerization and the like, may be more xDS view here . These interfaces are used to automatically generate various specific configuration objects. It can be seen that this is a highly dynamic runtime configuration. To use it well, you must develop a server with sufficient capabilities. Obviously this is not the design thinking of traditional reverse proxy software.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-xds.png&#34; alt=&#34;&#34;&gt;
(Picture from &lt;a href=&#34;https://gist.github.com/nikhilsuvarna/bd0aa0ef01880270c13d145c61a4af22&#34;&gt;https://gist.github.com/nikhilsuvarna/bd0aa0ef01880270c13d145c61a4af22&lt;/a&gt; )&lt;/p&gt;
&lt;h4 id=&#34;dynamic&#34;&gt;Dynamic&lt;/h4&gt;
&lt;p&gt;As mentioned earlier, Envoy&amp;rsquo;s configuration relies heavily on interface automation to generate various configurations. These configurations can be modified by Runtime without reloading files. In modern application architectures, the life cycle of a service endpoint becomes shorter and its operation Uncertainty or resilience has become greater, so the ability to make runtime changes to the configuration without having to reload the configuration file is particularly valuable in modern application architectures, which is an important consideration for Istio&amp;rsquo;s choice of Envoy as the data plane. Envoy also has a hot restart capability, which makes it more elegant when an upgrade or a restart is necessary, and existing connections can be protected more.&lt;/p&gt;
&lt;p&gt;In the Istio scenario, Envoy&amp;rsquo;s container runs two processes, one called pilot-agent and one is envoy-proxy itself. The pilot-agent is responsible for managing and starting Envoy, and generates an envoy under /etc/istio/proxy/ -rev0.json Initial configuration file, this file defines how Envoy should communicate with the pilot server to obtain the configuration, and use this configuration file to finally start the Envoy process. However, the final configuration of Envoy is not only the content in envoy-rev0.json, it contains all the dynamic configurations discovered through the xDS protocol mentioned above.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#  kubectl exec -it productpage-v1-7f4cc988c6-qxqjs -n istio-bookinfo -c istio-proxy -- sh
$ ps -ef
UID         PID   PPID  C STIME TTY          TIME CMD
istio-p+      1      0  0 Jun25 ?        00:00:33 /usr/local/bin/pilot-agent proxy sidecar --domain istio-bookinfo.svc.cluster.local --serviceCluster productpage.istio-bookinfo --proxyLogLevel=warning --proxyComp
istio-p+     14      1  0 Jun25 ?        00:05:31 /usr/local/bin/envoy -c etc/istio/proxy/envoy-rev0.json --restart-epoch 0 --drain-time-s 45 --parent-shutdown-time-s 60 --service-cluster productpage.istio-bookin
istio-p+    142      0  0 15:38 pts/0    00:00:00 sh
istio-p+    148    142  0 15:38 pts/0    00:00:00 ps -ef
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the envoy overall configuration dump of the following figure, you can see that the contents of bootstrap and other static and dynamic configurations are included:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-dump-config-json-struc.jpg.jpg&#34; alt=&#34;&#34;&gt;
(Envoy configuration structure)&lt;/p&gt;
&lt;p&gt;Combined with the following figure, you can see the basic Envoy configuration structure and its logic, whether it is an entrance listener (similar to F5&amp;rsquo;s VS and part of the profile configuration, NGINX&amp;rsquo;s listener and some Server paragraph configuration) or routing control logic (similar to F5 LTM policy, NGINX&amp;rsquo;s Various Locations matching, etc., or Clusters (similar to F5 pool, NGINX upstream), Endpoints (similar to F5 pool member, NGINX upstream server), and even SSL certificates can be automatically discovered from the service side through the interface&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-basic-objects-logic.png&#34; alt=&#34;&#34;&gt;
(picture (From &lt;a href=&#34;https://gist.github.com/nikhilsuvarna/bd0aa0ef01880270c13d145c61a4af22&#34;&gt;https://gist.github.com/nikhilsuvarna/bd0aa0ef01880270c13d145c61a4af22&lt;/a&gt; )&lt;/p&gt;
&lt;h4 id=&#34;scalability&#34;&gt;Scalability&lt;/h4&gt;
&lt;p&gt;A lot of filters can be seen in the configuration of Envoy. These are the performance of its scalability. Envoy learned the architecture of F5 and NGINX, and used a lot of plug-ins to make it easier for developers to develop. From the start of listener, it supports the use of filter, and supports developers to develop L3, L4, L7 plug-ins to achieve protocol expansion and more control.&lt;/p&gt;
&lt;p&gt;In practice, companies may not have as many C++ development reserves as languages ​​such as JavaScript, so Envoy also supports Lua and Webassembly extensions. This aspect eliminates the need to frequently recompile binaries and restart, and on the other hand reduces enterprise plug-in development. Difficulty, so that companies can use more Webassembly compatible languages ​​for plug-in writing, and then compile to Webassenmbly machine code to achieve efficient operation. At present, Envoy and Istio are still in the early stages of using Webassembly for expansion, and it will take some time to mature.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;concept-envoy-filter.png&#34; alt=&#34;&#34;&gt;
(Picture from &lt;a href=&#34;https://www.servicemesher.com/istio-handbook/concepts/envoy.html&#34;&gt;https://www.servicemesher.com/istio-handbook/concepts/envoy.html&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;As can be seen from the above figure, such a request processing structure is very close to the design idea of ​​the F5 TMOS system, and is similar to NGINX to a certain extent. Connections and requests correspond to different processing components at different protocol levels and stages, and these components are themselves extensible and programmable, which in turn enables flexible programming control of the data flow.&lt;/p&gt;
&lt;h4 id=&#34;observability&#34;&gt;Observability&lt;/h4&gt;
&lt;p&gt;It is said that Envoy is born with the characteristics of cloud native. One of the characteristics is the emphasis on observability. You can see the three observable components: logs, metrics, and tracing are all supported by Envoy by default.&lt;/p&gt;
&lt;p&gt;Envoy allows users to define flexible log formats in flexible locations in a flexible manner. These changes can be delivered through dynamic configuration to achieve immediate effect, and allows the definition of sampling of logs. In Metrics, it provides many indicators that can be integrated with Prometheus. It is worth mentioning that Envoy allows the filter itself to expand these indicators. For example, in the filter such as current limiting or verification, the plug-in itself is allowed to define its own indicators to help users better. Use and quantify the operational status of the plugin. In terms of Tracing, Envoy supports integration with third parties such as zipkin, jaeger, datadog, lightStep, etc. Envoy can produce a uniform request ID and keep it spread throughout the network structure. It also supports external x-client-trace-id to achieve A description of the relationship topology between microservices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-kiali.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Each span generated by Envoy contains the following data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set by the &amp;ndash;service-clusteroriginal service cluster information.&lt;/li&gt;
&lt;li&gt;The start time and duration of the request.&lt;/li&gt;
&lt;li&gt;Set by the &amp;ndash;service-nodeoriginal host information.&lt;/li&gt;
&lt;li&gt;By x-envoy-downstream-service-clusterdownstream cluster header set.&lt;/li&gt;
&lt;li&gt;HTTP request URL, method, protocol and user agent.&lt;/li&gt;
&lt;li&gt;By custom_tagsanother custom label settings.&lt;/li&gt;
&lt;li&gt;The upstream cluster name and address.&lt;/li&gt;
&lt;li&gt;HTTP response status code.&lt;/li&gt;
&lt;li&gt;GRPC response status and messages (if available).&lt;/li&gt;
&lt;li&gt;Error flag when HTTP status is 5xx or GRPC status is not &amp;ldquo;OK&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Track system-specific metadata.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;modernity&#34;&gt;Modernity&lt;/h4&gt;
&lt;p&gt;In fact, it is obviously correct nonsense to say that Envoy has modernity. Envoy was born for modern application architecture. Here we mainly want to explain from several aspects that we can most easily feel. The first is its special structural design. In Envoy, it supports the use of iptables to intercept the traffic and do transparent processing. It can use getsockopt () to extract the original destination information in the NAT entry, and allow listeners to listen on the listener. The transferred port listener jumps to an unbound listener that actually matches the original destination information. Although from the perspective of a reverse proxy, this is a bit like F5&amp;rsquo;s VS internal jump, NGINX&amp;rsquo;s subrequest, but its biggest feature and ability lies in transparent connection, which is especially important in the deployment Pod sidecar mode, refer to specific principles herein .&lt;/p&gt;
&lt;p&gt;For the gray-scale publishing, traffic mirroring, circuit breaker, global current limiting and other functions that are favorite for modern applications, its configuration is also very simple. Although F5/NGINX and other software can also accomplish similar tasks, they are native Envoy has greater advantages in terms of ease of configuration and ease of configuration.&lt;/p&gt;
&lt;p&gt;Another manifestation of modernity is the support of the protocol. Look at the following supported protocols. Students who are familiar with application delivery and reverse proxy software may not help but express their admiration. The support of these protocols on the other hand shows Envoy’s A feature that is more oriented towards developers and SRE.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gRPC&lt;/li&gt;
&lt;li&gt;HTTP2&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;DynamoDB&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;Kafka&lt;/li&gt;
&lt;li&gt;Dubbo&lt;/li&gt;
&lt;li&gt;Thrift&lt;/li&gt;
&lt;li&gt;ZooKeeper&lt;/li&gt;
&lt;li&gt;RockeMQ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deployment-architecture&#34;&gt;Deployment architecture&lt;/h3&gt;
&lt;p&gt;After understanding the technical characteristics of Envoy, let&amp;rsquo;s look at Envoy from the perspective of deployment architecture.&lt;/p&gt;
&lt;p&gt;Complete Sidecar model deployment, which is the biggest deployment feature of Envoy. The communication between services is completely transformed into the communication between Envoy agents, so that many non-business functions are removed from the service code to external proxy components. Envoy is responsible for network communication control Observable with flow. It can also be deployed as a simplified sidecar, which only acts as a proxy for the inbound direction of service without additional traffic manipulation. This structure is used in the external observability based on NGINX to achieve business observability
&lt;img src=&#34;t1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hub type, which is the same as the Router-mesh type concept in NGINX&amp;rsquo;s MRA. All services use a centralized Envoy to communicate. This deployment structure is generally suitable for small and medium-sized services. Service flow can be directed by adapting to service registration. To Envoy
&lt;img src=&#34;t2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Envoy can also be used as an Ingress edge gateway or Egress gateway. In this scenario, Envoy is generally used for Ingress controller or API gateway. You can see that many such implementations like to use Envoy as the underlying layer, such as Gloo, Ambassador, etc.
&lt;img src=&#34;t3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The following deployment structure should be familiar to everyone. As an Edge gateway, Envoy also deploys an additional layer of microservice gateway (or proxy platform layer)
&lt;img src=&#34;t5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally, this is to integrate all forms of Envoy deployment. This architecture may be in the middle of the process of migrating services from traditional architecture to microservice architecture
&lt;img src=&#34;t4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ok, take a look at how Envoy is used in Istio
&lt;img src=&#34;t6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In summary, due to the cross-platform nature of Envoy, it has the same flexible deployment structure as NGINX, but in fact the deployment structure often has a strong relationship with the final configuration implementation mechanism, can the software&amp;rsquo;s ability adapt to the flexibility under this structure Implementation with simple configuration is the ultimate test. Objectively speaking, Envoy has an advantage in this respect.&lt;/p&gt;
&lt;h3 id=&#34;software-architecture&#34;&gt;Software Architecture&lt;/h3&gt;
&lt;p&gt;Envoy adopts a single-process multi-thread design structure, and the main thread is responsible for configuration updates and process signal processing. Requests are handled by multiple worker threads. In order to simplify and avoid processing complexity, a connection is always handled by one thread, which can minimize some lock operations caused by data sharing between threads. Envoy avoids state sharing between threads as much as possible, and designed the Thread Local Store mechanism for this purpose. In the log writing, the worker thread actually writes to the memory cache, and finally the file refresh thread is responsible for writing to the disk, which can improve efficiency to a certain extent. Overall, Envoy is still more focused on simplifying complexity and emphasizing flexibility, so unlike NGINX, it does not put the pursuit of performance in the first place, which can be obtained in the relevant official blog of Envoy verification.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-thread.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Similar to NGINX, Envoy is an asynchronous, non-blocking design, using an event-driven approach. Each thread is responsible for each listener, SO_REUSEPORT can also be used to share sockets, NGINX also has a similar mechanism.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;t7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the listener listens and starts processing, the connection will be processed by subsequent L3, 4, 7 and other filters according to the configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;envoy-arch.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;f5nginx-the-sword-is-not-out&#34;&gt;F5/NGINX: the sword is not out&lt;/h2&gt;
&lt;p&gt;After understanding the technical characteristics and architecture of Envoy, we return to the original point of this article. Envoy has been carrying the genes of modern application architecture from birth, does it mean that these front waves such as NGINX/F5 are out of date.&lt;/p&gt;
&lt;p&gt;I remember the author of NGINX, Igor, at the F5 China 520 conference to explain why NGINX is so successful. He said that he did not expect to be so successful because the reason is that he developed the right software at the right time. We know that during the period around 2003, there was still no talk about distributed architecture and microservices. At that time, the main problem to be solved was stand-alone performance. Based on this background, NGINX is strict in terms of architecture design and code quality. Demanding performance. In terms of functionality, NGINX was originally a Web Server software, L7 reverse proxy is an extension of its capabilities, and L4 proxy capabilities increase even later. In view of this background, from the perspective of modern application architecture, there are indeed some Capability is more difficult to cover. Similarly, Envoy was born and developed in the era of modern application architecture. As Envoy self-explained, it refers to a large number of existing hardware and software reverse proxy and load balancing products. From the above technical analysis, it can also be seen that Envoy has many NGINX and F5 Architectural concept, it can be said that Envoy draws many essences from mature reverse proxy products, and fully considers the needs of modern application architecture when designing, it is also a correct software at the right time.&lt;/p&gt;
&lt;p&gt;Under the microservices architecture, many problems have become how to control the communication and traffic insights between services. This is a typical application delivery field. As a frontier in this field, on the one hand, we must actively embrace and adapt to the new era of application architecture. On the one hand Need to innovate and continue to lead new directions. There have been two technological innovations in this field in history. The first was around 2006, when the topic of &amp;ldquo;load balancing was dead&amp;rdquo; was fired. The essence was that the market began to change at that time, and everyone was no longer satisfied with simple loads. Balanced, demand is derived from more complex scenarios such as application security, network optimization, application optimization, access control, and flow control. The concept of application delivery began to be proposed. It can be said that before 2006, the main concepts and technical directions of the market were based on The four-layer switch is the core concept of load balancing technology. Most players are traditional network manufacturers. The thinking and concepts are based on network switching. F5 is like a strange guy. The product design thinking is completely on another dimension. The TMOS V9 operating system, which has been released since 2004, has led the market since then, and no one has surpassed it for 10 years thereafter. The second technological innovation occurred around 2016. Affected by the cloud and microservices, software and lightweight became the mainstream of the market. At the same time, Devops thought means that the role of users has changed. The traditional design for network operation and maintenance personnel It began to become difficult to meet market demand. The field dominated by F5 has also undergone new changes in the market. Gartner no longer publishes magic quadrant analysis in the field of application delivery, and instead forms guidance in the way of Guide.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;F5-stock.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Looking at the present, history is always surprisingly similar.&lt;/p&gt;
&lt;p&gt;The modern application architecture is developing rapidly, and a large number of applications are beginning to be micro-serviced. However, from the perspective of the overall chain of business access, Envoy cannot solve all problems, such as application security protection, complex enterprise protocols, and different needs caused by different organizational relationships. It can be seen that the application delivery products represented by F5/NGINX have also begun to actively realize product integration under the Devops tide. F5 has released a complete automated tool chain, from the product’s bootstrap to network configuration, to application service configuration, to the final Monitoring and telemetry have formed a complete interface, and use declarative interface to promote product management to a higher role crowd and management system. NGINX also builds its own API and Controller plane, and provides a declarative API interface to the outside world. Developers can better use the interface to integrate into their own control plane. These changes are for developers or SRE to better use F5/NGINX. For details, please refer to my &amp;ldquo;From Traditional ADC to Cloud Native ADC&amp;rdquo; &lt;a href=&#34;https://mp.weixin.qq.com/s?src=11&amp;amp;timestamp=1593224168&amp;amp;ver=2425&amp;amp;signature=znUdlLDdpbGGxWX7pZhH2uSVq1SAdQuloO09HIXssdQ15nRtWVOIgzlYTFmjOIUsDrqghPbSZM6vQI45TIqmINQKjposI7AfJ6jKQaEXm9KD4tEV5Bk9AF0RGuKvVuHI&amp;amp;new=1&#34;&gt;series of articles&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;slides-3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;After acquiring NGINX and Shape, F5 put forward a new view that will make full use of the widely accessible data plane capabilities, and use AI to further tap the data potential to help users better grasp and understand application behavior and performance, and provide references for business operations. , And feedback to component configuration and operation management to form a closed loop.&lt;/p&gt;
&lt;p&gt;An important scenario for modern application delivery is still indispensable, that is, application security. Although Istio and other products have made many attempts in secure communication, identity, and strategy, application security itself is relatively lacking. F5 is a leading manufacturer in the field of WAF security Through the transfer of security capabilities to NGINX, a new NGINX APP Protect is formed, which uses its cross-platform capabilities to help users better manage application security capabilities in microservice scenarios and help enterprises better implement DevSecOps.&lt;/p&gt;
&lt;p&gt;If we compare the technical features of Envoy with F5, we can see that F5 lacks scalability and modernity to a certain extent. F5 has good programming control capabilities, but it is relatively larger than the development of larger plug-ins. Insufficient, this and modernity can often be linked together. For example, if you want to make a complex 7-layer filter similar to Envoy for a very new protocol, it is impossible to achieve, although iRule or iRuleLX can do something to a certain extent. However, in any case, the final product form of F5 itself determines that F5&amp;rsquo;s BIGIP cannot be completely cross-platform, because it cannot run as a container. It is worth expecting that such morphological restrictions will be broken by F5&amp;rsquo;s next-generation TMOS system.&lt;/p&gt;
&lt;p&gt;Service Mesh is the current popular technology direction. F5 builds an enterprise-level Aspen Mesh service mesh product based on Istio, which helps enterprises deploy and use Istio better and easier. Aspen mesh team members enter the Istio Technical Oversight Committee with only 7 positions and are responsible for the important responsibilities of Istio&amp;rsquo;s RFCs/Designs/APIs. Although Istio has absolute ecology and popularity in the field of service mesh, this does not mean that Istio is the only choice. In many cases, customers may want to adopt a more concise Service Mesh to achieve most of the required functions instead of deploying one. The entire complex Istio solution, NGINX Service Mesh (NSM) based on NGINX components will bring new choices to users, a more simple and easy to use Service Mesh product, this is the reason why we mentioned NGINX to terminate Nginmesh at the beginning of the article .&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Technology development is an inevitable process. In 2006, it evolved from traditional load balancing technology to application delivery. In addition to load balancing, it introduced many aspects such as security, access control, access control, and flow control. Around 2016, new technological changes have occurred in this field again. The emergence of a large number of new generation reverse proxy open source software has a new impact on traditional application delivery products. Active adaptation and change and innovation are the key to winning. Envoy has excellent capabilities as a new representative, but it is not a silver bullet to solve all problems. Envoy has a steeper learning curve and higher development and maintenance costs. For enterprises, they should choose the appropriate solution and Products to solve different problems in the architecture, to avoid catching the trend and let yourself fall into the trap.&lt;/p&gt;
&lt;p&gt;F5 needs more to let developers understand the huge potential of TMOS system (especially the subversion of the next generation products in architecture and form), understand its excellent all-agent architecture and program control at any level, so that developers, SRE develops with F5 TMOS as a capability platform and middleware, and better utilizes F5&amp;rsquo;s own application delivery capabilities to quickly realize its own needs.&lt;/p&gt;
&lt;p&gt;Finally, again quote a sentence from the homepage of the official Envoy website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As microservice practitioners soon realized, most of the operational problems that arise when moving to a distributed architecture are ultimately based on two aspects: network and observability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And to ensure more reliable network delivery and better observability is the strength of Qianlang. Innovate, Qianlang.&lt;/p&gt;
&lt;p&gt;Written at the end: No matter how the technology changes, the human factor is still the core, regardless of the company or the manufacturer, in such a wave of technology, it should have sufficient technical reserves, just like the traditional financial industry through the establishment of technology companies to seek transformation, Manufacturers also need to be transformed. F5 China&amp;rsquo;s SE has almost 100% passed the CKA certification. Regardless of the relative proportion or absolute number, it should be unique in the industry. The transformation is not only in products, but also in thinking.&lt;/p&gt;
&lt;p&gt;Check more istio practice detail at my tech blog &lt;a href=&#34;https://imesh.club&#34;&gt;https://imesh.club&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Istio | Sidecar iptables and traffic steering detail</title>
      <link>/posts/istio-traffic-control-deepdive/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/istio-traffic-control-deepdive/</guid>
      <description>How istio manipulates the traffic.</description>
      <content>&lt;h2 id=&#34;istio-injected-iptables&#34;&gt;Istio injected iptables&lt;/h2&gt;
&lt;p&gt;Istio implements the hijacking and processing of traffic by injecting the init container and envoy proxy container into the business pod. After the init container runs, the following NAT table rules for iptables will be generated in the corresponding linux namespace&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;amp;#91;root@k8s-node1-v1-16 ~]# iptables -t nat -L -v
Chain PREROUTING (policy ACCEPT 192K packets, 12M bytes)
 pkts bytes target     prot opt in     out     source               destination
 192K   12M ISTIO_INBOUND  tcp  --  any    any     anywhere             anywhere

Chain INPUT (policy ACCEPT 192K packets, 12M bytes)
 pkts bytes target     prot opt in     out     source               destination

Chain OUTPUT (policy ACCEPT 40673 packets, 3694K bytes)
 pkts bytes target     prot opt in     out     source               destination
 8917  535K ISTIO_OUTPUT  tcp  --  any    any     anywhere             anywhere

Chain POSTROUTING (policy ACCEPT 40673 packets, 3694K bytes)
 pkts bytes target     prot opt in     out     source               destination

Chain ISTIO_INBOUND (1 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:ssh
  356 21360 RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15090
 192K   11M RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15021
    0     0 RETURN     tcp  --  any    any     anywhere             anywhere             tcp dpt:15020
   34  2040 ISTIO_IN_REDIRECT  tcp  --  any    any     anywhere             anywhere

Chain ISTIO_IN_REDIRECT (3 references)
 pkts bytes target     prot opt in     out     source               destination
   34  2040 REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports 15006

Chain ISTIO_OUTPUT (1 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 RETURN     all  --  any    lo      127.0.0.6            anywhere    
    0     0 ISTIO_IN_REDIRECT  all  --  any    lo      anywhere            !localhost            owner UID match 1337
    0     0 RETURN     all  --  any    lo      anywhere             anywhere             ! owner UID match 1337
 8917  535K RETURN     all  --  any    any     anywhere             anywhere             owner UID match 1337
    0     0 ISTIO_IN_REDIRECT  all  --  any    lo      anywhere            !localhost            owner GID match 1337
    0     0 RETURN     all  --  any    lo      anywhere             anywhere             ! owner GID match 1337
    0     0 RETURN     all  --  any    any     anywhere             anywhere             owner GID match 1337
    0     0 RETURN     all  --  any    any     anywhere             localhost
    0     0 ISTIO_REDIRECT  all  --  any    any     anywhere             anywhere

Chain ISTIO_REDIRECT (1 references)
 pkts bytes target     prot opt in     out     source               destination
    0     0 REDIRECT   tcp  --  any    any     anywhere             anywhere             redir ports 15001
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;outbound-flow-control&#34;&gt;Outbound flow control&lt;/h2&gt;
&lt;p&gt;When the business container sends the request to the outside, such as productpage to reviews: 9080 port access, this connection will be redirected by iptables to port 127.0.0.1:115001, and then processed by envoy.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;REDIRECT
This target is only valid in the nat table, in the PREROUTING and OUTPUT chains, and user-defined chains which are only called from those chains. It redirects the packet to the machine itself by changing the destination IP to the primary address of the incoming interface (locally-generated packets are mapped to the localhost address, 127.0.0.1 for IPv4 and ::1 for IPv6).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ipset.netfilter.org/iptables-extensions.man.html#lbDK&#34;&gt;https://ipset.netfilter.org/iptables-extensions.man.html#lbDK&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The virtualOutbound in envoy will be hit. This is a special listener. It contains the Original Destination listener filter. Note &amp;ldquo;useOriginalDst&amp;rdquo;: truethat after such configuration in the following configuration , envoy will re-find the matching listener in the configuration. If found, press the hit. The listener performs follow-up processing. If it cannot find it, it sends the request to the cluster in this listener. Here is a passthrough cluster. This cluster will forward the packet directly to the fourth layer.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@k8s-master-v1-16 ~]# istioctl proxy-config listener productpage-v1-7f4cc988c6-qxqjs.istio-bookinfo --port 15001 -o json
&amp;amp;#91;
    {
        &amp;quot;name&amp;quot;: &amp;quot;virtualOutbound&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 15001
            }
        },
        &amp;quot;filterChains&amp;quot;: &amp;amp;#91;
            {
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.stats&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.network.wasm.v3.Wasm&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;config&amp;quot;: {
                                    &amp;quot;configuration&amp;quot;: &amp;quot;{\n  \&amp;quot;debug\&amp;quot;: \&amp;quot;false\&amp;quot;,\n  \&amp;quot;stat_prefix\&amp;quot;: \&amp;quot;istio\&amp;quot;\n}\n&amp;quot;,
                                    &amp;quot;root_id&amp;quot;: &amp;quot;stats_outbound&amp;quot;,
                                    &amp;quot;vm_config&amp;quot;: {
                                        &amp;quot;code&amp;quot;: {
                                            &amp;quot;local&amp;quot;: {
                                                &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.stats&amp;quot;
                                            }
                                        },
                                        &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;,
                                        &amp;quot;vm_id&amp;quot;: &amp;quot;tcp_stats_outbound&amp;quot;
                                    }
                                }
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;PassthroughCluster&amp;quot;,
                            &amp;quot;cluster&amp;quot;: &amp;quot;PassthroughCluster&amp;quot;,
                            &amp;quot;accessLog&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.file_access_log&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog&amp;quot;,
                                        &amp;quot;path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;,
                                        &amp;quot;format&amp;quot;: &amp;quot;&amp;amp;#91;%START_TIME%] \&amp;quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&amp;quot; %RESPONSE_CODE% %RESPONSE_FLAGS% \&amp;quot;%DYNAMIC_METADATA(istio.mixer:status)%\&amp;quot; \&amp;quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&amp;quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&amp;quot;%REQ(X-FORWARDED-FOR)%\&amp;quot; \&amp;quot;%REQ(USER-AGENT)%\&amp;quot; \&amp;quot;%REQ(X-REQUEST-ID)%\&amp;quot; \&amp;quot;%REQ(:AUTHORITY)%\&amp;quot; \&amp;quot;%UPSTREAM_HOST%\&amp;quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&amp;quot;
                                    }
                                }
                            ]
                        }
                    }
                ],
                &amp;quot;name&amp;quot;: &amp;quot;virtualOutbound-catchall-tcp&amp;quot;
            }
        ],
        &amp;quot;useOriginalDst&amp;quot;: true,
        &amp;quot;trafficDirection&amp;quot;: &amp;quot;OUTBOUND&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above listener will hand over the connection to the listener that matches the original destination IP and port. In the bookinfo example, it will be handed over to the 9080 listener. There is a question to consider here. From the perspective of envoy, the destination port of this link is already 15001, why can it match the following port 0.0.0.0:9080. This is because the NAT is done in the system kernel when iptables is redirected. The system kernel has this converted storage. Envoy obtains the real destination port through getsockopt() , so that it can correctly match the business listener.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;amp;#91;root@k8s-master-v1-16 ~]# istioctl proxy-config listener productpage-v1-7f4cc988c6-qxqjs.istio-bookinfo --port 9080 -o json
&amp;amp;#91;
    {
        &amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_9080&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 9080
            }
        },
        &amp;quot;filterChains&amp;quot;: &amp;amp;#91;
            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;applicationProtocols&amp;quot;: &amp;amp;#91;
                        &amp;quot;http/1.0&amp;quot;,
                        &amp;quot;http/1.1&amp;quot;,
                        &amp;quot;h2c&amp;quot;
                    ]
                },
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;outbound_0.0.0.0_9080&amp;quot;,
                            &amp;quot;rds&amp;quot;: {
                                &amp;quot;configSource&amp;quot;: {
                                    &amp;quot;ads&amp;quot;: {}
                                },
                                &amp;quot;routeConfigName&amp;quot;: &amp;quot;9080&amp;quot;
                            },
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;amp;#91;root@k8s-master-v1-16 ~]# istioctl proxy-config listener productpage-v1-7f4cc988c6-qxqjs.istio-bookinfo
ADDRESS            PORT      TYPE
10.102.252.88      15012     TCP
10.96.122.225      31400     TCP
10.96.0.10         53        TCP
10.110.88.185      15443     TCP
10.96.122.225      15443     TCP
10.110.88.185      443       TCP
10.102.252.88      443       TCP
10.106.109.172     9001      TCP
10.96.0.1          443       TCP
10.96.122.225      443       TCP
10.106.109.172     9000      TCP
10.105.130.171     14267     HTTP+TCP
10.96.81.27        5601      HTTP+TCP
0.0.0.0            15014     HTTP+TCP
10.105.130.171     14250     HTTP+TCP
0.0.0.0            20001     HTTP+TCP
0.0.0.0            9411      HTTP+TCP
10.111.37.34       9090      HTTP+TCP
10.105.145.36      80        HTTP+TCP
10.105.130.171     14268     HTTP+TCP
10.96.0.10         9153      HTTP+TCP
10.110.244.188     80        HTTP+TCP
10.102.252.88      853       HTTP+TCP
10.99.139.251      16686     HTTP+TCP
0.0.0.0            12345     HTTP+TCP
10.103.155.149     80        HTTP+TCP
0.0.0.0            8000      HTTP+TCP
0.0.0.0            15010     HTTP+TCP
10.96.122.225      15020     HTTP+TCP
0.0.0.0            9090      HTTP+TCP
10.107.150.251     80        HTTP+TCP
0.0.0.0            14250     HTTP+TCP
0.0.0.0            80        HTTP+TCP
0.0.0.0            3000      HTTP+TCP
10.110.28.96       8181      HTTP+TCP
10.102.69.143      9200      HTTP+TCP
0.0.0.0            9080      HTTP+TCP 《《《《《《《《《《《《
0.0.0.0            15001     TCP 《《《《《《《《《《《《
0.0.0.0            15006     HTTP+TCP
0.0.0.0            15090     HTTP
0.0.0.0            15021     HTTP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Related passthrough cluster:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@k8s-master-v1-16 ~]# istioctl proxy-config cluster productpage-v1-7f4cc988c6-qxqjs.istio-bookinfo --fqdn PassthroughCluster -o json
&amp;amp;#91;
。。。。忽略。。。
    {
        &amp;quot;name&amp;quot;: &amp;quot;PassthroughCluster&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;ORIGINAL_DST&amp;quot;,
        &amp;quot;connectTimeout&amp;quot;: &amp;quot;10s&amp;quot;,
        &amp;quot;lbPolicy&amp;quot;: &amp;quot;CLUSTER_PROVIDED&amp;quot;,
        &amp;quot;circuitBreakers&amp;quot;: {
            &amp;quot;thresholds&amp;quot;: &amp;amp;#91;
                {
                    &amp;quot;maxConnections&amp;quot;: 4294967295,
                    &amp;quot;maxPendingRequests&amp;quot;: 4294967295,
                    &amp;quot;maxRequests&amp;quot;: 4294967295,
                    &amp;quot;maxRetries&amp;quot;: 4294967295
                }
            ]
        },
        &amp;quot;filters&amp;quot;: &amp;amp;#91;
            {
                &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                &amp;quot;typedConfig&amp;quot;: {
                    &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                    &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&amp;quot;,
                    &amp;quot;value&amp;quot;: {
                        &amp;quot;protocol&amp;quot;: &amp;quot;istio-peer-exchange&amp;quot;
                    }
                }
            }
        ]
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;inbound-flow-control&#34;&gt;Inbound flow control&lt;/h2&gt;
&lt;p&gt;When it is an inbound request, the destination address of the packet is the IP of the pod, and the destination port is the real port of the business (9080, non-svc mapping port). Since the link destination port of iptables is changed to 15006, it will Hit virtual inbound listener (0.0.0.0:15006), this listener has a series of filterchain, and the virtualoutbound listener configuration method is different, virtualinbound contains a series of actual service filters for specific ports, the connection will find specific in these fitlers Business matching. So how does it match the real 9080 business? For example, the following output:
addressPrefix can be matched. If the pod actually has multiple ports, only addressPrefix does not match. It also needs to match the application layer protocol, but the DestinationPort in the Match condition is not matched . In fact, it is similar to Virtualoutbound. The filter of the original destination listener is also used, so envoy will obtain the real destination port and IP from the kernel. This configuration method is different from the virtual outbound &amp;ldquo;useOriginalDst&amp;rdquo;: true configuration method, because this is an updated configuration method.&amp;quot; useOriginalDst&amp;quot;: true This configuration is about to be abandoned.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;quot;listenerFilters&amp;quot;: [ { &amp;quot;name&amp;quot;: &amp;quot;envoy.listener.original_dst&amp;quot;, &amp;quot;typedConfig&amp;quot;: { &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.listener.original_dst.v2.OriginalDst&amp;quot; } },&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(According to &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/listener/listener_components.proto&#34;&gt;https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/listener/listener_components.proto&lt;/a&gt;, the  filtermatch condition is that all must match)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;destinationPort&amp;quot;: 9080,
                    &amp;quot;prefixRanges&amp;quot;: &amp;amp;#91;
                        {
                            &amp;quot;addressPrefix&amp;quot;: &amp;quot;10.244.2.138&amp;quot;,
                            &amp;quot;prefixLen&amp;quot;: 32
                        }
                    ],
### 根据https://istio.io/latest/zh/docs/ops/deployment/requirements/ , 
### 同一个业务端口是不能被两个用不同协议的svc来发布的，因此这帮助避免了同端口同协议的match在整个配置文件里的出现。
                    &amp;quot;applicationProtocols&amp;quot;: &amp;amp;#91;
                        &amp;quot;istio&amp;quot;,
                        &amp;quot;istio-http/1.0&amp;quot;,
                        &amp;quot;istio-http/1.1&amp;quot;,
                        &amp;quot;istio-h2&amp;quot;
                    ]
                },
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;protocol&amp;quot;: &amp;quot;istio-peer-exchange&amp;quot;
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;inbound_10.244.2.138_9080&amp;quot;,
                            &amp;quot;routeConfig&amp;quot;: {
                                &amp;quot;name&amp;quot;: &amp;quot;inbound|9080|http|productpage.istio-bookinfo.svc.cluster.local&amp;quot;,
                                &amp;quot;virtualHosts&amp;quot;: &amp;amp;#91;
                                    {
                                        &amp;quot;name&amp;quot;: &amp;quot;inbound|http|9080&amp;quot;,
                                        &amp;quot;domains&amp;quot;: &amp;amp;#91;
                                            &amp;quot;*&amp;quot;
                                        ],
                                        &amp;quot;routes&amp;quot;: &amp;amp;#91;
                                            {
                                                &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;,
                                                &amp;quot;match&amp;quot;: {
                                                    &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
                                                },
                                                &amp;quot;route&amp;quot;: {
                                                    &amp;quot;cluster&amp;quot;: &amp;quot;inbound|9080|http|productpage.istio-bookinfo.svc.cluster.local&amp;quot;,
                                                    &amp;quot;timeout&amp;quot;: &amp;quot;0s&amp;quot;,
                                                    &amp;quot;maxGrpcTimeout&amp;quot;: &amp;quot;0s&amp;quot;
                                                },
                                                &amp;quot;decorator&amp;quot;: {
                                                    &amp;quot;operation&amp;quot;: &amp;quot;productpage.istio-bookinfo.svc.cluster.local:9080/*&amp;quot;
                                                }
                                            }
                                        ]
                                    }
                                ],
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;last&#34;&gt;Last&lt;/h2&gt;
&lt;p&gt;Attach the actual configuration of 15006&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;amp;#91;root@k8s-master-v1-16 ~]# istioctl proxy-config listener productpage-v1-7f4cc988c6-qxqjs.istio-bookinfo --port 15006 -o json
&amp;amp;#91;
    {
        &amp;quot;name&amp;quot;: &amp;quot;virtualInbound&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 15006
            }
        },
        &amp;quot;filterChains&amp;quot;: &amp;amp;#91;
            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;prefixRanges&amp;quot;: &amp;amp;#91;
                        {
                            &amp;quot;addressPrefix&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                            &amp;quot;prefixLen&amp;quot;: 0
                        }
                    ],
                    &amp;quot;transportProtocol&amp;quot;: &amp;quot;tls&amp;quot;,
                    &amp;quot;applicationProtocols&amp;quot;: &amp;amp;#91;
                        &amp;quot;istio-peer-exchange&amp;quot;,
                        &amp;quot;istio&amp;quot;
                    ]
                },
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;protocol&amp;quot;: &amp;quot;istio-peer-exchange&amp;quot;
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.stats&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.network.wasm.v3.Wasm&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;config&amp;quot;: {
                                    &amp;quot;configuration&amp;quot;: &amp;quot;{\n  \&amp;quot;debug\&amp;quot;: \&amp;quot;false\&amp;quot;,\n  \&amp;quot;stat_prefix\&amp;quot;: \&amp;quot;istio\&amp;quot;\n}\n&amp;quot;,
                                    &amp;quot;root_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;,
                                    &amp;quot;vm_config&amp;quot;: {
                                        &amp;quot;code&amp;quot;: {
                                            &amp;quot;local&amp;quot;: {
                                                &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.stats&amp;quot;
                                            }
                                        },
                                        &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;,
                                        &amp;quot;vm_id&amp;quot;: &amp;quot;tcp_stats_inbound&amp;quot;
                                    }
                                }
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                            &amp;quot;cluster&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                            &amp;quot;accessLog&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.file_access_log&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog&amp;quot;,
                                        &amp;quot;path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;,
                                        &amp;quot;format&amp;quot;: &amp;quot;&amp;amp;#91;%START_TIME%] \&amp;quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&amp;quot; %RESPONSE_CODE% %RESPONSE_FLAGS% \&amp;quot;%DYNAMIC_METADATA(istio.mixer:status)%\&amp;quot; \&amp;quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&amp;quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&amp;quot;%REQ(X-FORWARDED-FOR)%\&amp;quot; \&amp;quot;%REQ(USER-AGENT)%\&amp;quot; \&amp;quot;%REQ(X-REQUEST-ID)%\&amp;quot; \&amp;quot;%REQ(:AUTHORITY)%\&amp;quot; \&amp;quot;%UPSTREAM_HOST%\&amp;quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&amp;quot;
                                    }
                                }
                            ]
                        }
                    }
                ],
                &amp;quot;transportSocket&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;envoy.transport_sockets.tls&amp;quot;,
                    &amp;quot;typedConfig&amp;quot;: {
                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext&amp;quot;,
                        &amp;quot;commonTlsContext&amp;quot;: {
                            &amp;quot;tlsCertificateSdsSecretConfigs&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;,
                                    &amp;quot;sdsConfig&amp;quot;: {
                                        &amp;quot;apiConfigSource&amp;quot;: {
                                            &amp;quot;apiType&amp;quot;: &amp;quot;GRPC&amp;quot;,
                                            &amp;quot;grpcServices&amp;quot;: &amp;amp;#91;
                                                {
                                                    &amp;quot;envoyGrpc&amp;quot;: {
                                                        &amp;quot;clusterName&amp;quot;: &amp;quot;sds-grpc&amp;quot;
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            &amp;quot;combinedValidationContext&amp;quot;: {
                                &amp;quot;defaultValidationContext&amp;quot;: {},
                                &amp;quot;validationContextSdsSecretConfig&amp;quot;: {
                                    &amp;quot;name&amp;quot;: &amp;quot;ROOTCA&amp;quot;,
                                    &amp;quot;sdsConfig&amp;quot;: {
                                        &amp;quot;apiConfigSource&amp;quot;: {
                                            &amp;quot;apiType&amp;quot;: &amp;quot;GRPC&amp;quot;,
                                            &amp;quot;grpcServices&amp;quot;: &amp;amp;#91;
                                                {
                                                    &amp;quot;envoyGrpc&amp;quot;: {
                                                        &amp;quot;clusterName&amp;quot;: &amp;quot;sds-grpc&amp;quot;
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            &amp;quot;alpnProtocols&amp;quot;: &amp;amp;#91;
                                &amp;quot;istio-peer-exchange&amp;quot;,
                                &amp;quot;h2&amp;quot;,
                                &amp;quot;http/1.1&amp;quot;
                            ]
                        },
                        &amp;quot;requireClientCertificate&amp;quot;: true
                    }
                },
                &amp;quot;name&amp;quot;: &amp;quot;virtualInbound&amp;quot;
            },
            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;prefixRanges&amp;quot;: &amp;amp;#91;
                        {
                            &amp;quot;addressPrefix&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                            &amp;quot;prefixLen&amp;quot;: 0
                        }
                    ]
                },
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;protocol&amp;quot;: &amp;quot;istio-peer-exchange&amp;quot;
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.stats&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.network.wasm.v3.Wasm&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;config&amp;quot;: {
                                    &amp;quot;configuration&amp;quot;: &amp;quot;{\n  \&amp;quot;debug\&amp;quot;: \&amp;quot;false\&amp;quot;,\n  \&amp;quot;stat_prefix\&amp;quot;: \&amp;quot;istio\&amp;quot;\n}\n&amp;quot;,
                                    &amp;quot;root_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;,
                                    &amp;quot;vm_config&amp;quot;: {
                                        &amp;quot;code&amp;quot;: {
                                            &amp;quot;local&amp;quot;: {
                                                &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.stats&amp;quot;
                                            }
                                        },
                                        &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;,
                                        &amp;quot;vm_id&amp;quot;: &amp;quot;tcp_stats_inbound&amp;quot;
                                    }
                                }
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                            &amp;quot;cluster&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                            &amp;quot;accessLog&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.file_access_log&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog&amp;quot;,
                                        &amp;quot;path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;,
                                        &amp;quot;format&amp;quot;: &amp;quot;&amp;amp;#91;%START_TIME%] \&amp;quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&amp;quot; %RESPONSE_CODE% %RESPONSE_FLAGS% \&amp;quot;%DYNAMIC_METADATA(istio.mixer:status)%\&amp;quot; \&amp;quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&amp;quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&amp;quot;%REQ(X-FORWARDED-FOR)%\&amp;quot; \&amp;quot;%REQ(USER-AGENT)%\&amp;quot; \&amp;quot;%REQ(X-REQUEST-ID)%\&amp;quot; \&amp;quot;%REQ(:AUTHORITY)%\&amp;quot; \&amp;quot;%UPSTREAM_HOST%\&amp;quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&amp;quot;
                                    }
                                }
                            ]
                        }
                    }
                ],
                &amp;quot;name&amp;quot;: &amp;quot;virtualInbound&amp;quot;
            },
            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;prefixRanges&amp;quot;: &amp;amp;#91;
                        {
                            &amp;quot;addressPrefix&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                            &amp;quot;prefixLen&amp;quot;: 0
                        }
                    ],
                    &amp;quot;transportProtocol&amp;quot;: &amp;quot;tls&amp;quot;,
                    &amp;quot;applicationProtocols&amp;quot;: &amp;amp;#91;
                        &amp;quot;http/1.0&amp;quot;,
                        &amp;quot;http/1.1&amp;quot;,
                        &amp;quot;h2c&amp;quot;,
                        &amp;quot;istio-http/1.0&amp;quot;,
                        &amp;quot;istio-http/1.1&amp;quot;,
                        &amp;quot;istio-h2&amp;quot;
                    ]
                },
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;protocol&amp;quot;: &amp;quot;istio-peer-exchange&amp;quot;
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                            &amp;quot;routeConfig&amp;quot;: {
                                &amp;quot;name&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                                &amp;quot;virtualHosts&amp;quot;: &amp;amp;#91;
                                    {
                                        &amp;quot;name&amp;quot;: &amp;quot;inbound|http|0&amp;quot;,
                                        &amp;quot;domains&amp;quot;: &amp;amp;#91;
                                            &amp;quot;*&amp;quot;
                                        ],
                                        &amp;quot;routes&amp;quot;: &amp;amp;#91;
                                            {
                                                &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;,
                                                &amp;quot;match&amp;quot;: {
                                                    &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
                                                },
                                                &amp;quot;route&amp;quot;: {
                                                    &amp;quot;cluster&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                                                    &amp;quot;timeout&amp;quot;: &amp;quot;0s&amp;quot;,
                                                    &amp;quot;maxGrpcTimeout&amp;quot;: &amp;quot;0s&amp;quot;
                                                },
                                                &amp;quot;decorator&amp;quot;: {
                                                    &amp;quot;operation&amp;quot;: &amp;quot;:0/*&amp;quot;
                                                }
                                            }
                                        ]
                                    }
                                ],
                                &amp;quot;validateClusters&amp;quot;: false
                            },
                            &amp;quot;httpFilters&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                                        &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&amp;quot;,
                                        &amp;quot;value&amp;quot;: {
                                            &amp;quot;config&amp;quot;: {
                                                &amp;quot;configuration&amp;quot;: &amp;quot;{}\n&amp;quot;,
                                                &amp;quot;vm_config&amp;quot;: {
                                                    &amp;quot;code&amp;quot;: {
                                                        &amp;quot;local&amp;quot;: {
                                                            &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.metadata_exchange&amp;quot;
                                                        }
                                                    },
                                                    &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.cors&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.cors.v2.Cors&amp;quot;
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.fault&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.fault.v2.HTTPFault&amp;quot;
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio.stats&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                                        &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&amp;quot;,
                                        &amp;quot;value&amp;quot;: {
                                            &amp;quot;config&amp;quot;: {
                                                &amp;quot;configuration&amp;quot;: &amp;quot;{\n  \&amp;quot;debug\&amp;quot;: \&amp;quot;false\&amp;quot;,\n  \&amp;quot;stat_prefix\&amp;quot;: \&amp;quot;istio\&amp;quot;\n}\n&amp;quot;,
                                                &amp;quot;root_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;,
                                                &amp;quot;vm_config&amp;quot;: {
                                                    &amp;quot;code&amp;quot;: {
                                                        &amp;quot;local&amp;quot;: {
                                                            &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.stats&amp;quot;
                                                        }
                                                    },
                                                    &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;,
                                                    &amp;quot;vm_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.router&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.router.v2.Router&amp;quot;
                                    }
                                }
                            ],
                            &amp;quot;tracing&amp;quot;: {
                                &amp;quot;clientSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                },
                                &amp;quot;randomSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                },
                                &amp;quot;overallSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                }
                            },
                            &amp;quot;serverName&amp;quot;: &amp;quot;istio-envoy&amp;quot;,
                            &amp;quot;streamIdleTimeout&amp;quot;: &amp;quot;0s&amp;quot;,
                            &amp;quot;accessLog&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.file_access_log&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog&amp;quot;,
                                        &amp;quot;path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;,
                                        &amp;quot;format&amp;quot;: &amp;quot;&amp;amp;#91;%START_TIME%] \&amp;quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&amp;quot; %RESPONSE_CODE% %RESPONSE_FLAGS% \&amp;quot;%DYNAMIC_METADATA(istio.mixer:status)%\&amp;quot; \&amp;quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&amp;quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&amp;quot;%REQ(X-FORWARDED-FOR)%\&amp;quot; \&amp;quot;%REQ(USER-AGENT)%\&amp;quot; \&amp;quot;%REQ(X-REQUEST-ID)%\&amp;quot; \&amp;quot;%REQ(:AUTHORITY)%\&amp;quot; \&amp;quot;%UPSTREAM_HOST%\&amp;quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&amp;quot;
                                    }
                                }
                            ],
                            &amp;quot;useRemoteAddress&amp;quot;: false,
                            &amp;quot;generateRequestId&amp;quot;: true,
                            &amp;quot;forwardClientCertDetails&amp;quot;: &amp;quot;APPEND_FORWARD&amp;quot;,
                            &amp;quot;setCurrentClientCertDetails&amp;quot;: {
                                &amp;quot;subject&amp;quot;: true,
                                &amp;quot;dns&amp;quot;: true,
                                &amp;quot;uri&amp;quot;: true
                            },
                            &amp;quot;upgradeConfigs&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;upgradeType&amp;quot;: &amp;quot;websocket&amp;quot;
                                }
                            ],
                            &amp;quot;normalizePath&amp;quot;: true
                        }
                    }
                ],
                &amp;quot;transportSocket&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;envoy.transport_sockets.tls&amp;quot;,
                    &amp;quot;typedConfig&amp;quot;: {
                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext&amp;quot;,
                        &amp;quot;commonTlsContext&amp;quot;: {
                            &amp;quot;tlsCertificateSdsSecretConfigs&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;,
                                    &amp;quot;sdsConfig&amp;quot;: {
                                        &amp;quot;apiConfigSource&amp;quot;: {
                                            &amp;quot;apiType&amp;quot;: &amp;quot;GRPC&amp;quot;,
                                            &amp;quot;grpcServices&amp;quot;: &amp;amp;#91;
                                                {
                                                    &amp;quot;envoyGrpc&amp;quot;: {
                                                        &amp;quot;clusterName&amp;quot;: &amp;quot;sds-grpc&amp;quot;
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            &amp;quot;combinedValidationContext&amp;quot;: {
                                &amp;quot;defaultValidationContext&amp;quot;: {},
                                &amp;quot;validationContextSdsSecretConfig&amp;quot;: {
                                    &amp;quot;name&amp;quot;: &amp;quot;ROOTCA&amp;quot;,
                                    &amp;quot;sdsConfig&amp;quot;: {
                                        &amp;quot;apiConfigSource&amp;quot;: {
                                            &amp;quot;apiType&amp;quot;: &amp;quot;GRPC&amp;quot;,
                                            &amp;quot;grpcServices&amp;quot;: &amp;amp;#91;
                                                {
                                                    &amp;quot;envoyGrpc&amp;quot;: {
                                                        &amp;quot;clusterName&amp;quot;: &amp;quot;sds-grpc&amp;quot;
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            &amp;quot;alpnProtocols&amp;quot;: &amp;amp;#91;
                                &amp;quot;h2&amp;quot;,
                                &amp;quot;http/1.1&amp;quot;
                            ]
                        },
                        &amp;quot;requireClientCertificate&amp;quot;: true
                    }
                },
                &amp;quot;name&amp;quot;: &amp;quot;virtualInbound-catchall-http&amp;quot;
            },
            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;prefixRanges&amp;quot;: &amp;amp;#91;
                        {
                            &amp;quot;addressPrefix&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                            &amp;quot;prefixLen&amp;quot;: 0
                        }
                    ],
                    &amp;quot;applicationProtocols&amp;quot;: &amp;amp;#91;
                        &amp;quot;http/1.0&amp;quot;,
                        &amp;quot;http/1.1&amp;quot;,
                        &amp;quot;h2c&amp;quot;
                    ]
                },
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;protocol&amp;quot;: &amp;quot;istio-peer-exchange&amp;quot;
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                            &amp;quot;routeConfig&amp;quot;: {
                                &amp;quot;name&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                                &amp;quot;virtualHosts&amp;quot;: &amp;amp;#91;
                                    {
                                        &amp;quot;name&amp;quot;: &amp;quot;inbound|http|0&amp;quot;,
                                        &amp;quot;domains&amp;quot;: &amp;amp;#91;
                                            &amp;quot;*&amp;quot;
                                        ],
                                        &amp;quot;routes&amp;quot;: &amp;amp;#91;
                                            {
                                                &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;,
                                                &amp;quot;match&amp;quot;: {
                                                    &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
                                                },
                                                &amp;quot;route&amp;quot;: {
                                                    &amp;quot;cluster&amp;quot;: &amp;quot;InboundPassthroughClusterIpv4&amp;quot;,
                                                    &amp;quot;timeout&amp;quot;: &amp;quot;0s&amp;quot;,
                                                    &amp;quot;maxGrpcTimeout&amp;quot;: &amp;quot;0s&amp;quot;
                                                },
                                                &amp;quot;decorator&amp;quot;: {
                                                    &amp;quot;operation&amp;quot;: &amp;quot;:0/*&amp;quot;
                                                }
                                            }
                                        ]
                                    }
                                ],
                                &amp;quot;validateClusters&amp;quot;: false
                            },
                            &amp;quot;httpFilters&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                                        &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&amp;quot;,
                                        &amp;quot;value&amp;quot;: {
                                            &amp;quot;config&amp;quot;: {
                                                &amp;quot;configuration&amp;quot;: &amp;quot;{}\n&amp;quot;,
                                                &amp;quot;vm_config&amp;quot;: {
                                                    &amp;quot;code&amp;quot;: {
                                                        &amp;quot;local&amp;quot;: {
                                                            &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.metadata_exchange&amp;quot;
                                                        }
                                                    },
                                                    &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.cors&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.cors.v2.Cors&amp;quot;
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.fault&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.fault.v2.HTTPFault&amp;quot;
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio.stats&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                                        &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&amp;quot;,
                                        &amp;quot;value&amp;quot;: {
                                            &amp;quot;config&amp;quot;: {
                                                &amp;quot;configuration&amp;quot;: &amp;quot;{\n  \&amp;quot;debug\&amp;quot;: \&amp;quot;false\&amp;quot;,\n  \&amp;quot;stat_prefix\&amp;quot;: \&amp;quot;istio\&amp;quot;\n}\n&amp;quot;,
                                                &amp;quot;root_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;,
                                                &amp;quot;vm_config&amp;quot;: {
                                                    &amp;quot;code&amp;quot;: {
                                                        &amp;quot;local&amp;quot;: {
                                                            &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.stats&amp;quot;
                                                        }
                                                    },
                                                    &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;,
                                                    &amp;quot;vm_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.router&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.router.v2.Router&amp;quot;
                                    }
                                }
                            ],
                            &amp;quot;tracing&amp;quot;: {
                                &amp;quot;clientSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                },
                                &amp;quot;randomSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                },
                                &amp;quot;overallSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                }
                            },
                            &amp;quot;serverName&amp;quot;: &amp;quot;istio-envoy&amp;quot;,
                            &amp;quot;streamIdleTimeout&amp;quot;: &amp;quot;0s&amp;quot;,
                            &amp;quot;accessLog&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.file_access_log&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog&amp;quot;,
                                        &amp;quot;path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;,
                                        &amp;quot;format&amp;quot;: &amp;quot;&amp;amp;#91;%START_TIME%] \&amp;quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&amp;quot; %RESPONSE_CODE% %RESPONSE_FLAGS% \&amp;quot;%DYNAMIC_METADATA(istio.mixer:status)%\&amp;quot; \&amp;quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&amp;quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&amp;quot;%REQ(X-FORWARDED-FOR)%\&amp;quot; \&amp;quot;%REQ(USER-AGENT)%\&amp;quot; \&amp;quot;%REQ(X-REQUEST-ID)%\&amp;quot; \&amp;quot;%REQ(:AUTHORITY)%\&amp;quot; \&amp;quot;%UPSTREAM_HOST%\&amp;quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&amp;quot;
                                    }
                                }
                            ],
                            &amp;quot;useRemoteAddress&amp;quot;: false,
                            &amp;quot;generateRequestId&amp;quot;: true,
                            &amp;quot;forwardClientCertDetails&amp;quot;: &amp;quot;APPEND_FORWARD&amp;quot;,
                            &amp;quot;setCurrentClientCertDetails&amp;quot;: {
                                &amp;quot;subject&amp;quot;: true,
                                &amp;quot;dns&amp;quot;: true,
                                &amp;quot;uri&amp;quot;: true
                            },
                            &amp;quot;upgradeConfigs&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;upgradeType&amp;quot;: &amp;quot;websocket&amp;quot;
                                }
                            ],
                            &amp;quot;normalizePath&amp;quot;: true
                        }
                    }
                ],
                &amp;quot;name&amp;quot;: &amp;quot;virtualInbound-catchall-http&amp;quot;
            },
            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;destinationPort&amp;quot;: 15021,
                    &amp;quot;prefixRanges&amp;quot;: &amp;amp;#91;
                        {
                            &amp;quot;addressPrefix&amp;quot;: &amp;quot;10.244.2.155&amp;quot;,
                            &amp;quot;prefixLen&amp;quot;: 32
                        }
                    ]
                },
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;protocol&amp;quot;: &amp;quot;istio-peer-exchange&amp;quot;
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.stats&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.network.wasm.v3.Wasm&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;config&amp;quot;: {
                                    &amp;quot;configuration&amp;quot;: &amp;quot;{\n  \&amp;quot;debug\&amp;quot;: \&amp;quot;false\&amp;quot;,\n  \&amp;quot;stat_prefix\&amp;quot;: \&amp;quot;istio\&amp;quot;\n}\n&amp;quot;,
                                    &amp;quot;root_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;,
                                    &amp;quot;vm_config&amp;quot;: {
                                        &amp;quot;code&amp;quot;: {
                                            &amp;quot;local&amp;quot;: {
                                                &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.stats&amp;quot;
                                            }
                                        },
                                        &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;,
                                        &amp;quot;vm_id&amp;quot;: &amp;quot;tcp_stats_inbound&amp;quot;
                                    }
                                }
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.tcp_proxy.v2.TcpProxy&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;inbound|15021|mgmt-15021|mgmtCluster&amp;quot;,
                            &amp;quot;cluster&amp;quot;: &amp;quot;inbound|15021|mgmt-15021|mgmtCluster&amp;quot;,
                            &amp;quot;accessLog&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.file_access_log&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog&amp;quot;,
                                        &amp;quot;path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;,
                                        &amp;quot;format&amp;quot;: &amp;quot;&amp;amp;#91;%START_TIME%] \&amp;quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&amp;quot; %RESPONSE_CODE% %RESPONSE_FLAGS% \&amp;quot;%DYNAMIC_METADATA(istio.mixer:status)%\&amp;quot; \&amp;quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&amp;quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&amp;quot;%REQ(X-FORWARDED-FOR)%\&amp;quot; \&amp;quot;%REQ(USER-AGENT)%\&amp;quot; \&amp;quot;%REQ(X-REQUEST-ID)%\&amp;quot; \&amp;quot;%REQ(:AUTHORITY)%\&amp;quot; \&amp;quot;%UPSTREAM_HOST%\&amp;quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&amp;quot;
                                    }
                                }
                            ]
                        }
                    }
                ],
                &amp;quot;name&amp;quot;: &amp;quot;10.244.2.155_15021&amp;quot;
            },
            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;destinationPort&amp;quot;: 9080,
                    &amp;quot;prefixRanges&amp;quot;: &amp;amp;#91;
                        {
                            &amp;quot;addressPrefix&amp;quot;: &amp;quot;10.244.2.155&amp;quot;,
                            &amp;quot;prefixLen&amp;quot;: 32
                        }
                    ],
                    &amp;quot;applicationProtocols&amp;quot;: &amp;amp;#91;
                        &amp;quot;istio&amp;quot;,
                        &amp;quot;istio-http/1.0&amp;quot;,
                        &amp;quot;istio-http/1.1&amp;quot;,
                        &amp;quot;istio-h2&amp;quot;
                    ]
                },
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;protocol&amp;quot;: &amp;quot;istio-peer-exchange&amp;quot;
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;inbound_10.244.2.155_9080&amp;quot;,
                            &amp;quot;routeConfig&amp;quot;: {
                                &amp;quot;name&amp;quot;: &amp;quot;inbound|9080|http|productpage.istio-bookinfo.svc.cluster.local&amp;quot;,
                                &amp;quot;virtualHosts&amp;quot;: &amp;amp;#91;
                                    {
                                        &amp;quot;name&amp;quot;: &amp;quot;inbound|http|9080&amp;quot;,
                                        &amp;quot;domains&amp;quot;: &amp;amp;#91;
                                            &amp;quot;*&amp;quot;
                                        ],
                                        &amp;quot;routes&amp;quot;: &amp;amp;#91;
                                            {
                                                &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;,
                                                &amp;quot;match&amp;quot;: {
                                                    &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
                                                },
                                                &amp;quot;route&amp;quot;: {
                                                    &amp;quot;cluster&amp;quot;: &amp;quot;inbound|9080|http|productpage.istio-bookinfo.svc.cluster.local&amp;quot;,
                                                    &amp;quot;timeout&amp;quot;: &amp;quot;0s&amp;quot;,
                                                    &amp;quot;maxGrpcTimeout&amp;quot;: &amp;quot;0s&amp;quot;
                                                },
                                                &amp;quot;decorator&amp;quot;: {
                                                    &amp;quot;operation&amp;quot;: &amp;quot;productpage.istio-bookinfo.svc.cluster.local:9080/*&amp;quot;
                                                }
                                            }
                                        ]
                                    }
                                ],
                                &amp;quot;validateClusters&amp;quot;: false
                            },
                            &amp;quot;httpFilters&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                                        &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&amp;quot;,
                                        &amp;quot;value&amp;quot;: {
                                            &amp;quot;config&amp;quot;: {
                                                &amp;quot;configuration&amp;quot;: &amp;quot;{}\n&amp;quot;,
                                                &amp;quot;vm_config&amp;quot;: {
                                                    &amp;quot;code&amp;quot;: {
                                                        &amp;quot;local&amp;quot;: {
                                                            &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.metadata_exchange&amp;quot;
                                                        }
                                                    },
                                                    &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio_authn&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig&amp;quot;,
                                        &amp;quot;policy&amp;quot;: {
                                            &amp;quot;peers&amp;quot;: &amp;amp;#91;
                                                {
                                                    &amp;quot;mtls&amp;quot;: {
                                                        &amp;quot;mode&amp;quot;: &amp;quot;PERMISSIVE&amp;quot;
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.cors&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.cors.v2.Cors&amp;quot;
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.fault&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.fault.v2.HTTPFault&amp;quot;
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio.stats&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                                        &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&amp;quot;,
                                        &amp;quot;value&amp;quot;: {
                                            &amp;quot;config&amp;quot;: {
                                                &amp;quot;configuration&amp;quot;: &amp;quot;{\n  \&amp;quot;debug\&amp;quot;: \&amp;quot;false\&amp;quot;,\n  \&amp;quot;stat_prefix\&amp;quot;: \&amp;quot;istio\&amp;quot;\n}\n&amp;quot;,
                                                &amp;quot;root_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;,
                                                &amp;quot;vm_config&amp;quot;: {
                                                    &amp;quot;code&amp;quot;: {
                                                        &amp;quot;local&amp;quot;: {
                                                            &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.stats&amp;quot;
                                                        }
                                                    },
                                                    &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;,
                                                    &amp;quot;vm_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.router&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.router.v2.Router&amp;quot;
                                    }
                                }
                            ],
                            &amp;quot;tracing&amp;quot;: {
                                &amp;quot;clientSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                },
                                &amp;quot;randomSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                },
                                &amp;quot;overallSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                }
                            },
                            &amp;quot;serverName&amp;quot;: &amp;quot;istio-envoy&amp;quot;,
                            &amp;quot;streamIdleTimeout&amp;quot;: &amp;quot;0s&amp;quot;,
                            &amp;quot;accessLog&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.file_access_log&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog&amp;quot;,
                                        &amp;quot;path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;,
                                        &amp;quot;format&amp;quot;: &amp;quot;&amp;amp;#91;%START_TIME%] \&amp;quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&amp;quot; %RESPONSE_CODE% %RESPONSE_FLAGS% \&amp;quot;%DYNAMIC_METADATA(istio.mixer:status)%\&amp;quot; \&amp;quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&amp;quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&amp;quot;%REQ(X-FORWARDED-FOR)%\&amp;quot; \&amp;quot;%REQ(USER-AGENT)%\&amp;quot; \&amp;quot;%REQ(X-REQUEST-ID)%\&amp;quot; \&amp;quot;%REQ(:AUTHORITY)%\&amp;quot; \&amp;quot;%UPSTREAM_HOST%\&amp;quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&amp;quot;
                                    }
                                }
                            ],
                            &amp;quot;useRemoteAddress&amp;quot;: false,
                            &amp;quot;generateRequestId&amp;quot;: true,
                            &amp;quot;forwardClientCertDetails&amp;quot;: &amp;quot;APPEND_FORWARD&amp;quot;,
                            &amp;quot;setCurrentClientCertDetails&amp;quot;: {
                                &amp;quot;subject&amp;quot;: true,
                                &amp;quot;dns&amp;quot;: true,
                                &amp;quot;uri&amp;quot;: true
                            },
                            &amp;quot;upgradeConfigs&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;upgradeType&amp;quot;: &amp;quot;websocket&amp;quot;
                                }
                            ],
                            &amp;quot;normalizePath&amp;quot;: true
                        }
                    }
                ],
                &amp;quot;transportSocket&amp;quot;: {
                    &amp;quot;name&amp;quot;: &amp;quot;envoy.transport_sockets.tls&amp;quot;,
                    &amp;quot;typedConfig&amp;quot;: {
                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext&amp;quot;,
                        &amp;quot;commonTlsContext&amp;quot;: {
                            &amp;quot;tlsCertificateSdsSecretConfigs&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;,
                                    &amp;quot;sdsConfig&amp;quot;: {
                                        &amp;quot;apiConfigSource&amp;quot;: {
                                            &amp;quot;apiType&amp;quot;: &amp;quot;GRPC&amp;quot;,
                                            &amp;quot;grpcServices&amp;quot;: &amp;amp;#91;
                                                {
                                                    &amp;quot;envoyGrpc&amp;quot;: {
                                                        &amp;quot;clusterName&amp;quot;: &amp;quot;sds-grpc&amp;quot;
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ],
                            &amp;quot;combinedValidationContext&amp;quot;: {
                                &amp;quot;defaultValidationContext&amp;quot;: {},
                                &amp;quot;validationContextSdsSecretConfig&amp;quot;: {
                                    &amp;quot;name&amp;quot;: &amp;quot;ROOTCA&amp;quot;,
                                    &amp;quot;sdsConfig&amp;quot;: {
                                        &amp;quot;apiConfigSource&amp;quot;: {
                                            &amp;quot;apiType&amp;quot;: &amp;quot;GRPC&amp;quot;,
                                            &amp;quot;grpcServices&amp;quot;: &amp;amp;#91;
                                                {
                                                    &amp;quot;envoyGrpc&amp;quot;: {
                                                        &amp;quot;clusterName&amp;quot;: &amp;quot;sds-grpc&amp;quot;
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            },
                            &amp;quot;alpnProtocols&amp;quot;: &amp;amp;#91;
                                &amp;quot;h2&amp;quot;,
                                &amp;quot;http/1.1&amp;quot;
                            ]
                        },
                        &amp;quot;requireClientCertificate&amp;quot;: true
                    }
                },
                &amp;quot;name&amp;quot;: &amp;quot;10.244.2.155_9080&amp;quot;
            },
            {
                &amp;quot;filterChainMatch&amp;quot;: {
                    &amp;quot;destinationPort&amp;quot;: 9080,
                    &amp;quot;prefixRanges&amp;quot;: &amp;amp;#91;
                        {
                            &amp;quot;addressPrefix&amp;quot;: &amp;quot;10.244.2.155&amp;quot;,
                            &amp;quot;prefixLen&amp;quot;: 32
                        }
                    ]
                },
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                            &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.tcp.metadataexchange.config.MetadataExchange&amp;quot;,
                            &amp;quot;value&amp;quot;: {
                                &amp;quot;protocol&amp;quot;: &amp;quot;istio-peer-exchange&amp;quot;
                            }
                        }
                    },
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.http_connection_manager&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager&amp;quot;,
                            &amp;quot;statPrefix&amp;quot;: &amp;quot;inbound_10.244.2.155_9080&amp;quot;,
                            &amp;quot;routeConfig&amp;quot;: {
                                &amp;quot;name&amp;quot;: &amp;quot;inbound|9080|http|productpage.istio-bookinfo.svc.cluster.local&amp;quot;,
                                &amp;quot;virtualHosts&amp;quot;: &amp;amp;#91;
                                    {
                                        &amp;quot;name&amp;quot;: &amp;quot;inbound|http|9080&amp;quot;,
                                        &amp;quot;domains&amp;quot;: &amp;amp;#91;
                                            &amp;quot;*&amp;quot;
                                        ],
                                        &amp;quot;routes&amp;quot;: &amp;amp;#91;
                                            {
                                                &amp;quot;name&amp;quot;: &amp;quot;default&amp;quot;,
                                                &amp;quot;match&amp;quot;: {
                                                    &amp;quot;prefix&amp;quot;: &amp;quot;/&amp;quot;
                                                },
                                                &amp;quot;route&amp;quot;: {
                                                    &amp;quot;cluster&amp;quot;: &amp;quot;inbound|9080|http|productpage.istio-bookinfo.svc.cluster.local&amp;quot;,
                                                    &amp;quot;timeout&amp;quot;: &amp;quot;0s&amp;quot;,
                                                    &amp;quot;maxGrpcTimeout&amp;quot;: &amp;quot;0s&amp;quot;
                                                },
                                                &amp;quot;decorator&amp;quot;: {
                                                    &amp;quot;operation&amp;quot;: &amp;quot;productpage.istio-bookinfo.svc.cluster.local:9080/*&amp;quot;
                                                }
                                            }
                                        ]
                                    }
                                ],
                                &amp;quot;validateClusters&amp;quot;: false
                            },
                            &amp;quot;httpFilters&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio.metadata_exchange&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                                        &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&amp;quot;,
                                        &amp;quot;value&amp;quot;: {
                                            &amp;quot;config&amp;quot;: {
                                                &amp;quot;configuration&amp;quot;: &amp;quot;{}\n&amp;quot;,
                                                &amp;quot;vm_config&amp;quot;: {
                                                    &amp;quot;code&amp;quot;: {
                                                        &amp;quot;local&amp;quot;: {
                                                            &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.metadata_exchange&amp;quot;
                                                        }
                                                    },
                                                    &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio_authn&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/istio.envoy.config.filter.http.authn.v2alpha1.FilterConfig&amp;quot;,
                                        &amp;quot;policy&amp;quot;: {
                                            &amp;quot;peers&amp;quot;: &amp;amp;#91;
                                                {
                                                    &amp;quot;mtls&amp;quot;: {
                                                        &amp;quot;mode&amp;quot;: &amp;quot;PERMISSIVE&amp;quot;
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.cors&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.cors.v2.Cors&amp;quot;
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.fault&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.fault.v2.HTTPFault&amp;quot;
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;istio.stats&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/udpa.type.v1.TypedStruct&amp;quot;,
                                        &amp;quot;typeUrl&amp;quot;: &amp;quot;type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm&amp;quot;,
                                        &amp;quot;value&amp;quot;: {
                                            &amp;quot;config&amp;quot;: {
                                                &amp;quot;configuration&amp;quot;: &amp;quot;{\n  \&amp;quot;debug\&amp;quot;: \&amp;quot;false\&amp;quot;,\n  \&amp;quot;stat_prefix\&amp;quot;: \&amp;quot;istio\&amp;quot;\n}\n&amp;quot;,
                                                &amp;quot;root_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;,
                                                &amp;quot;vm_config&amp;quot;: {
                                                    &amp;quot;code&amp;quot;: {
                                                        &amp;quot;local&amp;quot;: {
                                                            &amp;quot;inline_string&amp;quot;: &amp;quot;envoy.wasm.stats&amp;quot;
                                                        }
                                                    },
                                                    &amp;quot;runtime&amp;quot;: &amp;quot;envoy.wasm.runtime.null&amp;quot;,
                                                    &amp;quot;vm_id&amp;quot;: &amp;quot;stats_inbound&amp;quot;
                                                }
                                            }
                                        }
                                    }
                                },
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.router&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.http.router.v2.Router&amp;quot;
                                    }
                                }
                            ],
                            &amp;quot;tracing&amp;quot;: {
                                &amp;quot;clientSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                },
                                &amp;quot;randomSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                },
                                &amp;quot;overallSampling&amp;quot;: {
                                    &amp;quot;value&amp;quot;: 100
                                }
                            },
                            &amp;quot;serverName&amp;quot;: &amp;quot;istio-envoy&amp;quot;,
                            &amp;quot;streamIdleTimeout&amp;quot;: &amp;quot;0s&amp;quot;,
                            &amp;quot;accessLog&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;name&amp;quot;: &amp;quot;envoy.file_access_log&amp;quot;,
                                    &amp;quot;typedConfig&amp;quot;: {
                                        &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.accesslog.v2.FileAccessLog&amp;quot;,
                                        &amp;quot;path&amp;quot;: &amp;quot;/dev/stdout&amp;quot;,
                                        &amp;quot;format&amp;quot;: &amp;quot;&amp;amp;#91;%START_TIME%] \&amp;quot;%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\&amp;quot; %RESPONSE_CODE% %RESPONSE_FLAGS% \&amp;quot;%DYNAMIC_METADATA(istio.mixer:status)%\&amp;quot; \&amp;quot;%UPSTREAM_TRANSPORT_FAILURE_REASON%\&amp;quot; %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \&amp;quot;%REQ(X-FORWARDED-FOR)%\&amp;quot; \&amp;quot;%REQ(USER-AGENT)%\&amp;quot; \&amp;quot;%REQ(X-REQUEST-ID)%\&amp;quot; \&amp;quot;%REQ(:AUTHORITY)%\&amp;quot; \&amp;quot;%UPSTREAM_HOST%\&amp;quot; %UPSTREAM_CLUSTER% %UPSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_LOCAL_ADDRESS% %DOWNSTREAM_REMOTE_ADDRESS% %REQUESTED_SERVER_NAME% %ROUTE_NAME%\n&amp;quot;
                                    }
                                }
                            ],
                            &amp;quot;useRemoteAddress&amp;quot;: false,
                            &amp;quot;generateRequestId&amp;quot;: true,
                            &amp;quot;forwardClientCertDetails&amp;quot;: &amp;quot;APPEND_FORWARD&amp;quot;,
                            &amp;quot;setCurrentClientCertDetails&amp;quot;: {
                                &amp;quot;subject&amp;quot;: true,
                                &amp;quot;dns&amp;quot;: true,
                                &amp;quot;uri&amp;quot;: true
                            },
                            &amp;quot;upgradeConfigs&amp;quot;: &amp;amp;#91;
                                {
                                    &amp;quot;upgradeType&amp;quot;: &amp;quot;websocket&amp;quot;
                                }
                            ],
                            &amp;quot;normalizePath&amp;quot;: true
                        }
                    }
                ],
                &amp;quot;name&amp;quot;: &amp;quot;10.244.2.155_9080&amp;quot;
            }
        ],
        &amp;quot;listenerFilters&amp;quot;: &amp;amp;#91;
            {
                &amp;quot;name&amp;quot;: &amp;quot;envoy.listener.original_dst&amp;quot;,
                &amp;quot;typedConfig&amp;quot;: {
                    &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.listener.original_dst.v2.OriginalDst&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;envoy.listener.tls_inspector&amp;quot;,
                &amp;quot;typedConfig&amp;quot;: {
                    &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.listener.tls_inspector.v2.TlsInspector&amp;quot;
                }
            },
            {
                &amp;quot;name&amp;quot;: &amp;quot;envoy.listener.http_inspector&amp;quot;,
                &amp;quot;typedConfig&amp;quot;: {
                    &amp;quot;@type&amp;quot;: &amp;quot;type.googleapis.com/envoy.config.filter.listener.http_inspector.v2.HttpInspector&amp;quot;
                }
            }
        ],
        &amp;quot;listenerFiltersTimeout&amp;quot;: &amp;quot;1s&amp;quot;,
        &amp;quot;continueOnListenerFiltersTimeout&amp;quot;: true,
        &amp;quot;trafficDirection&amp;quot;: &amp;quot;INBOUND&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check more istio practice detail at my tech blog &lt;a href=&#34;https://imesh.club&#34;&gt;https://imesh.club&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Istio | Enhancing ingress service capabilities</title>
      <link>/posts/f5-istio-work-together/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/f5-istio-work-together/</guid>
      <description>F5 make istio works better</description>
      <content>&lt;p&gt;In the Istio system, in order to ensure the unity of policy coordination and experience, users will consider using Istio&amp;rsquo;s own Ingressgateway as the entrance to north-south traffic. Ingressgateway is generally deployed by deployment of multiple pods, scattered on multiple nodes of the cluster, depending on Due to the specific exposure type, especially in on-prem deployment, it is still necessary to deploy relevant load balancers outside the k8s cluster to load balance these ingressgateways, on the one hand, it can avoid access difficulties and operation and maintenance difficulties caused by multiple entrances. On the other hand, the high-performance and high-reliability F5 BIGIP can provide more function control and security value-added services for k8s cluster entrance traffic, which is similar to the Ingress controller.&lt;/p&gt;
&lt;p&gt;Unlike exposing ordinary service svc to external BIG-IP, ingressgateway itself is a collection point of various service ports. It may itself listen to many ports, so it is not easy to treat ingressgateway as a single ordinary svc. This article mainly explains how to combine Istio ingressgateway with BIG-IP to enhance the entrance business capability.&lt;/p&gt;
&lt;p&gt;The possible methods on the network structure are:&lt;/p&gt;
&lt;p&gt;External load balancer &amp;mdash; access to &amp;ndash;&amp;gt; ingressgateway&amp;rsquo;s nodeport port&lt;/p&gt;
&lt;p&gt;External load balancer &amp;mdash; access to &amp;ndash;&amp;gt; ingressgateway direct endpoints port (direct to pod)&lt;/p&gt;
&lt;p&gt;From the point of view of performance, it is naturally the second direct pod method mentioned above that has better performance, depending on the network model of the k8s cluster. If the external and pod can be directly routed or the two-layer direct connection is naturally the easiest, if it cannot be directly routed, it needs to be based on vxlan and other tunnels to achieve pod direct. F5 BIGIP supports Layer 2 direct, dynamic routing or vxlan tunnel mode. Refer to this article for detailed network deployment structure , or search for related articles in this blog. In the following, we assume that F5 BIGIP has implemented vxlan with k8s cluster, which can reach the pod directly. The final data path is as follows:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;client&amp;ndash;&amp;gt;F5BIGIP&amp;ndash;&amp;gt;Istio ingressgateway pod&amp;ndash;&amp;gt;endpoints&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The underlying implementation of Istio Ingressgateway is envoy. When we publish a service to Ingressgateway through Gateway+VirtualService resource, Ingressgateway will listen to the port specified in Gateway. Therefore, once a new service is released, there may be a new listening port. However, when we deploy the ingressgateway pod, we will not configure all the external mappings in advance. That is to say, the port that the container in the pod listens to is not configured in the deployment of the pod. Don’t worry, it can be directly accessed at this time. This listening port on the pod, although the deployment port is not specified in advance.&lt;/p&gt;
&lt;p&gt;So how to load balance for Ingressgateway through BIGIP and dynamically discover these new monitoring services? The answer is naturally the solution described in this article. F5 BIGIP provides a controller that runs inside k8s and automatically pushes these changes to BIGIP. on. Since the same k8s svc contains one more port, you need to pay attention to the servicePort parameter when publishing this k8s svc to F5. The specific publishing process refers to the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deploy Istio Gateway+VirtualService resources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Edit the k8s svc corresponding to the existing Ingressgateway and add new port and target port configurations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure a new F5 configmap resource and specify the corresponding servicePort to publish the new service&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;demo&#34;&gt;DEMO:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;First check the existing Ingressgateway pod ports are as follows, port 32400 is not exposed in the container port&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        name: istio-proxy
        ports:
        - containerPort: 15020
          protocol: TCP
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        - containerPort: 31400
          protocol: TCP
        - containerPort: 15443
          protocol: TCP
        - containerPort: 15011
          protocol: TCP
        - containerPort: 15012
          protocol: TCP
        - containerPort: 8060
          protocol: TCP
        - containerPort: 853
          protocol: TCP
        - containerPort: 15090
          name: http-envoy-prom
          protocol: TCP
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Deploy Istio Gateway and VirtualService&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: tcp-echo-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 32400
      name: tcp
      protocol: TCP
    hosts:
    - &amp;quot;*&amp;quot;
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: tcp-echo-destination
spec:
  host: tcp-echo
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: tcp-echo
spec:
  hosts:
  - &amp;quot;*&amp;quot;
  gateways:
  - tcp-echo-gateway
  tcp:
  - match:
    - port: 32400   ###########32400端口监听
    route:
    - destination:
        host: tcp-echo
        port:
          number: 9000
        subset: v1
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;After the deployment is complete, check envoy to confirm that the monitoring has been issued&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; {
        &amp;quot;name&amp;quot;: &amp;quot;0.0.0.0_32400&amp;quot;,
        &amp;quot;address&amp;quot;: {
            &amp;quot;socketAddress&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
                &amp;quot;portValue&amp;quot;: 32400
            }
        },
        &amp;quot;filterChains&amp;quot;: &amp;amp;#91;
            {
                &amp;quot;filters&amp;quot;: &amp;amp;#91;
      。。。。。。。。。。省略。。。。。。。。。。
                    {
                        &amp;quot;name&amp;quot;: &amp;quot;envoy.tcp_proxy&amp;quot;,
                        &amp;quot;typedConfig&amp;quot;: {
                            &amp;quot;@type&amp;quot;: 
。。。。。

                            &amp;quot;cluster&amp;quot;: &amp;quot;outbound|9000|v1|tcp-echo.istio-io-tcp-traffic-shifting.svc.cluster.local&amp;quot;,

。。。。。
                        }
                    }
                ]
            }
        ],
        &amp;quot;trafficDirection&amp;quot;: &amp;quot;OUTBOUND&amp;quot;
    },
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Modify the existing Ingressgateway svc, increase the external exposure of 32400 port&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kubectl edit svc istio-ingressgateway -n istio-system -o yaml

修改前：
  ports:
  - name: status-port
    nodePort: 31702
    port: 15020
    protocol: TCP
    targetPort: 15020
  - name: http2
    nodePort: 31547
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    nodePort: 31956
    port: 443
    protocol: TCP
    targetPort: 8443
  - name: tcp
    nodePort: 30775
    port: 31400
    protocol: TCP
    targetPort: 31400
  - name: tls
    nodePort: 30536
    port: 15443
    protocol: TCP
    targetPort: 15443
  selector:
    app: istio-ingressgateway
    istio: ingressgateway
  sessionAffinity: None
  type: LoadBalancer

修改后：

  ports:
  - name: status-port
    nodePort: 31702
    port: 15020
    protocol: TCP
    targetPort: 15020
  - name: http2
    nodePort: 31547
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    nodePort: 31956
    port: 443
    protocol: TCP
    targetPort: 8443
  - name: tcp
    nodePort: 30775
    port: 31400
    protocol: TCP
    targetPort: 31400
  - name: tcp2
    nodePort: 30776
    port: 32400
    protocol: TCP
    targetPort: 32400  #########新增端口
  - name: tls
    nodePort: 30536
    port: 15443
    protocol: TCP
    targetPort: 15443


root@k8s-master-v1-16 ~]# kubectl  get svc -n istio-system
NAME                        TYPE           CLUSTER-IP       EXTERNAL-IP   PORT(S)                                                                                      AGE
grafana                     ClusterIP      10.96.165.101    &amp;amp;lt;none&amp;gt;        3000/TCP                                                                                     2d
istio-egressgateway         ClusterIP      10.110.88.185    &amp;amp;lt;none&amp;gt;        80/TCP,443/TCP,15443/TCP                                                                     2d
istio-ingressgateway        LoadBalancer   10.96.122.225    &amp;amp;lt;pending&amp;gt;     15020:31702/TCP,80:31547/TCP,443:31956/TCP,31400:30775/TCP,32400:30776/TCP,15443:30536/TCP   2d
istiod                      ClusterIP      10.102.252.88    &amp;amp;lt;none&amp;gt;        15010/TCP,15012/TCP,443/TCP,15014/TCP,53/UDP,853/TCP                                         2d
jaeger-agent                ClusterIP      None             &amp;amp;lt;none&amp;gt;        5775/UDP,6831/UDP,6832/UDP                                                                   2d
jaeger-collector            ClusterIP      10.105.130.171   &amp;amp;lt;none&amp;gt;        14267/TCP,14268/TCP,14250/TCP                                                                2d
jaeger-collector-headless   ClusterIP      None             &amp;amp;lt;none&amp;gt;        14250/TCP                                                                                    2d
jaeger-query                ClusterIP      10.99.139.251    &amp;amp;lt;none&amp;gt;        16686/TCP                                                                                    2d
kiali                       ClusterIP      10.101.189.237   &amp;amp;lt;none&amp;gt;        20001/TCP                                                                                    2d
prometheus                  ClusterIP      10.109.157.108   &amp;amp;lt;none&amp;gt;        9090/TCP                                                                                     2d
tracing                     ClusterIP      10.101.62.56     &amp;amp;lt;none&amp;gt;        80/TCP                                                                                       2d
zipkin                      ClusterIP      10.98.181.246    &amp;amp;lt;none&amp;gt;        9411/TCP
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Publish the 32400 servicePort to F5, at this time you need to add an F5 configmap, pay attention to the Chinese comments&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kind: ConfigMap
apiVersion: v1
metadata:
  name: istio-ingressgateway.32400.vs
  namespace: istio-system
  labels:
    f5type: virtual-server
data:
  # See the f5-schema table for schema-controller compatibility
  # https://clouddocs.f5.com/containers/latest/releases_and_versioning.html#f5-schema
  schema: &amp;quot;f5schemadb://bigip-virtual-server_v0.1.7.json&amp;quot;
  data: |
    {
      &amp;quot;virtualServer&amp;quot;: {
        &amp;quot;backend&amp;quot;: {
          &amp;quot;serviceName&amp;quot;: &amp;quot;istio-ingressgateway&amp;quot;,
          &amp;quot;servicePort&amp;quot;: 32400
####It is important here. The port of the corresponding k8s svc is filled in here. The F5 CIS controller will automatically find the targetPort (CIS cluster mode) or nodeport (CIS nodeport mode) corresponding to the servicePort
        },
        &amp;quot;frontend&amp;quot;: {
          &amp;quot;virtualAddress&amp;quot;: {
            &amp;quot;port&amp;quot;: 31400,
            &amp;quot;bindAddr&amp;quot;: &amp;quot;172.16.100.195&amp;quot;
          },
          &amp;quot;partition&amp;quot;: &amp;quot;k8s&amp;quot;,
          &amp;quot;balance&amp;quot;: &amp;quot;least-connections-member&amp;quot;,
          &amp;quot;mode&amp;quot;: &amp;quot;tcp&amp;quot;
        }
      }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;F5 will automatically generate the following configuration in the red box:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/06/1592839169293-1024x418.jpg?v=1592839202&#34; alt=&#34;F5 will automatically generate the following configuration in the red box:&#34;&gt;&lt;/p&gt;
&lt;p&gt;Simulate access to the business from the outside, you can see that it can be accessed normally&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# jlin @ Mac in ~ &amp;amp;#91;myf5.net]
$ for i in {1..2000}; do (date; sleep 1) | nc istiobookinfo.lab.f5se.io 32400; done
one Mon Jun 22 22:24:17 CST 2020
one Mon Jun 22 22:24:18 CST 2020
one Mon Jun 22 22:24:19 CST 2020
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, the newly released service monitor on Istio Ingressgateway is successfully automatically posted to BIGIP. Users only need to access BIGIP&amp;rsquo;s VS to access services within k8s (on Istio Ingressgateway).&lt;/p&gt;
&lt;p&gt;For the subsequent release of other new port services, repeat the above steps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: The above configuration uses the non-F5 AS3 configmap configuration method, if you are using CIS 2.0, you need to pay attention to this issue
&lt;a href=&#34;https://github.com/F5Networks/k8s-bigip-ctlr/issues/1341&#34;&gt;https://github.com/F5Networks/k8s-bigip-ctlr/issues/1341&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check more istio practice detail at my tech blog &lt;a href=&#34;https://imesh.club&#34;&gt;https://imesh.club&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Security | NGINX and oAuth2/OIDC series one</title>
      <link>/posts/nginx-oauth2-oidc-series/</link>
      <pubDate>Sun, 10 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/nginx-oauth2-oidc-series/</guid>
      <description>NGINX as different role in oAuth/OIDC</description>
      <content>&lt;p&gt;Nowadays, the Internet has penetrated various life and business scenarios. Just like people have never been a simple individual in real life, we need to have many complicated relationship networks. The same is true of Internet applications, and it is now difficult to see which application can develop completely independently without having a relationship with its surroundings. Therefore, today&amp;rsquo;s applications are very particular about their own ecology, and they need to share a lot of information with each other. These complex relationships raise a very important issue: identity authentication, resource authorization, and account maintenance. Of course there is API authentication access control.&lt;/p&gt;
&lt;p&gt;For example, in your daily life, you may need to use dozens of apps. Each of these apps has an independent account and password. You need to maintain different accounts and passwords. You may have one set of accounts for all apps in order to save trouble. Password, so after the application A was violently vaulted, you are forced to change all the passwords of the accounts of these dozens of apps. You may also be more concerned about the security of your account, so you use a fixed + changing password to combine dozens of APP accounts, which is very good, can help alleviate a large part of security issues, and at the same time reduce your password maintenance. Question (Is the memory okay), but these apps may not be able to follow the fixed + change mode you envisioned as you wish, some may only support numbers, some support numbers plus passwords, and some still It requires a minimum length and a more complicated combination, so you start to use a small book to record the password format of different applications (well, at least there was a stage where I did this, recorded in a description language on the computer, when forgotten At that time, go to find this hint in the computer).&lt;/p&gt;
&lt;p&gt;Is there a better way?&lt;/p&gt;
&lt;p&gt;If you trust a company that has done well in security and has a good reputation system, can you use this account to run the Internet? I believe we already have the answer. Today, we may have used it a lot of times. When you log in to the XX application, you are used to skip user registration and go to click &amp;ldquo;log in with ***&amp;rdquo;, in the pop-up interface Here is a very sacred point under &amp;ldquo;Agree&amp;rdquo;. So you no longer need to remember so many application accounts. This is actually a typical open authorization (Open Authorization) referred to as oAuth (current version is 2, also known as oAuth2).&lt;/p&gt;
&lt;p&gt;Um, you seem to be lying to me. You have said so much, it seems to be all about authentication, why it is said to be Authorization. Yes, you are right, but I did not lie to you, but there are some silly problems that are not easy to distinguish. The original purpose of this oAuth design is to solve the problem of data access between interest groups, just like us As mentioned at the beginning, there is a problem of mutual access to a large amount of data between applications of different companies. For example, company A has developed an online photo printing application, but this company does not operate photo storage services. Your photos may exist in B, C, D. On the network disks of different companies (Yes, in order to take advantage of the early days, I did occupy a lot of the network disks of many companies. Later, some of their network disks used rogues to send a notice and couldn&amp;rsquo;t do anything. Fortunately, I used RAID1), so this caused problems. How do you send photos to this online printing company, download them from the BCD network disk and send them to them? Give the account number and password of the network disk to the printing company? Obviously these methods will not work. If you rely on downloading and uploading, it is estimated that you are too lazy to get it. If you are giving an account password, unless you are not sober.&lt;/p&gt;
&lt;p&gt;For printing companies and network disk service providers, they also have similar troubles. If users are allowed to upload and download, the user experience is too bad, and they also maintain a whole set of such systems. Therefore, printing companies hope that there is a simple way to connect at the same time. BCD network disk company, as long as one of the users of these network disks agrees, it will automatically pull down the user photos from these network disks to print, and own 0 inventory. For the BCD network disk company, storing cold data alone is obviously not the purpose. Moreover, you are still in piao, you have to do tricks, so the network disk company also wants to dock these companies that print pictures, but for them It is necessary to solve the user&amp;rsquo;s security issues on accounts and photos.&lt;/p&gt;
&lt;p&gt;So it can be seen that for these three different stakeholders, there is a desire to have something to solve their problems at the same time. This is authorization. When the user wants to print the photo, the printing company guides the customer to enter the network disk interface. The user is Log in to the network disk and authorize the network disk to allow which of my resources to be shared with the photo printing company. For example, share your beautiful photos to print, and the original photos are not allowed to be accessed by the printing company, which is very safe. So we can summarize:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/1589076716809-1024x441.jpg?v=1589076733&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;oAuth is used to solve such a scenario, so you can see that it is an authorization process. But you haven’t said why it was a certification at the beginning, hmmm. After all, I also spent a lot of time to learn it. It is also a process after finishing it. Just like this article, it is a series. Only the following articles can be finished:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NGINX as (Client) role and resource service role proxy in oAuth, Authorization code mode (with oAuth proxy service)-this article&lt;/li&gt;
&lt;li&gt;NGINX as (Client) role and resource service role proxy in oAuth, Authorization code mode (Without the help of oAuth proxy service)&lt;/li&gt;
&lt;li&gt;NGINX authenticates and recognizes id_token in OIDC (Implicit mode)&lt;/li&gt;
&lt;li&gt;NGINX acts as a resource service role in oAuth, proxy authentication and identity information recognition (Token introspection)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Why is authentication involved here? In fact, you will find that during the authorization process, the identity is obviously inescapable. The authorization must be based on a certain user, so the oAuth specification does not emphasize that you can’t do this. In addition to authorization, plus sometimes, we really do not need authorization scenarios, but want to reduce our account maintenance, use one company account to log in many products of other companies, so there are a lot of oAuth For authentication scenarios, of course, it is precisely because oAuth does not make many standardized definitions for authentication, which leads to different designs of programs of different companies when implementing authentication. There is no standard way to obtain user information. A common standard scope, based on this, OpenID Connect (OIDC) appeared. OIDC is based on oAuth. The communication process of several parties is the same. The difference is that OIDC is sending to IdP (the party that stores the account and performs verification). When the request is initiated, the openid tag will be brought in the scope. In the end, the information returned by the IdP will also carry an ID token (JWT) in addition to the oAuth normal access_token, and the application can use it as a login after getting this ID token. If you need more additional information, you can take the access_token and go to the userinfo endpoint to get more user information. In addition, OIDC is a protocol family and contains many other specifications, such as session management and registration discovery. Because oAuth and OIDC are very similar in communication mechanism, we often confuse the two. We often say that oAuth authentication should actually be oAuthZ, and OIDC is oAuthN.&lt;/p&gt;
&lt;p&gt;Back to this article, in this article, we will follow the interaction of a standard oAuth authorization code mode to see what NGINX can help users do here, and why NGINX is needed to do such a thing.&lt;/p&gt;
&lt;p&gt;First, we need to sort out the entire interaction process in the oAuth authorization code mode. In order to avoid the obscurity of RFC , let&amp;rsquo;s assume a scenario.&lt;/p&gt;
&lt;p&gt;You are in a startup company, such as a company engaged in AI and big data (of course, it is not listed yet, it is listed, and you may not have time to read this article), your company uses a lot of cloud service examples, buy servers to engage in computer rooms , Engage in infrastructure, that is not a thing. You have used open source to build a lot of systems, and quickly put your business online. Everyone knows that open source systems have a great feature, which is friendly to developers. What does it mean, how is it convenient (that is, developers are lazy, non- To be straight&amp;hellip;), so you see that many open source systems don’t think about authentication, and you visit it after installing it. It seems that there is no account authentication as a matter of course. At first, it didn’t matter, because you were alone, what You have to do everything, as more and more systems, employees begin to increase, you need to make some restrictions on access to different systems for different people, and you are still going to go public, as a public company, your system There is no account, so it is unreasonable. Then you have some application development systems that need to connect to the github API. You need to allow only some advanced developers to access a private repo. And you have no time to build a new user management system yourself. Fortunately, these people have github accounts, so you can use these github accounts to do the simplest and fastest things. These requirements can be summarized as:&lt;/p&gt;
&lt;p&gt;A function needs to be implemented on different systems to enable these systems to interface with github, and use the github account to determine whether employees can access a certain system
Log in with the github account on the application development system, and apply for resource authorization from github to include the person’s repo and other information. If the person does not have the private repo permission, the natural application development system cannot obtain the private under the permission of this employee. repo content
These requirements oAuth can help solve, but there is a problem. If you join the oAuth mechanism, you need to develop on the system. So many open source systems, the development language is different, and even some systems dare not rush to redevelop. It is actually very difficult to achieve and the workload is actually very large.&lt;/p&gt;
&lt;p&gt;Before looking at what NGINX can do, let&amp;rsquo;s take a look at the oAuth process without NGINX and the above requirements.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/1589087602055-1024x534.jpg?v=1589087614&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;From the above process, it can be seen that for users, they log in and authorize once on github, and the browser makes two jumps. The really useful access_token is between the back-end application server and github. The user and the browser itself cannot see the content of this access_token, which is called the backend channel and is relatively safe. So what does the application do after getting this access_token?&lt;/p&gt;
&lt;p&gt;-If it is limited to obtaining some basic information of the user, and the returned access_token is JWT, then the application server can obtain the content in the JWT by itself, so that the user information extraction is associated with some local user IDs, which can be used as Used for login (of course, if it is pure identity authentication and this joint login scenario, in fact, OIDC should still be considered). Of course, if the access_token here is opaque, then the application server also needs to do token introspection, that is, it needs to be verified again with the authorized party before the relevant information can be used.&lt;/p&gt;
&lt;p&gt;-If it is not limited to obtaining user information, but to obtain additional resources, such as the need to obtain the person&amp;rsquo;s repo content, then the application server needs to access this access_token to access a github repo resource server (resource server and The authorization servers are not necessarily the same, and large-scale scenes are usually not the same) to obtain the person&amp;rsquo;s repo content, then the above picture becomes like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/1589088979883-1024x570.jpg?v=1589089012&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, you will find that the web application backend is very critical. It participates in the entire oAuth process and finally obtains the access_token. Imagine, as you said at the beginning of the company, many open source are developed in different languages. System, you have to transform to add this ability. At this time, you actually only want to decide based on the user&amp;rsquo;s information that the system must be logged in through the oAuth process before it can be accessed, or the system determines who can access based on the user name.&lt;/p&gt;
&lt;p&gt;This work can actually be achieved by placing NGINX in front of the web application backend, which means that NGINX is allowed to participate in the oAuth authentication process on behalf of the backend application, and then NGINX can decide whether to allow or reject certain users based on access_token, or Transparently transmit user information to back-end applications for more processing.&lt;/p&gt;
&lt;p&gt;Carefully observe the entire verification process above, which requires NGINX to participate in the construction of the jump return, and use the authorization code to construct the request to directly access the github authorization server. If these tasks are done purely on NGINX, it is actually very difficult. Development through njs is a way but requires the ability to authenticate JWT (so NGINX Plus does not need to install an oauth proxy service like the demo in this article, It can be realized by directly using the njs module + KV module + JWT module. For details, please refer to the second part of this series), but in fact, it can be achieved with the help of the ability of auth_request and an oAuth proxy, which means that we need to be in various The implementation code of the oAuth authentication process created on the open source system is abstracted to it, and a general one is involved. The oAuth proxy agent participates in this oAuth process, and finally the obtained access_token is parsed out. The relevant claims information is returned to NGINX, NGINX Based on this information, we will control whether to allow access to a resource, or transparently pass relevant user information to the final application. So its implementation logic is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/1589090989794-1024x566.jpg?v=1589091004&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The idea and principle of implementation (the following serial number has nothing to do with the figure):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Configure NGINX to publish protected applications&lt;/li&gt;
&lt;li&gt;Configure auth_request under the location section of the relevant application&lt;/li&gt;
&lt;li&gt;In this way, when the request reaches NGINX, NGINX will initiate the sub-request authentication by auth_request&lt;/li&gt;
&lt;li&gt;The sub-request will be proxy_pass to an interface of the oauth proxy service&lt;/li&gt;
&lt;li&gt;According to the characteristics of auth_request, it is necessary for oauth proxy to return the relevant status code to indicate whether NGINX is released or returns 401&lt;/li&gt;
&lt;li&gt;Therefore, after receiving the sub-request, the oauth proxy will determine whether the user has previously completed the relevant oauth authentication work. If the user has not logged in, or the validity period has expired, then the oauth proxy returns 401 (here depends on whether the user browser carries the oauth proxy Issued by a cookie information to check)&lt;/li&gt;
&lt;li&gt;NGINX intercepts the status of 401, and implements the definition of error_page to send a 302 jump to the user&amp;rsquo;s browser if 401 is returned. The address of this jump is actually a special interface of oauth proxy used to trigger the subsequent oAuth process. The subsequent process is no different from normal oAuth.&lt;/li&gt;
&lt;li&gt;After the oAuth proxy completes the entire oAuth process, it returns a 302 jump to the user browser, and this return will also carry the relevant cookie to allow it to revisit the protected application&lt;/li&gt;
&lt;li&gt;After NGINX receives the request, it triggers auth_request again. auth_request sends the request to an interface of oauth proxy again. This visit carries the cookie in 8. This way, the oauth proxy knows who it is based on the cookie, and resolves its access_token to pass relevant claims. Put it in the response header and return to NGINX&lt;/li&gt;
&lt;li&gt;Use auth_request_set to put the claims in the response header of the sub-request into variables and pass it to the parent request&lt;/li&gt;
&lt;li&gt;NGINX judges whether to release based on these variables, or puts these user information in the request header to pass the content to the last protected application&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are many implementations of such an oauth proxy online, here is a brief list:
&lt;a href=&#34;https://github.com/vouch/vouch-proxy&#34;&gt;vouch-proxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/oauth2-proxy/oauth2-proxy&#34;&gt;oauth2 proxy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jirutka/ngx-oauth&#34;&gt;oauth2 proxy by lua -implement proxy directly in lua, no need to install additional proxy service&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;This demonstration uses NGINX plus and vouch-proxy to achieve. For the specific installation and configuration of vouch-proxy, please refer to its github directly, it is not complicated&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/1589093713142-1024x705.jpg?v=1589093738&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the actual demo, the web application backend actually has an intermediate NGINX to simulate, using return to return the content.&lt;/p&gt;
&lt;p&gt;NGINX configuration:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;############entry for protected app http://authcode.imesh.club/personalinfo
server {
    listen 80;
    server_name authcode.imesh.club;
    #root /var/www/html/;

    # send all requests to the `/validate` endpoint for authorization
    auth_request /validate;

    #The location is for auth_request subrequest
    location = /validate {
      # forward the /validate request to Vouch Proxy
      proxy_pass http://127.0.0.1:9090/validate;

      # be sure to pass the original host header
      proxy_set_header Host $http_host;

      # Vouch Proxy only acts on the request headers
      proxy_pass_request_body off;
      proxy_set_header Content-Length &amp;quot;&amp;quot;;

      # optionally add X-Vouch-User as returned by Vouch Proxy along with the request
      auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;

      # these return values are used by the @error401 call
      auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
      auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
      auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
    }

    # if validate returns `401 not authorized` then forward the request to the error401block
    error_page 401 = @error401;

    location @error401 {
        # redirect to Vouch Proxy for login
        return 302 http://vouch.imesh.club/login?url=$scheme://$http_host$request_uri&amp;amp;amp;vouch-failcount=$auth_resp_failcount&amp;amp;amp;X-Vouch-Token=$auth_resp_jwt&amp;amp;amp;error=$auth_resp_err;
        # you usually *want* to redirect to Vouch running behind the same Nginx config proteced by https
        # but to get started you can just forward the end user to the port that vouch is running on
    }

    # for the real service that being protected
    location / {
      # forward authorized requests to your service protectedapp.yourdomain.com
     ##he backend real server also simiulated by this nginx
      proxy_pass http://127.0.0.1:8080;
      # you may need to set these variables in this block as per https://github.com/vouch/vouch-proxy/issues/26#issuecomment-425215810
          auth_request_set $auth_resp_x_vouch_user $upstream_http_x_vouch_user;
          auth_request_set $auth_resp_x_vouch_idp_claims_avatar $upstream_http_x_vouch_idp_claims_avatar_url;
          auth_request_set $auth_resp_x_vouch_idp_claims_company $upstream_http_x_vouch_idp_claims_company;
          auth_request_set $auth_resp_x_vouch_idp_claims_blog $upstream_http_x_vouch_idp_claims_blog;

      # set user header (usually an email)
          proxy_set_header X-Vouch-User $auth_resp_x_vouch_user;
      # optionally pass any custom claims you are tracking
          proxy_set_header X-Vouch-IdP-Claims-company $auth_resp_x_vouch_idp_claims_company;
          proxy_set_header X-Vouch-IdP-Claims-avatar $auth_resp_x_vouch_idp_claims_avatar;
          proxy_set_header X-Vouch-IdP-Claims-blog $auth_resp_x_vouch_idp_claims_blog;
    }
}

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Simulation configuration of back-end applications&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   server {
        listen 8080;

        location /personalinfo {
            default_type text/html;
            set $user $http_x_vouch_user;
            set $avatar $http_x_vouch_idp_claims_avatar;
            set $company $http_x_vouch_idp_claims_company;
            set $blog $http_x_vouch_idp_claims_blog;
            return 200 &#39;&amp;amp;lt;html&amp;gt;&amp;amp;lt;head&amp;gt;&amp;amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot; content=&amp;quot;text/html; charset=utf-8&amp;quot; /&amp;gt;&amp;amp;lt;/head&amp;gt;&amp;amp;lt;h2&amp;gt;Your personal info:&amp;amp;lt;/h2&amp;gt;&amp;amp;lt;hr /&amp;gt;Name: $user &amp;amp;lt;br&amp;gt;avatar: $avatar &amp;amp;lt;br&amp;gt;company: $company &amp;amp;lt;br&amp;gt;blog:$blog &amp;amp;lt;/html&amp;gt;&#39;;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Responsible for receiving the request configuration initiated by the client browser to the oauth proxy:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#######work for vouch login/auth
server {
    listen 80;
    server_name vouch.imesh.club;
    location / {
       proxy_pass http://127.0.0.1:9090;
       # be sure to pass the original host header
       proxy_set_header Host vouch.imesh.club;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The effect of the visit process:
&lt;img src=&#34;https://imesh.club/upload/2020/05/%E5%9B%BE%E7%89%87-1-1-653x1024.png?v=1589095217&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/%E5%9B%BE%E7%89%87-2-682x1024.png?v=1589095226&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/1589096005904.jpg?v=1589096014&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The first visit to &lt;a href=&#34;http://authcode.imesh.club/personalinfo&#34;&gt;http://authcode.imesh.club/personalinfo&lt;/a&gt;, the browser is automatically jumped to the vouch.imesh.club/login? interface, this jump is actually driven by NGINX&lt;/p&gt;
&lt;p&gt;After receiving it, vouch.imesh.club processes it and asks the browser to jump to the github.com/authorize interface. Since it has not logged in on github, github jumps to the /login interface to let the user log in.&lt;/p&gt;
&lt;p&gt;The login interface appears. After logging in, the authorization will be displayed. Clicking on the authorization will be redirected to vouch.imesh.club (the service address of oauth proxy), which actually returns the authorization code to the oauth poxy service.&lt;/p&gt;
&lt;p&gt;After clicking the authorization, the browser will continue to jump. The github implementation will have the following jump prompt, which is actually the browser to jump to the callback interface of vouch.imesh.club:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/%E5%9B%BE%E7%89%87-3.png?v=1589095466&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the callback interface of vouch.imesh.club is accessed, it will drive vouch to initiate access_token acquisition on the server side. At this time, the browser cannot capture it. When vouch has been obtained on the server, it returns a 302 to the browser again. This 302 requires the browser to officially access the application address, and is accompanied by the relevant cookie to the client browser:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/1589096907088.jpg?v=1589096914&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Finally completed the visit:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://imesh.club/upload/2020/05/1589097012011.jpg?v=1589097024&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Use NGINX&amp;rsquo;s auth_request function, and through clever configuration to use oauth proxy to achieve the complete authentication process of oAuth, and pass relevant user information to NGINX to achieve access control and information processing. Except for the back-end, all applications need to develop code to implement oauth verification, so that enterprises can quickly use third-party accounts to control user access&lt;/p&gt;
&lt;h2 id=&#34;follow-up&#34;&gt;Follow up&lt;/h2&gt;
&lt;p&gt;In this practice, the authorization code mode of oAuth is adopted, and the external oauth proxy service is used. If you do not want to rely on external services and want to implement on pure NGINX, you can refer to the second part of this series .&lt;/p&gt;
&lt;p&gt;Check more oAuth posts of the series at my tech blog &lt;a href=&#34;https://imesh.club/?s=oauth&#34;&gt;https://imesh.club/?s=oauth&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
